{"version":3,"file":"static/js/404.41de852c.chunk.js","mappings":"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","sources":["api/transaction.js","utils/financialCalculations.js","sections/model/RevenuInput.js","sections/model/ExpenseInput.js","sections/model/ScenarioSettings.js","sections/model/FinancialTable.js","sections/model/FinancialCharts.js","sections/model/index.js","pages/model_page/modelPage.js","utils/exportToExcel.js"],"sourcesContent":["import axios, { endpoints } from 'src/utils/axios';\r\n\r\nexport const GetRevenueByMonth = async (data) => {\r\n  try {\r\n    let result = {type: '', data: {}}\r\n    await axios.post(endpoints.revenue.getRevenueByMonth, data)\r\n            .then(res => {result = {type: 'success', data: res.data}})\r\n            .catch(err => {result = {type: 'error', data: err}})\r\n    return result;\r\n  } catch (error) {\r\n    console.error(\r\n      'Error fetching Revenue By Month:', error\r\n    );\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const GetRevenue = async (data) => {\r\n  try {\r\n    let result = {type: '', data: {}}\r\n    await axios.post(endpoints.revenue.getRevenue, data)\r\n            .then(res => {result = {type: 'success', data: res.data.data.data}})\r\n            .catch(err => {result = {type: 'error', data: err}})\r\n    return result;\r\n  } catch (error) {\r\n    console.error(\r\n      'Error fetching Revenue:',error\r\n    );\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const GetBalanceSheet = async (data) => {\r\n  try {\r\n    let result = {type: '', data: {}}\r\n    await axios.post(endpoints.balanceSheet.getBalanceSheet, data)\r\n            .then(res => {result = {type: 'success', data: res.data.data.data}})\r\n            .catch(err => {result = {type: 'error', data: err}})\r\n    return result;\r\n  } catch (error) {\r\n    console.error(\r\n      'Error fetching Revenue:',error\r\n    );\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const GetBalanceSheetByMonth = async (data) => {\r\n  try {\r\n    let result = {type: '', data: {}}\r\n    await axios.post(endpoints.balanceSheet.getBalanceSheetByMonth, data)\r\n            .then(res => {result = {type: 'success', data: res.data}})\r\n            .catch(err => {result = {type: 'error', data: err}})\r\n    return result;\r\n  } catch (error) {\r\n    console.error(\r\n      'Error fetching Balance Sheet By Month:', error\r\n    );\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const GetCOA = async (userId) => {\r\n  try {\r\n    let result = {type: '', data: {}}\r\n    await axios.post(endpoints.coa.getCOA, {userId})\r\n            .then(res => {result = {type: 'success', data: res.data.data.data}})\r\n            .catch(err => {result = {type: 'error', data: err}})\r\n    return result\r\n  } catch (error) {\r\n    console.error(\r\n      'Error fetching Revenue:',error\r\n    );\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const CreateRevenue = async (data) => {\r\n  try {\r\n    let result = {type: '', data: {}}\r\n    await axios.post(endpoints.revenue.create, data)\r\n            .then(res => {result = {type: 'success', data: res.data.data.data}})\r\n            .catch(err => {result = {type: 'error', data: err}})\r\n    return result;\r\n  } catch (error) {\r\n    console.log(\"Error Create Revenue\", error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport const CreateBalanceSheet = async (data) => {\r\n  try {\r\n    let result = {type: '', data: {}}\r\n    await axios.post(endpoints.balanceSheet.create, data)\r\n            .then(res => {result = {type: 'success', data: res.data.data.data}})\r\n            .catch(err => {result = {type: 'error', data: err}})\r\n    return result;\r\n  } catch (error) {\r\n    console.log(\"Error Create Revenue\", error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport const CreateCOA = async (data) => {\r\n  try {\r\n    let result = {type: '', data: {}}\r\n    await axios.post(endpoints.coa.create, data)\r\n            .then(res => {result = {type: 'success', data: res.data.data.data}})\r\n            .catch(err => {result = {type: 'error', data: err}})\r\n    return result;\r\n  } catch (error) {\r\n    console.log(\"Error Create COA\", error);\r\n    return [];\r\n  }\r\n}\r\n\r\nexport const GetAllRevenueData = async (userId) => {\r\n  try {\r\n    let result = {type:'', data:{}}\r\n    await axios.post(endpoints.revenue.getAllRevenue, {userId})\r\n            .then(res => {result = {type:'success', data:res.data}})\r\n            .catch(err => {result = {type: 'error', data:err}})\r\n    return result;\r\n  } catch (error) {\r\n    console.error(\r\n      'Error fetching Revenue By Month:', error\r\n    );\r\n    throw error;\r\n  }\r\n}","export const calculateScenarioResults = (\r\n  revenueStreams,\r\n  expenses,\r\n  settings\r\n) => {\r\n  const baseRevenue = revenueStreams.reduce(\r\n    (sum, stream) => sum + stream.amount,\r\n    0\r\n  );\r\n  const baseExpenses = expenses.reduce(\r\n    (sum, expense) => sum + expense.amount,\r\n    0\r\n  );\r\n\r\n  const scenarios = [\"probable\", \"best\", \"worst\"];\r\n  const results = {\r\n    probable: [],\r\n    best: [],\r\n    worst: [],\r\n  };\r\n\r\n  scenarios.forEach((scenario) => {\r\n    // Get scenario-specific settings\r\n    const scenarioData = settings[scenario];\r\n    const yearlyData = [];\r\n\r\n    for (let year = 1; year <= settings.projectionPeriod; year += 1) {\r\n      const totalRevenue =\r\n        baseRevenue * (1 + scenarioData.revenueGrowth / 100) ** (year - 1);\r\n      const totalExpenses =\r\n        baseExpenses * (1 + scenarioData.expenseGrowth / 100) ** (year - 1);\r\n      const netProfit = totalRevenue - totalExpenses;\r\n      const profitMargin =\r\n        totalRevenue > 0 ? (netProfit / totalRevenue) * 100 : 0;\r\n\r\n      yearlyData.push({\r\n        year,\r\n        totalRevenue,\r\n        totalExpenses,\r\n        netProfit,\r\n        profitMargin,\r\n      });\r\n    }\r\n\r\n    results[scenario] = yearlyData;\r\n  });\r\n\r\n  return results;\r\n};\r\n\r\nexport const formatCurrency = (amount) =>\r\n  new Intl.NumberFormat(\"en-US\", {\r\n    style: \"currency\",\r\n    currency: \"USD\",\r\n    minimumFractionDigits: 0,\r\n    maximumFractionDigits: 0,\r\n  }).format(amount);\r\n\r\nexport const formatPercentage = (value) => `${value.toFixed(1)}%`;\r\n\r\nexport const divideRevenue = (revenueData = [], coa = []) => {\r\n  const revenue = [];\r\n  const expense = [];\r\n\r\n  const setTotalResult = (type, newItem) => {\r\n    let flag = false;\r\n    if (type) {\r\n      if (revenue.length > 0) {\r\n        revenue.forEach((ritem) => {\r\n          if (ritem.name === newItem.name) {\r\n            ritem.amount += newItem.amount;\r\n            ritem.avg += newItem.amount;\r\n            flag = true;\r\n          }\r\n        });\r\n      }\r\n      if (flag === false) revenue.push(newItem);\r\n    } else {\r\n      if (expense.length > 0) {\r\n        expense.forEach((eitem) => {\r\n          if (eitem.name === newItem.name) {\r\n            eitem.amount += newItem.amount;\r\n            eitem.avg += newItem.amount;\r\n            flag = true;\r\n          }\r\n        });\r\n      }\r\n      if (flag === false) expense.push(newItem);\r\n    }\r\n  };\r\n\r\n  revenueData.forEach((rItem) => {\r\n    coa.forEach((cItem) => {\r\n      if (rItem.accountId === cItem[0]) {\r\n        const newItem = {\r\n          id: rItem.code,\r\n          name: cItem[1],\r\n          amount: rItem.amount,\r\n          avg:rItem.amount,\r\n          adjust: 0\r\n        };\r\n\r\n        switch (cItem[4]) {\r\n          case \"Revenues\":\r\n            setTotalResult(true, newItem);\r\n            break;\r\n          case \"COGS/S&O\":\r\n            setTotalResult(false, newItem);\r\n            break;\r\n          case \"SGA\":\r\n            setTotalResult(false, newItem);\r\n            break;\r\n          case \"Depreciation & Amortization\":\r\n            setTotalResult(false, newItem);\r\n            break;\r\n          case \"Cash & Equivalents\":\r\n            setTotalResult(false, newItem);\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n      }\r\n    });\r\n  });\r\n  return {revenueList:revenue, expenseList: expense}\r\n};\r\n","import React from \"react\";\r\nimport { Plus, X } from \"lucide-react\";\r\nimport {\r\n  TextField,\r\n  Typography,\r\n  Button,\r\n  Box,\r\n  IconButton,\r\n  Stack,\r\n} from \"@mui/material\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const RevenueInput = ({ revenueStreams, onUpdate }) => {\r\n  const isEditable = (id) => id.startsWith(\"new_\");\r\n\r\n  const addRevenueStream = () => {\r\n    const newStream = {\r\n      id: `new_${Date.now()}`,\r\n      name: `Product ${String.fromCharCode(65 + revenueStreams.length)}`,\r\n      amount: 0,\r\n    };\r\n    onUpdate([...revenueStreams, newStream]);\r\n  };\r\n\r\n  const updateRevenueStream = (id, field, value) => {\r\n    let updated = [];\r\n\r\n    updated =\r\n      field !== \"adjust\"\r\n        ? revenueStreams.map((stream) =>\r\n            stream.id === id ? { ...stream, [field]: value } : stream\r\n          )\r\n        : revenueStreams.map((stream) =>\r\n            stream.id === id\r\n              ? { ...stream, [field]: value, amount: stream.avg + value }\r\n              : stream\r\n          );\r\n    onUpdate(updated);\r\n  };\r\n\r\n  const removeRevenueStream = (id) => {\r\n    onUpdate(revenueStreams.filter((stream) => stream.id !== id));\r\n  };\r\n\r\n  return (\r\n    <Box sx={{ display: \"flex\", flexDirection: \"column\", gap: 2 }}>\r\n      <Typography\r\n        variant=\"h6\"\r\n        sx={{\r\n          fontWeight: 500,\r\n          color: \"primary.main\",\r\n          fontSize: \"0.875rem\",\r\n        }}\r\n      >\r\n        Revenue Streams\r\n      </Typography>\r\n      <Box\r\n        sx={{\r\n          display: \"flex\",\r\n          gap: 1,\r\n          alignItems: \"center\",\r\n          justifyContent: 'space-between'\r\n        }}\r\n      >\r\n        <Typography\r\n          variant=\"subtitle1\"\r\n          sx={{\r\n            color: \"text.secondary\",\r\n            fontSize: \"0.875rem\",\r\n          }}\r\n        >\r\n          RevenueName\r\n        </Typography>\r\n        <Typography\r\n          variant=\"subtitle1\"\r\n          sx={{\r\n            color: \"text.secondary\",\r\n            fontSize: \"0.875rem\",\r\n          }}\r\n        >\r\n          Average\r\n        </Typography>\r\n        <Typography\r\n          variant=\"subtitle1\"\r\n          sx={{\r\n            color: \"text.secondary\",\r\n            fontSize: \"0.875rem\",\r\n          }}\r\n        >\r\n          Adjustment\r\n        </Typography>\r\n      </Box>\r\n      <Box\r\n        sx={{\r\n          height: \"140px\",\r\n          overflowY: \"auto\",\r\n          pr: 1,\r\n          \"&::-webkit-scrollbar\": {\r\n            width: \"6px\",\r\n          },\r\n          \"&::-webkit-scrollbar-track\": {\r\n            backgroundColor: \"transparent\",\r\n          },\r\n          \"&::-webkit-scrollbar-thumb\": {\r\n            backgroundColor: \"rgba(0,0,0,0.2)\",\r\n            borderRadius: \"3px\",\r\n          },\r\n        }}\r\n      >\r\n        <Stack spacing={1.5}>\r\n          {revenueStreams.map((stream) => {\r\n            const itemEditable = isEditable(stream.id);\r\n            return (\r\n              <Box\r\n                key={stream.id}\r\n                sx={{\r\n                  display: \"flex\",\r\n                  gap: 1,\r\n                  alignItems: \"center\",\r\n                  justifyContent:'space-between'\r\n                }}\r\n              >\r\n                <TextField\r\n                  value={stream.name}\r\n                  onChange={(e) =>\r\n                    updateRevenueStream(stream.id, \"name\", e.target.value)\r\n                  }\r\n                  placeholder=\"Revenue stream name\"\r\n                  size=\"small\"\r\n                  sx={{\r\n                    width: \"140px\",\r\n                    \"& .MuiInputBase-input\": {\r\n                      backgroundColor: itemEditable\r\n                        ? \"transparent\"\r\n                        : \"transparent\",\r\n                      cursor: itemEditable ? \"text\" : \"default\",\r\n                    },\r\n                  }}\r\n                  variant=\"outlined\"\r\n                  InputProps={{\r\n                    readOnly: !itemEditable,\r\n                  }}\r\n                />\r\n                <TextField\r\n                  type=\"number\"\r\n                  value={stream.amount}\r\n                  onChange={(e) =>\r\n                    updateRevenueStream(\r\n                      stream.id,\r\n                      \"amount\",\r\n                      parseInt(e.target.value, 10) || 0\r\n                    )\r\n                  }\r\n                  placeholder=\"Amount\"\r\n                  size=\"small\"\r\n                  sx={{\r\n                    width: \"70px\",\r\n                    \"& .MuiInputBase-input\": {\r\n                      backgroundColor: itemEditable\r\n                        ? \"transparent\"\r\n                        : \"transparent\",\r\n                      cursor: itemEditable ? \"text\" : \"default\",\r\n                    },\r\n                  }}\r\n                  variant=\"outlined\"\r\n                  InputProps={{\r\n                    readOnly: !itemEditable,\r\n                  }}\r\n                  disabled={!itemEditable}\r\n                />\r\n                <TextField\r\n                  type=\"number\"\r\n                  value={!itemEditable ? stream.adjust : \"no need\"}\r\n                  onChange={(e) =>\r\n                    updateRevenueStream(\r\n                      stream.id,\r\n                      \"adjust\",\r\n                      parseInt(e.target.value, 10) || 0\r\n                    )\r\n                  }\r\n                  placeholder={!itemEditable ? \"0\" : \"no need\"}\r\n                  size=\"small\"\r\n                  sx={{\r\n                    width: \"70px\",\r\n                    \"& .MuiInputBase-input\": {\r\n                      backgroundColor: !itemEditable\r\n                        ? \"transparent\"\r\n                        : \"transparent\",\r\n                      cursor: !itemEditable ? \"text\" : \"default\",\r\n                    },\r\n                  }}\r\n                  variant=\"outlined\"\r\n                  disabled={itemEditable}\r\n                />\r\n                <IconButton\r\n                  onClick={() => removeRevenueStream(stream.id)}\r\n                  size=\"small\"\r\n                  sx={{\r\n                    color: \"error.main\",\r\n                    \"&:hover\": {\r\n                      color: \"error.dark\",\r\n                    },\r\n                  }}\r\n                >\r\n                  <X size={16} />\r\n                </IconButton>\r\n              </Box>\r\n            );\r\n          })}\r\n        </Stack>\r\n      </Box>\r\n\r\n      <Button\r\n        variant=\"text\"\r\n        onClick={addRevenueStream}\r\n        startIcon={<Plus size={16} />}\r\n        sx={{\r\n          color: \"primary.main\",\r\n          justifyContent: \"flex-start\",\r\n          \"&:hover\": {\r\n            color: \"primary.dark\",\r\n            backgroundColor: \"primary.50\",\r\n          },\r\n        }}\r\n      >\r\n        Add Revenue Stream\r\n      </Button>\r\n    </Box>\r\n  );\r\n};\r\n\r\nRevenueInput.propTypes = {\r\n  revenueStreams: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      amount: PropTypes.number.isRequired,\r\n    })\r\n  ).isRequired,\r\n  onUpdate: PropTypes.func.isRequired,\r\n};\r\n","import React from \"react\";\r\nimport { Plus, X } from \"lucide-react\";\r\nimport {\r\n  TextField,\r\n  Typography,\r\n  Button,\r\n  Box,\r\n  IconButton,\r\n  Stack,\r\n} from \"@mui/material\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const ExpenseInput = ({ expenses, onUpdate }) => {\r\n  const isEditable = (id) => id.startsWith(\"new_\");\r\n\r\n  const addExpense = () => {\r\n    const expenseNames = [\r\n      \"Salaries\",\r\n      \"Rent\",\r\n      \"Marketing\",\r\n      \"Equipment\",\r\n      \"Utilities\",\r\n    ];\r\n    const usedNames = expenses.map((e) => e.name);\r\n    const availableNames = expenseNames.filter(\r\n      (name) => !usedNames.includes(name)\r\n    );\r\n    const newName =\r\n      availableNames.length > 0\r\n        ? availableNames[0]\r\n        : `Expense ${expenses.length + 1}`;\r\n\r\n    const newExpense = {\r\n      id: `new_${Date.now()}`,\r\n      name: newName,\r\n      amount: 0,\r\n    };\r\n    onUpdate([...expenses, newExpense]);\r\n  };\r\n\r\n  const updateExpense = (id, field, value) => {\r\n    let updated = [];\r\n\r\n    updated =\r\n      field !== \"adjust\"\r\n        ? expenses.map((expense) =>\r\n            expense.id === id ? { ...expense, [field]: value } : expense\r\n          )\r\n        : expenses.map((expense) =>\r\n            expense.id === id\r\n              ? { ...expense, [field]: value, amount: expense.avg + value }\r\n              : expense\r\n          );\r\n    onUpdate(updated);\r\n  };\r\n\r\n  const removeExpense = (id) => {\r\n    if (!isEditable(id)) return;\r\n\r\n    onUpdate(expenses.filter((expense) => expense.id !== id));\r\n  };\r\n\r\n  return (\r\n    <Box sx={{ display: \"flex\", flexDirection: \"column\", gap: 2 }}>\r\n      <Typography\r\n        variant=\"h6\"\r\n        sx={{\r\n          fontWeight: 500,\r\n          color: \"primary.main\",\r\n          fontSize: \"0.875rem\",\r\n        }}\r\n      >\r\n        Expenses\r\n      </Typography>\r\n      <Box\r\n        sx={{\r\n          display: \"flex\",\r\n          gap: 1,\r\n          alignItems: \"center\",\r\n          justifyContent: 'space-between'\r\n        }}\r\n      >\r\n        <Typography\r\n          variant=\"subtitle1\"\r\n          sx={{\r\n            color: \"text.secondary\",\r\n            fontSize: \"0.875rem\",\r\n          }}\r\n        >\r\n          ExpenseName\r\n        </Typography>\r\n        <Typography\r\n          variant=\"subtitle1\"\r\n          sx={{\r\n            color: \"text.secondary\",\r\n            fontSize: \"0.875rem\",\r\n          }}\r\n        >\r\n          Average\r\n        </Typography>\r\n        <Typography\r\n          variant=\"subtitle1\"\r\n          sx={{\r\n            color: \"text.secondary\",\r\n            fontSize: \"0.875rem\",\r\n          }}\r\n        >\r\n          Adjustment\r\n        </Typography>\r\n      </Box>\r\n      <Box\r\n        sx={{\r\n          height: \"140px\",\r\n          overflowY: \"auto\",\r\n          pr: 1,\r\n          \"&::-webkit-scrollbar\": {\r\n            width: \"6px\",\r\n          },\r\n          \"&::-webkit-scrollbar-track\": {\r\n            backgroundColor: \"transparent\",\r\n          },\r\n          \"&::-webkit-scrollbar-thumb\": {\r\n            backgroundColor: \"rgba(0,0,0,0.2)\",\r\n            borderRadius: \"3px\",\r\n          },\r\n        }}\r\n      >\r\n        <Stack spacing={1.5}>\r\n          {expenses.map((expense) => {\r\n            const itemEditable = isEditable(expense.id);\r\n            return (\r\n              <Box\r\n                key={expense.id}\r\n                sx={{\r\n                  display: \"flex\",\r\n                  gap: 1,\r\n                  alignItems: \"center\",\r\n                  justifyContent:'space-between'\r\n                }}\r\n              >\r\n                <TextField\r\n                  value={expense.name}\r\n                  onChange={(e) =>\r\n                    updateExpense(expense.id, \"name\", e.target.value)\r\n                  }\r\n                  placeholder=\"Expense name\"\r\n                  size=\"small\"\r\n                  sx={{\r\n                    width: \"140px\",\r\n                    \"& .MuiInputBase-input\": {\r\n                      backgroundColor: itemEditable\r\n                        ? \"transparent\"\r\n                        : \"transparent\",\r\n                      cursor: itemEditable ? \"text\" : \"default\",\r\n                    },\r\n                  }}\r\n                  variant=\"outlined\"\r\n                  InputProps={{\r\n                    readOnly: !itemEditable,\r\n                  }}\r\n                />\r\n                <TextField\r\n                  type=\"number\"\r\n                  value={expense.amount}\r\n                  onChange={(e) =>\r\n                    updateExpense(\r\n                      expense.id,\r\n                      \"amount\",\r\n                      parseInt(e.target.value, 10) || 0\r\n                    )\r\n                  }\r\n                  placeholder=\"Amount\"\r\n                  size=\"small\"\r\n                  sx={{\r\n                    width: \"70px\",\r\n                    \"& .MuiInputBase-input\": {\r\n                      backgroundColor: itemEditable\r\n                        ? \"transparent\"\r\n                        : \"transparent\",\r\n                      cursor: itemEditable ? \"text\" : \"default\",\r\n                    },\r\n                  }}\r\n                  variant=\"outlined\"\r\n                  InputProps={{\r\n                    readOnly: !itemEditable,\r\n                  }}\r\n                  disabled={!itemEditable}\r\n                />\r\n                <TextField\r\n                  type=\"number\"\r\n                  value={!itemEditable ? expense.adjust : 'no need'}\r\n                  onChange={(e) =>\r\n                    updateExpense(\r\n                      expense.id,\r\n                      \"adjust\",\r\n                      parseInt(e.target.value, 10) || 0\r\n                    )\r\n                  }\r\n                  placeholder={!itemEditable ? \"0\" : \"no need\"}\r\n                  size=\"small\"\r\n                  sx={{\r\n                    width: \"70px\",\r\n                    \"& .MuiInputBase-input\": {\r\n                      backgroundColor: !itemEditable\r\n                        ? \"transparent\"\r\n                        : \"transparent\",\r\n                      cursor: !itemEditable ? \"text\" : \"default\",\r\n                    },\r\n                  }}\r\n                  variant=\"outlined\"\r\n                  InputProps={{\r\n                    readOnly: itemEditable,\r\n                  }}\r\n                  disabled={itemEditable}\r\n                />\r\n                <IconButton\r\n                  onClick={() => removeExpense(expense.id)}\r\n                  size=\"small\"\r\n                  sx={{\r\n                    color: \"error.main\",\r\n                    \"&:hover\": {\r\n                      color: \"error.dark\",\r\n                    },\r\n                  }}\r\n                >\r\n                  <X size={16} />\r\n                </IconButton>\r\n              </Box>\r\n            );\r\n          })}\r\n        </Stack>\r\n      </Box>\r\n      <Button\r\n        variant=\"text\"\r\n        onClick={addExpense}\r\n        startIcon={<Plus size={16} />}\r\n        sx={{\r\n          color: \"primary.main\",\r\n          justifyContent: \"flex-start\",\r\n          \"&:hover\": {\r\n            color: \"primary.dark\",\r\n            backgroundColor: \"primary.50\",\r\n          },\r\n        }}\r\n      >\r\n        Add Expense\r\n      </Button>\r\n    </Box>\r\n  );\r\n};\r\n\r\nExpenseInput.propTypes = {\r\n  expenses: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      amount: PropTypes.number.isRequired,\r\n    })\r\n  ).isRequired,\r\n  onUpdate: PropTypes.func.isRequired,\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n  Typography,\r\n  TextField,\r\n  Select,\r\n  MenuItem,\r\n  FormControl,\r\n  Box,\r\n  Grid,\r\n  Stack\r\n} from '@mui/material';\r\n\r\nexport const ScenarioSettings = ({ settings, onUpdate }) => {\r\n  const updateScenario = (scenario, field, value) => {\r\n    onUpdate({\r\n      ...settings,\r\n      [scenario]: {\r\n        ...settings[scenario],\r\n        [field]: value\r\n      }\r\n    });\r\n  };\r\n\r\n  const updatePeriod = (period) => {\r\n    onUpdate({\r\n      ...settings,\r\n      projectionPeriod: period\r\n    });\r\n  };\r\n\r\n  const renderScenarioSection = (title, scenarioKey) => (\r\n    <Box>\r\n      <Typography \r\n        variant=\"subtitle2\" \r\n        sx={{ \r\n          fontWeight: 500, \r\n          color: 'text.secondary',\r\n          fontSize: '0.875rem',\r\n          mb: 2\r\n        }}\r\n      >\r\n        {title}\r\n      </Typography>\r\n      <Grid container spacing={2}>\r\n        <Grid item xs={6}>\r\n          <Box>\r\n            <Typography \r\n              variant=\"caption\" \r\n              sx={{ \r\n                color: 'text.disabled',\r\n                fontSize: '0.75rem',\r\n                display: 'block',\r\n                mb: 0.5\r\n              }}\r\n            >\r\n              Revenue Growth %\r\n            </Typography>\r\n            <TextField\r\n              type=\"number\"\r\n              value={settings[scenarioKey].revenueGrowth}\r\n              onChange={(e) => updateScenario(scenarioKey, 'revenueGrowth', parseFloat(e.target.value) || 0)}\r\n              size=\"small\"\r\n              fullWidth\r\n              variant=\"outlined\"\r\n            />\r\n          </Box>\r\n        </Grid>\r\n        <Grid item xs={6}>\r\n          <Box>\r\n            <Typography \r\n              variant=\"caption\" \r\n              sx={{ \r\n                color: 'text.disabled',\r\n                fontSize: '0.75rem',\r\n                display: 'block',\r\n                mb: 0.5\r\n              }}\r\n            >\r\n              Expense Growth %\r\n            </Typography>\r\n            <TextField\r\n              type=\"number\"\r\n              value={settings[scenarioKey].expenseGrowth}\r\n              onChange={(e) => updateScenario(scenarioKey, 'expenseGrowth', parseFloat(e.target.value) || 0)}\r\n              size=\"small\"\r\n              fullWidth\r\n              variant=\"outlined\"\r\n            />\r\n          </Box>\r\n        </Grid>\r\n      </Grid>\r\n    </Box>\r\n  );\r\n\r\n  return (\r\n    <Stack spacing={3}>\r\n      {renderScenarioSection('Probable Case (Base)', 'probable')}\r\n      {renderScenarioSection('Best Case', 'best')}\r\n      {renderScenarioSection('Worst Case', 'worst')}\r\n      \r\n      <Box>\r\n        <Typography \r\n          variant=\"subtitle2\" \r\n          sx={{ \r\n            fontWeight: 500, \r\n            color: 'text.secondary',\r\n            fontSize: '0.875rem',\r\n            mb: 1\r\n          }}\r\n        >\r\n          Projection Period\r\n        </Typography>\r\n        <FormControl size=\"small\" fullWidth>\r\n          <Select\r\n            value={settings.projectionPeriod}\r\n            onChange={(e) => updatePeriod(e.target.value)}\r\n            variant=\"outlined\"\r\n          >\r\n            <MenuItem value={3}>3 Years</MenuItem>\r\n            <MenuItem value={5}>5 Years</MenuItem>\r\n            <MenuItem value={10}>10 Years</MenuItem>\r\n          </Select>\r\n        </FormControl>\r\n      </Box>\r\n    </Stack>\r\n  );\r\n};\r\n\r\nScenarioSettings.propTypes = {\r\n  settings: PropTypes.shape({\r\n    probable: PropTypes.shape({\r\n      revenueGrowth: PropTypes.number.isRequired,\r\n      expenseGrowth: PropTypes.number.isRequired\r\n    }).isRequired,\r\n    best: PropTypes.shape({\r\n      revenueGrowth: PropTypes.number.isRequired,\r\n      expenseGrowth: PropTypes.number.isRequired\r\n    }).isRequired,\r\n    worst: PropTypes.shape({\r\n      revenueGrowth: PropTypes.number.isRequired,\r\n      expenseGrowth: PropTypes.number.isRequired\r\n    }).isRequired,\r\n    projectionPeriod: PropTypes.number.isRequired\r\n  }).isRequired,\r\n  onUpdate: PropTypes.func.isRequired\r\n};","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n  Paper,\r\n  Typography,\r\n  Button,\r\n  Box,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Stack\r\n} from '@mui/material';\r\nimport { formatCurrency, formatPercentage } from 'src/utils/financialCalculations';\r\n\r\nexport const FinancialTable = ({\r\n  probableData,\r\n  bestData,\r\n  worstData\r\n}) => {\r\n  const [selectedScenario, setSelectedScenario] = useState('probable');\r\n\r\n  const getScenarioData = () => {\r\n    switch (selectedScenario) {\r\n      case 'best': return bestData;\r\n      case 'worst': return worstData;\r\n      default: return probableData;\r\n    }\r\n  };\r\n\r\n  const scenarioButtons = [\r\n    { \r\n      scenario: 'probable', \r\n      label: 'Probable', \r\n      activeColor: '#1976d2',\r\n      activeBgColor: '#e3f2fd'\r\n    },\r\n    { \r\n      scenario: 'best', \r\n      label: 'Best', \r\n      activeColor: '#2e7d32',\r\n      activeBgColor: '#e8f5e8'\r\n    },\r\n    { \r\n      scenario: 'worst', \r\n      label: 'Worst', \r\n      activeColor: '#d32f2f',\r\n      activeBgColor: '#ffebee'\r\n    }\r\n  ];\r\n\r\n  const currentData = getScenarioData();\r\n\r\n  return (\r\n    <Paper sx={{ borderRadius: 2, overflow: 'hidden' }}>\r\n      <Box\r\n        sx={{\r\n          p: 3,\r\n        }}\r\n      >\r\n        <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\r\n          <Typography variant=\"h6\" component=\"h3\" sx={{ fontWeight: 600 }}>\r\n            Financial Summary\r\n          </Typography>\r\n          <Stack direction=\"row\" spacing={1}>\r\n            {scenarioButtons.map(({ scenario, label, activeColor, activeBgColor }) => {\r\n              const isActive = selectedScenario === scenario;\r\n              return (\r\n                <Button\r\n                  key={scenario}\r\n                  type=\"button\"\r\n                  onClick={() => setSelectedScenario(scenario)}\r\n                  variant={isActive ? \"contained\" : \"outlined\"}\r\n                  size=\"small\"\r\n                  sx={{\r\n                    minWidth: 80,\r\n                    fontWeight: 500,\r\n                    textTransform: 'none',\r\n                    ...(isActive ? {\r\n                      backgroundColor: activeBgColor,\r\n                      color: activeColor,\r\n                      '&:hover': {\r\n                        backgroundColor: activeBgColor,\r\n                        opacity: 0.8\r\n                      }\r\n                    } : {\r\n                      color: '#666',\r\n                      borderColor: '#e0e0e0',\r\n                      '&:hover': {\r\n                        backgroundColor: '#e0e0e0'\r\n                      }\r\n                    })\r\n                  }}\r\n                >\r\n                  {label}\r\n                </Button>\r\n              );\r\n            })}\r\n          </Stack>\r\n        </Box>\r\n      </Box>\r\n      \r\n      <TableContainer>\r\n        <Table sx={{ minWidth: 650 }}>\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell sx={{ fontWeight: 600, textTransform: 'uppercase', fontSize: '0.75rem' }}>\r\n                Year\r\n              </TableCell>\r\n              <TableCell sx={{ fontWeight: 600, textTransform: 'uppercase', fontSize: '0.75rem' }}>\r\n                Total Revenue\r\n              </TableCell>\r\n              <TableCell sx={{ fontWeight: 600, textTransform: 'uppercase', fontSize: '0.75rem' }}>\r\n                Total Expenses\r\n              </TableCell>\r\n              <TableCell sx={{ fontWeight: 600, textTransform: 'uppercase', fontSize: '0.75rem' }}>\r\n                Net Profit\r\n              </TableCell>\r\n              <TableCell sx={{ fontWeight: 600, textTransform: 'uppercase', fontSize: '0.75rem' }}>\r\n                Profit Margin\r\n              </TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {currentData.map((data) => (\r\n              <TableRow \r\n                key={data.year}\r\n                sx={{\r\n                  '&:hover': {\r\n                    backgroundColor: '#919EAB'\r\n                  }\r\n                }}\r\n              >\r\n                <TableCell sx={{ fontWeight: 500, fontSize: '0.875rem' }}>\r\n                  Year {data.year}\r\n                </TableCell>\r\n                <TableCell sx={{ fontSize: '0.875rem' }}>\r\n                  {formatCurrency(data.totalRevenue)}\r\n                </TableCell>\r\n                <TableCell sx={{ fontSize: '0.875rem' }}>\r\n                  {formatCurrency(data.totalExpenses)}\r\n                </TableCell>\r\n                <TableCell \r\n                  sx={{ \r\n                    fontWeight: 500,\r\n                    fontSize: '0.875rem',\r\n                    color: data.netProfit >= 0 ? '#2e7d32' : '#d32f2f'\r\n                  }}\r\n                >\r\n                  {formatCurrency(data.netProfit)}\r\n                </TableCell>\r\n                <TableCell sx={{ fontSize: '0.875rem' }}>\r\n                  {formatPercentage(data.profitMargin)}\r\n                </TableCell>\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nFinancialTable.propTypes = {\r\n  probableData: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      year: PropTypes.number.isRequired,\r\n      totalRevenue: PropTypes.number.isRequired,\r\n      totalExpenses: PropTypes.number.isRequired,\r\n      netProfit: PropTypes.number.isRequired,\r\n      profitMargin: PropTypes.number.isRequired\r\n    })\r\n  ).isRequired,\r\n  bestData: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      year: PropTypes.number.isRequired,\r\n      totalRevenue: PropTypes.number.isRequired,\r\n      totalExpenses: PropTypes.number.isRequired,\r\n      netProfit: PropTypes.number.isRequired,\r\n      profitMargin: PropTypes.number.isRequired\r\n    })\r\n  ).isRequired,\r\n  worstData: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      year: PropTypes.number.isRequired,\r\n      totalRevenue: PropTypes.number.isRequired,\r\n      totalExpenses: PropTypes.number.isRequired,\r\n      netProfit: PropTypes.number.isRequired,\r\n      profitMargin: PropTypes.number.isRequired\r\n    })\r\n  ).isRequired\r\n};","import React from 'react';\r\nimport {\r\n  BarChart,\r\n  Bar,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  ResponsiveContainer,\r\n  LineChart,\r\n  Line,\r\n  PieChart,\r\n  Pie,\r\n  Cell\r\n} from 'recharts';\r\nimport {\r\n  Typography,\r\n  Box,\r\n  Paper,\r\n  Grid,\r\n  Stack\r\n} from '@mui/material';\r\nimport PropTypes from 'prop-types';\r\nimport { formatCurrency } from 'src/utils/financialCalculations';\r\n\r\nconst CustomTooltip = ({ active, payload, label }) => {\r\n  if (active && payload && payload.length) {\r\n    return (\r\n      <Paper\r\n        elevation={3}\r\n        sx={{\r\n          p: 2,\r\n          backgroundColor: 'white',\r\n          border: '1px solid #e0e0e0'\r\n        }}\r\n      >\r\n        <Typography variant=\"subtitle2\" sx={{ fontWeight: 600, mb: 1 }}>\r\n          {label}\r\n        </Typography>\r\n        {payload.map((entry, index) => (\r\n          <Typography\r\n            key={index}\r\n            variant=\"body2\"\r\n            sx={{ color: entry.color }}\r\n          >\r\n            {entry.dataKey}: {formatCurrency(entry.value)}\r\n          </Typography>\r\n        ))}\r\n      </Paper>\r\n    );\r\n  }\r\n  return null;\r\n};\r\n\r\nCustomTooltip.propTypes = {\r\n  active: PropTypes.bool,\r\n  payload: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      dataKey: PropTypes.string,\r\n      value: PropTypes.number,\r\n      color: PropTypes.string\r\n    })\r\n  ),\r\n  label: PropTypes.string\r\n};\r\n\r\nconst LegendItem = ({ color, label }) => (\r\n  <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n    <Box\r\n      sx={{\r\n        width: 16,\r\n        height: 16,\r\n        backgroundColor: color,\r\n        borderRadius: 1\r\n      }}\r\n    />\r\n    <Typography variant=\"body2\" sx={{ color: 'text.secondary' }}>\r\n      {label}\r\n    </Typography>\r\n  </Stack>\r\n);\r\n\r\nLegendItem.propTypes = {\r\n  color: PropTypes.string.isRequired,\r\n  label: PropTypes.string.isRequired\r\n};\r\n\r\nexport const FinancialCharts = ({\r\n  probableData,\r\n  bestData,\r\n  worstData,\r\n  revenueStreams\r\n}) => {\r\n  const revenueVsExpensesData = probableData.map(data => ({\r\n    year: `Year ${data.year}`,\r\n    Revenue: data.totalRevenue,\r\n    Expenses: data.totalExpenses\r\n  }));\r\n\r\n  const netProfitComparisonData = probableData.map((prob, index) => ({\r\n    year: `Year ${prob.year}`,\r\n    'Probable Case': prob.netProfit,\r\n    'Best Case': bestData[index]?.netProfit || 0,\r\n    'Worst Case': worstData[index]?.netProfit || 0\r\n  }));\r\n\r\n  const pieData = revenueStreams.map((stream, index) => ({\r\n    name: stream.name,\r\n    value: stream.amount,\r\n    color: ['#8B5CF6', '#06D6A0', '#FFB800'][index % 3]\r\n  }));\r\n\r\n  return (\r\n    <Grid container spacing={3}>\r\n      <Grid item xs={12} lg={6}>\r\n        <Paper sx={{ p: 3, height: '100%' }}>\r\n          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\r\n            <Typography variant=\"h6\" component=\"h3\">\r\n              Revenue vs Expenses\r\n            </Typography>\r\n            <Stack direction=\"row\" spacing={2}>\r\n              <LegendItem color=\"#8B5CF6\" label=\"Revenue\" />\r\n              <LegendItem color=\"#EF4444\" label=\"Expenses\" />\r\n            </Stack>\r\n          </Box>\r\n          <ResponsiveContainer width=\"100%\" height={300}>\r\n            <BarChart data={revenueVsExpensesData}>\r\n              <CartesianGrid strokeDasharray=\"3 3\" />\r\n              <XAxis dataKey=\"year\" />\r\n              <YAxis tickFormatter={(value) => `$${(value / 1000).toFixed(0)}k`} />\r\n              <Tooltip content={<CustomTooltip />} />\r\n              <Bar dataKey=\"Revenue\" fill=\"#8B5CF6\" />\r\n              <Bar dataKey=\"Expenses\" fill=\"#EF4444\" />\r\n            </BarChart>\r\n          </ResponsiveContainer>\r\n        </Paper>\r\n      </Grid>\r\n\r\n      <Grid item xs={12} lg={6}>\r\n        <Paper sx={{ p: 3, height: '100%' }}>\r\n          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\r\n            <Typography variant=\"h6\" component=\"h3\">\r\n              Net Profit Comparison\r\n            </Typography>\r\n            <Stack direction=\"row\" spacing={2}>\r\n              <LegendItem color=\"#8B5CF6\" label=\"Probable\" />\r\n              <LegendItem color=\"#06D6A0\" label=\"Best\" />\r\n              <LegendItem color=\"#EF4444\" label=\"Worst\" />\r\n            </Stack>\r\n          </Box>\r\n          <ResponsiveContainer width=\"100%\" height={300}>\r\n            <LineChart data={netProfitComparisonData}>\r\n              <CartesianGrid strokeDasharray=\"3 3\" />\r\n              <XAxis dataKey=\"year\" />\r\n              <YAxis tickFormatter={(value) => `$${(value / 1000).toFixed(0)}k`} />\r\n              <Tooltip content={<CustomTooltip />} />\r\n              <Line type=\"monotone\" dataKey=\"Probable Case\" stroke=\"#8B5CF6\" strokeWidth={2} />\r\n              <Line type=\"monotone\" dataKey=\"Best Case\" stroke=\"#06D6A0\" strokeWidth={2} />\r\n              <Line type=\"monotone\" dataKey=\"Worst Case\" stroke=\"#EF4444\" strokeWidth={2} />\r\n            </LineChart>\r\n          </ResponsiveContainer>\r\n        </Paper>\r\n      </Grid>\r\n\r\n      <Grid item xs={12}>\r\n        <Paper sx={{ p: 3 }}>\r\n          <Typography variant=\"h6\" component=\"h3\" sx={{ mb: 2 }}>\r\n            Revenue Breakdown\r\n          </Typography>\r\n          <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\r\n            <ResponsiveContainer width=\"100%\" height={300}>\r\n              <PieChart>\r\n                <Pie\r\n                  data={pieData}\r\n                  cx=\"50%\"\r\n                  cy=\"50%\"\r\n                  innerRadius={60}\r\n                  outerRadius={120}\r\n                  paddingAngle={5}\r\n                  dataKey=\"value\"\r\n                >\r\n                  {pieData.map((entry, index) => (\r\n                    <Cell key={`cell-${index}`} fill={entry.color} />\r\n                  ))}\r\n                </Pie>\r\n                <Tooltip formatter={(value) => formatCurrency(value)} />\r\n              </PieChart>\r\n            </ResponsiveContainer>\r\n            <Box sx={{ ml: 4 }}>\r\n              {pieData.map((entry, index) => (\r\n                <Box key={index} sx={{ mb: 1 }}>\r\n                  <LegendItem color={entry.color} label={entry.name} />\r\n                </Box>\r\n              ))}\r\n            </Box>\r\n          </Box>\r\n        </Paper>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nFinancialCharts.propTypes = {\r\n  probableData: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      year: PropTypes.number.isRequired,\r\n      totalRevenue: PropTypes.number.isRequired,\r\n      totalExpenses: PropTypes.number.isRequired,\r\n      netProfit: PropTypes.number.isRequired\r\n    })\r\n  ).isRequired,\r\n  bestData: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      year: PropTypes.number.isRequired,\r\n      totalRevenue: PropTypes.number.isRequired,\r\n      totalExpenses: PropTypes.number.isRequired,\r\n      netProfit: PropTypes.number.isRequired\r\n    })\r\n  ).isRequired,\r\n  worstData: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      year: PropTypes.number.isRequired,\r\n      totalRevenue: PropTypes.number.isRequired,\r\n      totalExpenses: PropTypes.number.isRequired,\r\n      netProfit: PropTypes.number.isRequired\r\n    })\r\n  ).isRequired,\r\n  revenueStreams: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      amount: PropTypes.number.isRequired\r\n    })\r\n  ).isRequired\r\n};","import React, { useState, useMemo, useEffect } from \"react\";\r\nimport { Download, Calculator } from \"lucide-react\";\r\nimport {\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n  Typography,\r\n  Box,\r\n  Grid,\r\n  Container,\r\n  Stack,\r\n} from \"@mui/material\";\r\nimport { toast } from \"react-toastify\";\r\nimport { useAuthContext } from \"src/auth/hooks\";\r\nimport {\r\n  calculateScenarioResults,\r\n  divideRevenue,\r\n} from \"src/utils/financialCalculations\";\r\nimport { exportToExcel } from \"src/utils/exportToExcel\";\r\nimport { GetAllRevenueData, GetCOA } from \"src/api/transaction\";\r\nimport { RevenueInput } from \"./RevenuInput\";\r\nimport { ExpenseInput } from \"./ExpenseInput\";\r\nimport { ScenarioSettings } from \"./ScenarioSettings\";\r\nimport { FinancialTable } from \"./FinancialTable\";\r\nimport { FinancialCharts } from \"./FinancialCharts\";\r\n\r\nexport default function ModelPage() {\r\n  const { user } = useAuthContext();\r\n  const [exportData, setExportData] = useState(false);\r\n\r\n  const [revenueStreams, setRevenueStreams] = useState([\r\n    { id: \"1\", name: \"Product A\", amount: 50000, adjust: 0, avg: 0 },\r\n    { id: \"2\", name: \"Product B\", amount: 35000, adjust: 0, avg: 0 },\r\n    { id: \"3\", name: \"Service C\", amount: 25000, adjust: 0, avg: 0 },\r\n  ]);\r\n\r\n  const [expenses, setExpenses] = useState([\r\n    { id: \"1\", name: \"Salaries\", amount: 40000, adjust: 0, avg: 0 },\r\n    { id: \"2\", name: \"Rent\", amount: 12000, adjust: 0, avg: 0 },\r\n    { id: \"3\", name: \"Marketing\", amount: 8000, adjust: 0, avg: 0 },\r\n  ]);\r\n\r\n  const [scenarioSettings, setScenarioSettings] = useState({\r\n    probable: { revenueGrowth: 5, expenseGrowth: 3 },\r\n    best: { revenueGrowth: 10, expenseGrowth: 2 },\r\n    worst: { revenueGrowth: 2, expenseGrowth: 5 },\r\n    projectionPeriod: 5,\r\n  });\r\n\r\n  const scenarioResults = useMemo(\r\n    () => calculateScenarioResults(revenueStreams, expenses, scenarioSettings),\r\n    [revenueStreams, expenses, scenarioSettings]\r\n  );\r\n\r\n  const handleCalculate = () => {\r\n    toast.success(\"Scenarios calculated successfully!\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchForecast = async () => {\r\n      try {\r\n        let result = {};\r\n        const userId = user.role === 1 ? user._id : user.parent;\r\n        const response = await GetAllRevenueData(userId);\r\n        if (response.type === \"success\") {\r\n          toast.success(\"History successfully loaded!\", { theme: \"colored\" });\r\n        } else {\r\n          toast.error(\"Update Forecast Error\", { theme: \"colored\" });\r\n        }\r\n\r\n        const coa = await GetCOA(userId);\r\n        if (coa.type === \"success\") {\r\n          toast.success(\"COA Successfully Upload!\", { theme: \"colored\" });\r\n          if (response.data.data.length > 0 && coa.data.length > 0) {\r\n            result = divideRevenue(response.data.data, coa.data);\r\n            setRevenueStreams(result.revenueList);\r\n            setExpenses(result.expenseList);\r\n          }\r\n        } else {\r\n          toast.error(\"COA Upload Error\", { theme: \"colored\" });\r\n        }\r\n      } catch (err) {\r\n        console.log(\"fetchForecast Error:\", err);\r\n      }\r\n    };\r\n    fetchForecast();\r\n  }, [user._id, user.parent, user.role]);\r\n\r\n  useEffect(() => {\r\n    if (exportData) {\r\n      const modelData = [...scenarioResults.best, ...scenarioResults.probable, ...scenarioResults.worst];\r\n\r\n      if (modelData.length === 0) {\r\n        toast.warn(\"Export data is missing\", { theme: \"colored\" });\r\n      } else {\r\n        exportToExcel({\r\n          data: modelData,\r\n          month:[],\r\n          fileName:`model ${Date.toString()}`,\r\n          type: \"model\",\r\n        });\r\n        toast.success('Model data exported Successfully!', {theme:'colored'});\r\n      }\r\n      setExportData(false);\r\n    }\r\n  }, [exportData, scenarioResults]);\r\n\r\n  return (\r\n    <Box>\r\n      <Box\r\n        sx={{\r\n          px: 1,\r\n          py: 1,\r\n        }}\r\n      >\r\n        <Typography\r\n          variant=\"h3\"\r\n          component=\"h1\"\r\n          sx={{ fontWeight: \"bold\", mb: 1 }}\r\n        >\r\n          Financial Scenario Analysis\r\n        </Typography>\r\n        <Typography\r\n          variant=\"body1\"\r\n          sx={{\r\n            fontSize: \"1rem\",\r\n          }}\r\n        >\r\n          Analyze different financial scenarios by adjusting revenue and expense\r\n          inputs\r\n        </Typography>\r\n      </Box>\r\n      <Container maxWidth=\"xl\" sx={{ px: 3, py: 4 }}>\r\n        <Grid container spacing={4}>\r\n          <Grid item xs={12} lg={4}>\r\n            <Box\r\n              sx={{\r\n                display: \"flex\",\r\n                flexDirection: \"column\",\r\n              }}\r\n            >\r\n              <Card\r\n                sx={{\r\n                  flex: 1,\r\n                  display: \"flex\",\r\n                  flexDirection: \"column\",\r\n                }}\r\n              >\r\n                <CardHeader sx={{ flexShrink: 0 }}>\r\n                  <Typography variant=\"h6\" component=\"div\">\r\n                    Scenario Inputs\r\n                  </Typography>\r\n                </CardHeader>\r\n                <CardContent\r\n                  sx={{\r\n                    flex: 1,\r\n                    overflow: \"hidden\",\r\n                    display: \"flex\",\r\n                    flexDirection: \"column\",\r\n                  }}\r\n                >\r\n                  <Box\r\n                    sx={{\r\n                      height: \"100%\",\r\n                      overflowY: \"auto\",\r\n                      pr: 2,\r\n                      \"&::-webkit-scrollbar\": {\r\n                        width: \"6px\",\r\n                      },\r\n                      \"&::-webkit-scrollbar-track\": {\r\n                        backgroundColor: \"transparent\",\r\n                      },\r\n                      \"&::-webkit-scrollbar-thumb\": {\r\n                        backgroundColor: \"rgba(0,0,0,0.2)\",\r\n                        borderRadius: \"3px\",\r\n                      },\r\n                    }}\r\n                  >\r\n                    <Stack spacing={3}>\r\n                      <RevenueInput\r\n                        revenueStreams={revenueStreams}\r\n                        onUpdate={setRevenueStreams}\r\n                      />\r\n                      <ExpenseInput\r\n                        expenses={expenses}\r\n                        onUpdate={setExpenses}\r\n                      />\r\n                    </Stack>\r\n                  </Box>\r\n                </CardContent>\r\n              </Card>\r\n\r\n              <Card sx={{ mt: 3 }}>\r\n                <CardHeader>\r\n                  <Typography variant=\"h6\" component=\"div\">\r\n                    Scenario Settings\r\n                  </Typography>\r\n                </CardHeader>\r\n                <CardContent>\r\n                  <ScenarioSettings\r\n                    settings={scenarioSettings}\r\n                    onUpdate={setScenarioSettings}\r\n                  />\r\n                </CardContent>\r\n              </Card>\r\n\r\n              <Stack direction=\"row\" spacing={2} sx={{ mt: 3 }}>\r\n                <Button\r\n                  onClick={handleCalculate}\r\n                  variant=\"contained\"\r\n                  startIcon={<Calculator size={16} />}\r\n                  color=\"secondary\"\r\n                >\r\n                  Calculate Scenarios\r\n                </Button>\r\n                <Button\r\n                  onClick={() => setExportData(true)}\r\n                  variant=\"contained\"\r\n                  startIcon={<Download size={16} />}\r\n                  color=\"primary\"\r\n                >\r\n                  Export\r\n                </Button>\r\n              </Stack>\r\n            </Box>\r\n          </Grid>\r\n\r\n          <Grid item xs={12} lg={8}>\r\n            <Stack spacing={3}>\r\n              <FinancialTable\r\n                probableData={scenarioResults.probable}\r\n                bestData={scenarioResults.best}\r\n                worstData={scenarioResults.worst}\r\n              />\r\n\r\n              <FinancialCharts\r\n                probableData={scenarioResults.probable}\r\n                bestData={scenarioResults.best}\r\n                worstData={scenarioResults.worst}\r\n                revenueStreams={revenueStreams}\r\n              />\r\n            </Stack>\r\n          </Grid>\r\n        </Grid>\r\n      </Container>\r\n    </Box>\r\n  );\r\n}\r\n","import { Helmet } from 'react-helmet-async';\r\n// sections\r\nimport ModelPage from 'src/sections/model';\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function Page() {\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title> ModelPage </title>\r\n      </Helmet>\r\n      <ModelPage/>\r\n    </>\r\n  );\r\n}\r\n","\r\nimport * as XLSX from 'xlsx';\r\n// eslint-disable-next-line import/no-extraneous-dependencies\r\nimport { saveAs } from 'file-saver';\r\n\r\nexport const exportToExcel = ({ data, month = [], fileName, type }) => {\r\n    let headers = [];\r\n    let excelData = [];\r\n    const headerRender = ['AccountID', 'RevenueExpenseID', 'Description'];\r\n    \r\n    if(type === 'forecast') {\r\n        headers = [...headerRender, ...month.flatMap(m => [`${m} Actual`, `${m} Forecast`]), 'Adjustment', 'Forecast'];\r\n\r\n        excelData = data.map(item => [\r\n        item.AccountId,\r\n        item.RevenueExpenseId,\r\n        item.Description,\r\n        ...item.data.flatMap(d => [d.actual, d.forecast]),  // Monthly data\r\n        item.userInfo,  // Adjustment column\r\n        item.result     // Forecast column\r\n        ]);\r\n    }\r\n\r\n    if(type === 'balancesheet') {\r\n        headers = ['AccountID', ...month];\r\n        \r\n        excelData = data.map(item => [\r\n            item.AccountId, // First column: Account ID\r\n            ...item.data.map(d => d.amount) // Monthly \"amount\" values\r\n        ]);\r\n    }\r\n    \r\n    if(type === 'model') {\r\n        headers = ['YEAR', 'TOTAL REVENUE', 'TOTAL EXPENSE', 'NET PROFIT', 'PROFIT MARGIN'];\r\n\r\n        excelData = data.map(item => [\r\n            item.year,\r\n            item.totalRevenue,\r\n            item.totalExpenses,\r\n            item.netProfit,\r\n            item.profitMargin\r\n        ])\r\n    }\r\n\r\n    // Create worksheet and workbook\r\n    const ws = XLSX.utils.aoa_to_sheet([headers, ...excelData]);\r\n    const wb = XLSX.utils.book_new();\r\n    XLSX.utils.book_append_sheet(wb, ws, 'Sheet1');\r\n\r\n    // Save file\r\n    const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });\r\n    const dataBlob = new Blob([excelBuffer], { type: 'application/octet-stream' });\r\n    saveAs(dataBlob, `${fileName}.xlsx`);\r\n};"],"names":["GetRevenueByMonth","async","result","type","data","axios","post","endpoints","revenue","getRevenueByMonth","then","res","catch","err","error","console","GetRevenue","getRevenue","GetBalanceSheet","balanceSheet","getBalanceSheet","GetBalanceSheetByMonth","getBalanceSheetByMonth","GetCOA","coa","getCOA","userId","CreateRevenue","create","log","CreateBalanceSheet","CreateCOA","GetAllRevenueData","getAllRevenue","calculateScenarioResults","revenueStreams","expenses","settings","baseRevenue","reduce","sum","stream","amount","baseExpenses","expense","results","probable","best","worst","forEach","scenario","scenarioData","yearlyData","year","projectionPeriod","totalRevenue","revenueGrowth","totalExpenses","expenseGrowth","netProfit","profitMargin","push","formatCurrency","Intl","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits","format","divideRevenue","arguments","length","undefined","setTotalResult","newItem","flag","ritem","name","avg","eitem","rItem","cItem","accountId","id","code","adjust","revenueList","expenseList","RevenueInput","_ref","onUpdate","updateRevenueStream","field","value","updated","map","_objectSpread","_jsxs","Box","sx","display","flexDirection","gap","children","_jsx","Typography","variant","fontWeight","color","fontSize","alignItems","justifyContent","height","overflowY","pr","width","backgroundColor","borderRadius","Stack","spacing","itemEditable","startsWith","TextField","onChange","e","target","placeholder","size","cursor","InputProps","readOnly","parseInt","disabled","IconButton","onClick","filter","removeRevenueStream","X","Button","addRevenueStream","newStream","concat","Date","now","String","fromCharCode","startIcon","Plus","ExpenseInput","isEditable","updateExpense","removeExpense","addExpense","usedNames","availableNames","includes","newName","newExpense","ScenarioSettings","updateScenario","renderScenarioSection","title","scenarioKey","mb","Grid","container","item","xs","parseFloat","fullWidth","FormControl","Select","updatePeriod","period","MenuItem","FinancialTable","probableData","bestData","worstData","selectedScenario","setSelectedScenario","useState","currentData","getScenarioData","Paper","overflow","p","component","direction","label","activeColor","activeBgColor","_ref2","isActive","minWidth","textTransform","opacity","borderColor","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","toFixed","CustomTooltip","active","payload","elevation","border","entry","index","dataKey","LegendItem","FinancialCharts","_ref3","revenueVsExpensesData","Revenue","Expenses","netProfitComparisonData","prob","_bestData$index","_worstData$index","pieData","lg","ResponsiveContainer","BarChart","CartesianGrid","strokeDasharray","XAxis","YAxis","tickFormatter","Tooltip","content","Bar","fill","LineChart","Line","stroke","strokeWidth","PieChart","Pie","cx","cy","innerRadius","outerRadius","paddingAngle","Cell","formatter","ml","ModelPage","user","useAuthContext","exportData","setExportData","setRevenueStreams","setExpenses","scenarioSettings","setScenarioSettings","scenarioResults","useMemo","useEffect","role","_id","parent","response","toast","success","theme","fetchForecast","modelData","warn","exportToExcel","month","fileName","toString","px","py","Container","maxWidth","Card","flex","CardHeader","flexShrink","CardContent","mt","handleCalculate","Calculator","Download","Page","_Fragment","Helmet","headers","excelData","flatMap","m","AccountId","RevenueExpenseId","Description","d","actual","forecast","userInfo","ws","XLSX","aoa_to_sheet","wb","book_new","book_append_sheet","excelBuffer","bookType","dataBlob","Blob","saveAs"],"sourceRoot":""}