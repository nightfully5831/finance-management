{"version":3,"file":"static/js/486.635a4fed.chunk.js","mappings":"yKAEO,MAAMA,EAAiBC,MAAOC,EAAUC,KAC7C,MAAMC,EAAW,GACjBF,EAASG,KAAKC,KAAIC,IACd,MAAMC,EAAW,IAAID,GACrBC,EAAS,GAAKA,EAAS,GACvBA,EAAS,GAAKA,EAAS,GACvBA,EAAS,GAAK,EACd,IAAIC,GAAO,EASX,OARAN,EAAUG,KAAII,IACPA,EAAI,GAAGC,aAAeH,EAAS,KAChCA,EAAS,GAAKE,EAAI,GAClBD,GAAO,IAEF,MAEC,IAATA,GAAeL,EAASQ,KAAKJ,IACzB,CAAI,IAEfN,EAASG,KAAOD,EAChB,IACE,IAAIS,EAAS,GAIb,aAHMC,EAAAA,GAAMC,KAAKC,EAAAA,GAAUd,SAASe,OAAQf,GACnCgB,MAAKC,IAAQN,EAAS,SAAS,IAC/BO,OAAMC,IAAQR,EAAS,OAAO,IAChCA,CACT,CAAE,MAAOS,GAEP,MADAC,QAAQC,IAAI,wBAAyBF,GAC/BA,CACR,GAGWG,EAAiBxB,UAC5B,MAAMG,EAAW,GACXsB,EAAaC,KAAKC,MAAMD,KAAKE,UAAU3B,IAC7CA,EAASG,KAAKyB,SAAQC,IACpB3B,EAASQ,KAAK,CAACmB,EAAQC,UAAUD,EAAQE,iBAAiBF,EAAQG,YAAY,EAAEH,EAAQlB,QAAQ,IAElGa,EAAWrB,KAAOD,EAClB,IACE,IAAIS,EAAS,GAIb,aAHMC,EAAAA,GAAMC,KAAKC,EAAAA,GAAUd,SAASiC,OAAQT,GACnCR,MAAKC,IAAQN,EAAS,SAAS,IAC/BO,OAAMC,IAAQR,EAAS,OAAO,IAChCA,CACT,CAAE,MAAOS,GAIP,MAHAC,QAAQD,MACN,mCAAoCA,GAEhCA,CACR,GAGWc,EAAcnC,UACzB,IACE,IAAIY,EAAS,CAACwB,KAAK,GAAIhC,KAAK,CAAC,GAI7B,aAHMS,EAAAA,GAAMC,KAAKC,EAAAA,GAAUd,SAASoC,IAAKjC,GAChCa,MAAKC,IAAQN,EAAS,CAACwB,KAAK,UAAWhC,KAAKc,EAAId,KAAK,IACrDe,OAAMC,IAAQR,EAAS,CAACwB,KAAM,QAAShC,KAAKgB,EAAI,IAClDR,CACT,CAAE,MAAOS,GAIP,MAHAC,QAAQD,MACN,mCAAoCA,GAEhCA,CACR,E,yHChEK,MAAMiB,EAAoBtC,UAC/B,IACE,IAAIY,EAAS,CAACwB,KAAM,GAAIhC,KAAM,CAAC,GAI/B,aAHMS,EAAAA,GAAMC,KAAKC,EAAAA,GAAUwB,QAAQC,kBAAmBpC,GAC7Ca,MAAKC,IAAQN,EAAS,CAACwB,KAAM,UAAWhC,KAAMc,EAAId,KAAK,IACvDe,OAAMC,IAAQR,EAAS,CAACwB,KAAM,QAAShC,KAAMgB,EAAI,IACnDR,CACT,CAAE,MAAOS,GAIP,MAHAC,QAAQD,MACN,mCAAoCA,GAEhCA,CACR,GAGWoB,EAAazC,UACxB,IACE,IAAIY,EAAS,CAACwB,KAAM,GAAIhC,KAAM,CAAC,GAI/B,aAHMS,EAAAA,GAAMC,KAAKC,EAAAA,GAAUwB,QAAQG,WAAYtC,GACtCa,MAAKC,IAAQN,EAAS,CAACwB,KAAM,UAAWhC,KAAMc,EAAId,KAAKA,KAAKA,KAAK,IACjEe,OAAMC,IAAQR,EAAS,CAACwB,KAAM,QAAShC,KAAMgB,EAAI,IACnDR,CACT,CAAE,MAAOS,GAIP,OAHAC,QAAQD,MACN,0BAA0BA,GAErB,EACT,GAGWsB,EAAkB3C,UAC7B,IACE,IAAIY,EAAS,CAACwB,KAAM,GAAIhC,KAAM,CAAC,GAI/B,aAHMS,EAAAA,GAAMC,KAAKC,EAAAA,GAAU6B,aAAaC,gBAAiBzC,GAChDa,MAAKC,IAAQN,EAAS,CAACwB,KAAM,UAAWhC,KAAMc,EAAId,KAAKA,KAAKA,KAAK,IACjEe,OAAMC,IAAQR,EAAS,CAACwB,KAAM,QAAShC,KAAMgB,EAAI,IACnDR,CACT,CAAE,MAAOS,GAIP,OAHAC,QAAQD,MACN,0BAA0BA,GAErB,EACT,GAGWyB,EAAyB9C,UACpC,IACE,IAAIY,EAAS,CAACwB,KAAM,GAAIhC,KAAM,CAAC,GAI/B,aAHMS,EAAAA,GAAMC,KAAKC,EAAAA,GAAU6B,aAAaG,uBAAwB3C,GACvDa,MAAKC,IAAQN,EAAS,CAACwB,KAAM,UAAWhC,KAAMc,EAAId,KAAK,IACvDe,OAAMC,IAAQR,EAAS,CAACwB,KAAM,QAAShC,KAAMgB,EAAI,IACnDR,CACT,CAAE,MAAOS,GAIP,MAHAC,QAAQD,MACN,yCAA0CA,GAEtCA,CACR,GAGW2B,EAAShD,UACpB,IACE,IAAIY,EAAS,CAACwB,KAAM,GAAIhC,KAAM,CAAC,GAI/B,aAHMS,EAAAA,GAAMC,KAAKC,EAAAA,GAAUN,IAAIwC,OAAQ,CAACC,WAC/BjC,MAAKC,IAAQN,EAAS,CAACwB,KAAM,UAAWhC,KAAMc,EAAId,KAAKA,KAAKA,KAAK,IACjEe,OAAMC,IAAQR,EAAS,CAACwB,KAAM,QAAShC,KAAMgB,EAAI,IACnDR,CACT,CAAE,MAAOS,GAIP,OAHAC,QAAQD,MACN,0BAA0BA,GAErB,EACT,GAGW8B,EAAgBnD,UAC3B,IACE,IAAIY,EAAS,CAACwB,KAAM,GAAIhC,KAAM,CAAC,GAI/B,aAHMS,EAAAA,GAAMC,KAAKC,EAAAA,GAAUwB,QAAQvB,OAAQZ,GAClCa,MAAKC,IAAQN,EAAS,CAACwB,KAAM,UAAWhC,KAAMc,EAAId,KAAKA,KAAKA,KAAK,IACjEe,OAAMC,IAAQR,EAAS,CAACwB,KAAM,QAAShC,KAAMgB,EAAI,IACnDR,CACT,CAAE,MAAOS,GAEP,MADAC,QAAQC,IAAI,uBAAwBF,GAC9BA,CACR,GAGW+B,EAAqBpD,UAChC,IACE,IAAIY,EAAS,CAACwB,KAAM,GAAIhC,KAAM,CAAC,GAI/B,aAHMS,EAAAA,GAAMC,KAAKC,EAAAA,GAAU6B,aAAa5B,OAAQZ,GACvCa,MAAKC,IAAQN,EAAS,CAACwB,KAAM,UAAWhC,KAAMc,EAAId,KAAKA,KAAKA,KAAK,IACjEe,OAAMC,IAAQR,EAAS,CAACwB,KAAM,QAAShC,KAAMgB,EAAI,IACnDR,CACT,CAAE,MAAOS,GAEP,MADAC,QAAQC,IAAI,uBAAwBF,GAC9BA,CACR,GAGWgC,EAAYrD,UACvB,IACE,IAAIY,EAAS,CAACwB,KAAM,GAAIhC,KAAM,CAAC,GAI/B,aAHMS,EAAAA,GAAMC,KAAKC,EAAAA,GAAUN,IAAIO,OAAQZ,GAC9Ba,MAAKC,IAAQN,EAAS,CAACwB,KAAM,UAAWhC,KAAMc,EAAId,KAAKA,KAAKA,KAAK,IACjEe,OAAMC,IAAQR,EAAS,CAACwB,KAAM,QAAShC,KAAMgB,EAAI,IACnDR,CACT,CAAE,MAAOS,GAEP,OADAC,QAAQC,IAAI,mBAAoBF,GACzB,EACT,GAGWiC,EAAoBtD,UAC/B,IACE,IAAIY,EAAS,CAACwB,KAAK,GAAIhC,KAAK,CAAC,GAI7B,aAHMS,EAAAA,GAAMC,KAAKC,EAAAA,GAAUwB,QAAQgB,cAAe,CAACL,WAC1CjC,MAAKC,IAAQN,EAAS,CAACwB,KAAK,UAAWhC,KAAKc,EAAId,KAAK,IACrDe,OAAMC,IAAQR,EAAS,CAACwB,KAAM,QAAShC,KAAKgB,EAAI,IAClDR,CACT,CAAE,MAAOS,GAIP,MAHAC,QAAQD,MACN,mCAAoCA,GAEhCA,CACR,E,oUCnHF,MA0GA,EAzGImC,IAAA,IAAC,SACCC,EAAQ,KAAEC,EAAI,QAACC,EAAO,aAAEC,EAAY,cAAEC,EAAa,iBACnDC,EAAgB,eAAEC,EAAc,aAACC,GAClCR,EAAA,OAEGS,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CACAC,GAAI,CACJC,QAAS,OACTC,eAAgB,gBAChBC,WAAY,SACZC,GAAI,EACJC,GAAI,GACFC,SAAA,EAEFC,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CACNC,QAAQ,WACRC,KAAK,QACLpB,SAAUA,EACVqB,YAAY,sBACZC,WAAY,CACRC,cACAN,EAAAA,EAAAA,KAACO,EAAAA,EAAc,CAACC,SAAS,MAAKT,UAC1BC,EAAAA,EAAAA,KAACS,EAAAA,EAAU,CACXC,KAAK,MACLC,MAAM,UACNC,QAAStB,EAAaS,UAEtBC,EAAAA,EAAAA,KAACa,EAAAA,EAAU,SAKnBpB,GAAI,CAAEqB,MAAO,UAEjBd,EAAAA,EAAAA,KAACR,EAAAA,EAAG,CACAC,GAAI,CACAC,QAAS,OACTC,eAAgB,WAChBoB,GAAI,EACJC,GAAI,EACJC,OAAQ,YACRC,YAAa,UACbC,aAAc,EACdC,EAAG,IACLrB,UAEFC,EAAAA,EAAAA,KAACqB,EAAAA,EAAU,CACPC,MAAgB,OAATtC,EAAgB,WAAa,GACpCuC,MAAO,CAAC,QAAS,QACjBC,MAAOxC,EACPyC,SAAWC,GAAMzC,EAAQyC,QAGjCnC,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CACAC,GAAI,CACAC,QAAS,OACTC,eAAgB,WAChBC,WAAY,SACZmB,GAAI,EACJE,OAAQ,YACRC,YAAa,UACbC,aAAc,EACdC,EAAG,IACLrB,SAAA,EAEFC,EAAAA,EAAAA,KAACqB,EAAAA,EAAU,CACPC,MAA6B,OAAtBpC,EAAayC,KAAgB,OAAS,GAC7CJ,MAAO,CAAC,QAAS,QACjBC,MAAOtC,EAAayC,KACpBF,SAAWC,GAAMtC,EAAiBsC,GAAG,MAEzC1B,EAAAA,EAAAA,KAACR,EAAAA,EAAG,CAACC,GAAI,CAAEmC,GAAI,GAAI7B,SAAC,OACpBC,EAAAA,EAAAA,KAACqB,EAAAA,EAAU,CACPC,MAA2B,OAApBpC,EAAa2C,GAAc,KAAO,GACzCN,MAAO,CAAC,QAAS,QACjBC,MAAOtC,EAAa2C,GACpBJ,SAAWC,GAAMtC,EAAiBsC,GAAG,SAG7C1B,EAAAA,EAAAA,KAAC8B,EAAAA,EAAM,CACH5B,QAAQ,YAAYS,MAAM,UAAUlB,GAAI,CAACsB,GAAI,GAC7CH,QAASA,IAAMzB,GAAc,GAAMY,SACtC,YAGDC,EAAAA,EAAAA,KAAC8B,EAAAA,EAAM,CACH5B,QAAQ,YAAYS,MAAM,UAAUlB,GAAI,CAACsB,GAAI,GAC7CH,QAASvB,EAAeU,SAC3B,UAGC,E,iFC3Fd,MAgIA,EA/HIjB,IAAA,IAAC,OACGiD,EAAO,GAAE,MAAEC,EAAM,GAAE,cAAEC,EAAc,GAAE,OAAEC,EAAM,kBAC7CC,EAAiB,eAAEC,EAAc,eAAEC,EAAc,kBACjDC,EAAiB,WAAEC,EAAU,aAAEC,EAAY,QAAEC,GAChD3D,EAAA,OACGkB,EAAAA,EAAAA,KAAC0C,EAAAA,EAAc,CAAA3C,UACXR,EAAAA,EAAAA,MAACoD,EAAAA,EAAK,CAAA5C,SAAA,EACFR,EAAAA,EAAAA,MAACqD,EAAAA,EAAS,CAAA7C,SAAA,EACNR,EAAAA,EAAAA,MAACsD,EAAAA,EAAQ,CAAA9C,SAAA,CACJgC,EAAOpG,KAAI,CAACmH,EAAOC,KAChB/C,EAAAA,EAAAA,KAACgD,EAAAA,EAAS,CAACC,QAAS,EAAeC,MAAO,CAAEC,UAAW,UAAUpD,UACjEC,EAAAA,EAAAA,KAACoD,EAAAA,EAAc,CACXC,OAAQZ,IAAYK,EACpBQ,UAAWb,IAAYK,EAAQV,EAAiB,MAChDxB,QAASA,IAAMuB,EAAkBW,GAAO/C,SAEvC+C,KANuBC,KAU/Bf,EAAMrG,KAAI,CAACC,EAAM2H,KACdvD,EAAAA,EAAAA,KAACgD,EAAAA,EAAS,CAACQ,QAAS,EAAc/D,GAAI,CAAC0D,UAAW,UAAUpD,SAC3DnE,GAD2B2H,MAIhCvD,EAAAA,EAAAA,KAACgD,EAAAA,EAAS,CAACC,QAAS,EAAElD,SAAC,gBACvBC,EAAAA,EAAAA,KAACgD,EAAAA,EAAS,CAACC,QAAS,EAAElD,SAAC,iBAE3BC,EAAAA,EAAAA,KAAC6C,EAAAA,EAAQ,CAAA9C,SACJiC,EAAMrG,KAAI,CAAC8H,EAAGV,KACXxD,EAAAA,EAAAA,MAACmE,EAAAA,SAAc,CAAA3D,SAAA,EACfC,EAAAA,EAAAA,KAACgD,EAAAA,EAAS,CAACvD,GAAI,CAAC0D,UAAW,UAAUpD,SAAC,YACtCC,EAAAA,EAAAA,KAACgD,EAAAA,EAAS,CAACvD,GAAI,CAAC0D,UAAW,UAAUpD,SAAC,eAFjBgD,WAOjCxD,EAAAA,EAAAA,MAACoE,EAAAA,EAAS,CAAA5D,SAAA,CACLkC,EAActG,KAAI,CAACC,EAAMmH,KACtBxD,EAAAA,EAAAA,MAACsD,EAAAA,EAAQ,CAAapD,GAAI,CAAC0D,UAAW,UAAUpD,SAAA,EAC5CC,EAAAA,EAAAA,KAACgD,EAAAA,EAAS,CAACvD,GAAI,CAAC0D,UAAW,UAAUpD,SAAEnE,EAAKyB,aAC5C2C,EAAAA,EAAAA,KAACgD,EAAAA,EAAS,CAACvD,GAAI,CAAC0D,UAAW,UAAUpD,SAAEnE,EAAK0B,oBAC5C0C,EAAAA,EAAAA,KAACgD,EAAAA,EAAS,CAACvD,GAAI,CAAC0D,UAAW,UAAUpD,SAAEnE,EAAK2B,cAC3C3B,EAAKF,KAAKC,KAAK,CAACD,EAAM6H,KACnBhE,EAAAA,EAAAA,MAACmE,EAAAA,SAAc,CAAA3D,SAAA,EACXC,EAAAA,EAAAA,KAACgD,EAAAA,EAAS,CAACvD,GAAI,CAAC0D,UAAW,UAAUpD,SAAErE,EAAKkI,UAC5C5D,EAAAA,EAAAA,KAACgD,EAAAA,EAAS,CAACvD,GAAI,CAAC0D,UAAW,UAAUpD,SAAErE,EAAKH,aAF3BgI,MAKzBvD,EAAAA,EAAAA,KAACgD,EAAAA,EAAS,CAAAjD,UACNC,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CACNvC,KAAK,SACL8D,MAAQ5F,EAAKiI,SACb1D,KAAK,QAAQV,GAAI,CAACqE,SAAS,IAC3BrC,SAAWC,GAAMW,EAAeX,EAAEqC,OAAOvC,MAAO5F,EAAK0B,uBAG7D0C,EAAAA,EAAAA,KAACgD,EAAAA,EAAS,CAAAjD,SAAEnE,EAAKM,WAlBN6G,KAqBlBb,IACG3C,EAAAA,EAAAA,MAACsD,EAAAA,EAAQ,CAACpD,GAAI,CAAC0D,UAAW,UAAUpD,SAAA,EAChCC,EAAAA,EAAAA,KAACgD,EAAAA,EAAS,CAACvD,GAAI,CAAC0D,UAAW,UAAUpD,UACrCC,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CACNuB,MAAOU,EAAO7E,UACdoE,SAAWC,GAAMY,EAAkB,YAAaZ,EAAEqC,OAAOvC,OACzDrB,KAAK,aAGTH,EAAAA,EAAAA,KAACgD,EAAAA,EAAS,CAACvD,GAAI,CAAC0D,UAAW,UAAUpD,UACrCC,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CACNuB,MAAOU,EAAO5E,iBACdmE,SAAWC,GAAMY,EAAkB,mBAAoBZ,EAAEqC,OAAOvC,OAChErB,KAAK,aAGTH,EAAAA,EAAAA,KAACgD,EAAAA,EAAS,CAACvD,GAAI,CAAC0D,UAAW,UAAUpD,UACrCC,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CACNuB,MAAOU,EAAO3E,YACdkE,SAAWC,GAAMY,EAAkB,cAAeZ,EAAEqC,OAAOvC,OAC3DrB,KAAK,YAGR+B,EAAOxG,KAAKC,KAAI,CAACD,EAAMqH,KACxBxD,EAAAA,EAAAA,MAACmE,EAAAA,SAAc,CAAA3D,SAAA,EACXC,EAAAA,EAAAA,KAACgD,EAAAA,EAAS,CAACvD,GAAI,CAAC0D,UAAW,UAAUpD,SAAC,OAGtCC,EAAAA,EAAAA,KAACgD,EAAAA,EAAS,CAACvD,GAAI,CAAC0D,UAAW,UAAUpD,SAAC,QAJrBgD,MASrB/C,EAAAA,EAAAA,KAACgD,EAAAA,EAAS,CAACvD,GAAI,CAAC0D,UAAW,UAAUpD,UACrCC,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CACNvC,KAAK,SACL8D,MAAOU,EAAO2B,SACdpE,GAAI,CAACqE,SAAS,IACdrC,SAAWC,GAAMY,EAAkB,WAAYZ,EAAEqC,OAAOvC,OACxDrB,KAAK,aAGTZ,EAAAA,EAAAA,MAACyD,EAAAA,EAAS,CAACvD,GAAI,CAAC0D,UAAW,UAAUpD,SAAA,EACrCC,EAAAA,EAAAA,KAAC8B,EAAAA,EAAM,CAAClB,QAAS2B,EAAWxC,SAAC,UAC7BC,EAAAA,EAAAA,KAAC8B,EAAAA,EAAM,CAAClB,QAAS4B,EAAazC,SAAC,wBAMlC,ECmEzB,EAlLsBjB,IAA2F,IAA1F,cAAEkF,EAAa,MAAEhC,EAAK,KAAEhD,EAAI,QAAEC,EAAO,aAAEgF,EAAY,iBAAE7E,EAAgB,aAAEF,GAAaJ,EACzG,MAAOoF,EAAWC,IAAgBC,EAAAA,EAAAA,UAAS,KACpCC,EAAaC,IAAkBF,EAAAA,EAAAA,UAAS,IACzCrF,GAAWwF,EAAAA,EAAAA,QAAO,OACjB9B,EAAS+B,IAAcJ,EAAAA,EAAAA,UAAS,KAChChC,EAAgBqC,IAAqBL,EAAAA,EAAAA,UAAS,QAC9CM,EAAMC,IAAWP,EAAAA,EAAAA,UAAS,IAC1BQ,EAAaC,IAAkBT,EAAAA,EAAAA,UAAS,KACxClC,EAAQ4C,IAAaV,EAAAA,EAAAA,UAAS,OAC9BW,EAAY5F,IAAiBiF,EAAAA,EAAAA,WAAS,GAgFvCY,EAzBa,IAAId,GAAWe,MAAK,CAACC,EAAGC,KAAO,IAADC,EAAAC,EAC/C,IAAK5C,EAAS,OAAO,EAErB,MAKMc,EALS,CACb+B,UAAW,YACXC,iBAAkB,mBAClBhI,YAAa,eAEIkF,GAEnB,IAAKc,EAAK,OAAO,EACjB,MAAMiC,EAAe,QAATJ,EAAGF,EAAE3B,UAAI,IAAA6B,EAAAA,EAAI,GACnBK,EAAe,QAATJ,EAAGF,EAAE5B,UAAI,IAAA8B,EAAAA,EAAI,GAEzB,GAAsB,kBAAXG,GAAyC,kBAAXC,EACvC,MAA0B,QAAnBrD,EACHoD,EAAOE,cAAcD,GACrBA,EAAOC,cAAcF,GAG3B,MAAMG,EAAOC,WAAWJ,GAClBK,EAAOD,WAAWH,GACxB,OAAIK,OAAOC,MAAMJ,IAASG,OAAOC,MAAMF,GAAc,EAC3B,QAAnBzD,EAA2BuD,EAAOE,EAAOA,EAAOF,CAAI,IAE7BK,QAAQC,IAAG,IAAAC,EAAA,OAAkB,QAAlBA,EAAKD,EAAI5I,iBAAS,IAAA6I,OAAA,EAAbA,EAAgBC,SAAS9B,EAAY,IAE/EpC,EAAgB+C,EAAaoB,MACjC1B,EAAOE,EACPF,EAAOE,EAAcA,IAGvByB,EAAAA,EAAAA,YAAU,KACRlC,EAAaH,EAAc,GAC3B,CAACA,KAEHqC,EAAAA,EAAAA,YAAU,KACLtB,IACuB,IAArBb,EAAUoC,QAAiC,IAAjBtE,EAAMsE,QAAyB,OAATtH,EACjDuH,EAAAA,GAAMC,KAAK,yBAAyB,CAACC,MAAM,aAE3CC,EAAAA,EAAAA,GAAc,CAAEhL,KAAMwI,EAAWlC,QAAO2E,SAAS,YAADC,OAAc5H,GAAQtB,KAAK,aAE7EyB,GAAc,GAChB,GACA,CAAC4F,EAAYb,EAAWlF,EAAMgD,IAmBhC,OACEhC,EAAAA,EAAAA,KAACR,EAAAA,EAAG,CACFC,GAAI,CACFC,QAAS,OACTmH,cAAe,SACfrG,SAAU,WACVM,MAAO,OACPnB,eAAgB,MAChBC,WAAY,UACZG,UAEFR,EAAAA,EAAAA,MAACuH,EAAAA,EAAI,CAACrH,GAAI,CACRqB,MAAO,OACPM,EAAG,GACHrB,SAAA,EACAC,EAAAA,EAAAA,KAAC+G,EAAc,CACbhI,SAAUA,EAAUC,KAAMA,EAAMC,QAASA,EACzCK,aAtHaA,KACnBgF,EAAevF,EAASiI,QAAQxF,MAAM,EAqHJnC,eAlHbA,KACrByF,EAAU,CACRzH,UAAW,GACXC,iBAAkB,GAClBC,YAAa,GACb7B,KAAMsG,EAAMrG,KAAI,MAASiI,OAAQ,EAAGrI,SAAU,MAC9C0L,QAAQ,EACRpD,SAAU,EACV3H,OAAQ,GACR,EA0GIgD,aAAcA,EAAcE,iBAAkBA,EAC9CD,cAAeA,KAEjBa,EAAAA,EAAAA,KAACkH,EAAiB,CAChBnF,OA5IO,CAAC,YAAa,mBAAoB,eA4IzBC,MAAOA,EAAOC,cAAeA,EAAeC,OAAQA,EACpEC,kBA3ImBgF,IAEzB1C,EADchC,IAAY0E,GAA6B,QAAnB/E,EACV,OAAS,OACnCoC,EAAW2C,EAAO,EAwI0B/E,eAAgBA,EAAgBC,eAxCvDA,CAACb,EAAO4F,KAC7B,MAAM3L,EAAWyI,EAAUvI,KAAIC,IAC7B,IAAIyL,EAAY,EAChBA,GAAYC,EAAAA,EAAAA,UAAS9F,GACR,KAAVA,QAA0B+F,IAAV/F,IACjB6F,EAAY,GAEM,KAAjBzL,EAAKqL,cAAmCM,IAAjB3L,EAAKqL,UAAwBrL,EAAKqL,QAAU,GACtE,MAAMlK,GAAauK,EAAAA,EAAAA,UAAS1L,EAAKqL,QAAUI,GAC3C,OAAGzL,EAAK0B,mBAAqB8J,GAC3BI,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAY5L,GAAI,IAAEiI,SAAUrC,EAAQtF,OAAQa,IAEvCnB,CAAI,IAEbqI,EAAaxI,EAAS,EA2BhB6G,kBA5FkBA,CAACmF,EAAOjG,KAChCsD,GAAW4C,IAAIF,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAWE,GAAI,IAAE,CAACD,GAAQjG,KAAS,EA2FNe,WA7G3BA,KACjB,IAAIzG,GAAO,EAKX,GAJwB,KAArBoG,EAAOoD,WAAgD,KAA5BpD,EAAO5E,kBAAkD,KAAvB4E,EAAO3E,aAA0C,IAApB2E,EAAO2B,WAClG/H,GAAO,EACPyK,EAAAA,GAAMC,KAAK,gBAAgB,CAACC,MAAM,aAEhCvE,GAAUpG,EAAM,CAClB,MAAML,EAAW,IAAIyI,EAAWhC,GAChC+B,EAAaxI,GACbqJ,EAAU,KACZ,GAmGoEtC,aAhGjDA,KACnBsC,EAAU,KAAK,EA+FiFrC,QAASA,KAErGzC,EAAAA,EAAAA,KAAC2H,EAAAA,EAAe,CACdC,mBAAoB,CAAC,EAAG,GAAI,IAC5BC,UAAU,MACVC,MAAO9C,EAAasB,OACpB1B,YAAaA,EACbF,KAAMA,EACNqD,aA9IiBC,CAACC,EAAOC,KAC/BvD,EAAQuD,EAAQ,EA8IVC,oBA3IyBF,IAC/BpD,GAAeyC,EAAAA,EAAAA,UAASW,EAAMlE,OAAOvC,MAAO,KAC5CmD,EAAQ,EAAE,QA4IJ,E,aCrKV,MA2EA,EA3E2B7F,IAAA,IAAC,SAC1BC,EAAQ,aAAEG,EAAY,iBAAEE,EAAgB,aAACE,EAAY,cAACH,GACvDL,EAAA,OACCS,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CACFC,GAAI,CACJC,QAAS,OACTC,eAAgB,gBAChBC,WAAY,SACZC,GAAI,EACJC,GAAI,GACFC,SAAA,EAEFC,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CACRC,QAAQ,WACRC,KAAK,QACLpB,SAAUA,EACVqB,YAAY,sBACZC,WAAY,CACVC,cACAN,EAAAA,EAAAA,KAACO,EAAAA,EAAc,CAACC,SAAS,MAAKT,UAC5BC,EAAAA,EAAAA,KAACS,EAAAA,EAAU,CACTC,KAAK,MACLC,MAAM,UACNC,QAAStB,EAAaS,UAExBC,EAAAA,EAAAA,KAACa,EAAAA,EAAU,SAKfpB,GAAI,CAAEqB,MAAO,UAEfvB,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CACFC,GAAI,CACFC,QAAS,OACTC,eAAgB,WAChBC,WAAY,SACZmB,GAAI,EACJE,OAAQ,YACRC,YAAa,UACbC,aAAc,EACdC,EAAG,IACHrB,SAAA,EAEFC,EAAAA,EAAAA,KAACqB,EAAAA,EAAU,CACTC,MAA6B,OAAtBpC,EAAayC,KAAgB,OAAS,GAC7CJ,MAAO,CAAC,QAAS,QACjBC,MAAOtC,EAAayC,KACpBF,SAAWC,GAAMtC,EAAiBsC,GAAG,MAEvC1B,EAAAA,EAAAA,KAACR,EAAAA,EAAG,CAACC,GAAI,CAAEmC,GAAI,GAAI7B,SAAC,OACpBC,EAAAA,EAAAA,KAACqB,EAAAA,EAAU,CACTC,MAA2B,OAApBpC,EAAa2C,GAAc,KAAO,GACzCN,MAAO,CAAC,QAAS,QACjBC,MAAOtC,EAAa2C,GACpBJ,SAAWC,GAAMtC,EAAiBsC,GAAG,SAGvC1B,EAAAA,EAAAA,KAAC8B,EAAAA,EAAM,CACL5B,QAAQ,YAAYS,MAAM,UAAUlB,GAAI,CAACsB,GAAI,GAC7CH,QAASA,IAAMzB,GAAc,GAAMY,SACpC,aAGC,ECfR,EAhD8BjB,IAAA,IAAC,MAC7BkD,EAAM,GAAE,cAAEC,EAAc,GAAE,QAAEQ,EAAO,kBACnCN,EAAiB,eAAEC,GACpBtD,EAAA,OACCkB,EAAAA,EAAAA,KAAC0C,EAAAA,EAAc,CAAA3C,UACbR,EAAAA,EAAAA,MAACoD,EAAAA,EAAK,CAAA5C,SAAA,EACJC,EAAAA,EAAAA,KAAC4C,EAAAA,EAAS,CAAA7C,UACRR,EAAAA,EAAAA,MAACsD,EAAAA,EAAQ,CAAA9C,SAAA,EACPC,EAAAA,EAAAA,KAACgD,EAAAA,EAAS,CAACE,MAAO,CAAEC,UAAW,UAAUpD,UACvCC,EAAAA,EAAAA,KAACoD,EAAAA,EAAc,CACbC,OAAoB,cAAZZ,EACRa,UAAuB,cAAZb,EAA0BL,EAAiB,MACtDxB,QAASA,IAAMuB,EAAkB,aAAapC,SAC/C,gBAIFiC,EAAMsE,OAAS,GAAKtE,EAAMrG,KAAI,CAACC,EAAM2H,KACpCvD,EAAAA,EAAAA,KAACgD,EAAAA,EAAS,CAAYvD,GAAI,CAAC0D,UAAW,UAAUpD,SAC7CnE,GADa2H,MAIlBvD,EAAAA,EAAAA,KAACgD,EAAAA,EAAS,CAACvD,GAAI,CAAC0D,UAAW,UAAUpD,SAAC,2BAG1CC,EAAAA,EAAAA,KAAC2D,EAAAA,EAAS,CAAA5D,SACPkC,EAAcqE,OAAS,GAAKrE,EAActG,KAAI,CAACC,EAAMmH,KACpDxD,EAAAA,EAAAA,MAACsD,EAAAA,EAAQ,CAAapD,GAAI,CAAC0D,UAAW,UAAUpD,SAAA,EAC9CC,EAAAA,EAAAA,KAACgD,EAAAA,EAAS,CAACvD,GAAI,CAAC0D,UAAW,UAAUpD,SAAEnE,EAAKyB,YAC3CzB,EAAKF,KAAK4K,OAAS,GAAK1K,EAAKF,KAAKC,KAAK,CAACD,EAAM6H,KAC7CvD,EAAAA,EAAAA,KAACgD,EAAAA,EAAS,CAAWvD,GAAI,CAAC0D,UAAW,UAAUpD,SAAErE,EAAK0M,QAAtC7E,MAElBvD,EAAAA,EAAAA,KAACgD,EAAAA,EAAS,CAACvD,GAAI,CAAC0D,UAAW,UAAUpD,SAAEnE,EAAKyM,qBAL/BtF,WAUN,EC/BNuF,EAAaA,CAACC,EAAUC,KACjC,MAAMtE,EAAY,IAAIuE,IACtBF,EAASpL,SAAQuL,IACfA,EAAQhN,KAAKyB,SAAQ2B,IAAyD,IAAvDzB,EAAWC,EAAkBqL,EAAQpL,GAAYuB,EACtE,MAAM8J,EAAY,GAAAhC,OAAMvJ,GACnB6G,EAAU2E,IAAID,IACjB1E,EAAU4E,IAAIF,EAAc,CAC1BvL,YACA3B,KAAM,KAGVwI,EAAUvG,IAAIiL,GAAclN,KAAKO,KAAK,CACpC+C,KAAM0J,EAAQ1J,KACdoJ,OAAQO,GACR,GACF,IAEJ,MACMzM,EAtCsB6M,EAACrN,EAAM8M,KACnC,MAAM/M,EAAWuB,KAAKC,MAAMD,KAAKE,UAAUxB,IAC3C,IAAK,IAAIsN,EAAI,EAAGA,EAAIvN,EAAS6K,OAAQ0C,GAAG,EAAG,CACzC,MAAMC,EAAWxN,EAASuN,GAAGtN,KACvBwN,EAAiB,GAEvB,IAAI,IAAIC,EAAIX,EAAU7G,KAAMwH,GAAIX,EAAU3G,GAAIsH,GAAG,EAAE,CAC9CA,EAAE,MAAQ,KAAKA,EAAIA,EAAI,GAAK,KAC/B,MAAMC,EAAcH,EAASI,MAAKzN,GAAQA,EAAKoD,OAASmK,IACpDC,EACFF,EAAejN,KAAKmN,GAEpBF,EAAejN,KAAK,CAAEmM,OAAQ,EAAGpJ,KAAMmK,GAE3C,CACA1N,EAASuN,GAAGtN,KAAOwN,CACrB,CACA,OAAOzN,CAAQ,EAqBAsN,CADQO,MAAM3H,KAAKuC,EAAUqF,UACIf,GAChD,OAAOtM,CAAM,EC3BXsN,EAAa,CACjB,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAiKhH,EA9J4BC,KAC1B,MAAOvF,EAAWC,IAAgBC,EAAAA,EAAAA,UAAS,KACpCC,EAAaC,IAAkBF,EAAAA,EAAAA,UAAS,IACzCrF,GAAWwF,EAAAA,EAAAA,QAAO,OACjB9B,EAAS+B,IAAcJ,EAAAA,EAAAA,UAAS,KAChChC,EAAgBqC,IAAqBL,EAAAA,EAAAA,UAAS,QAC9CM,EAAMC,IAAWP,EAAAA,EAAAA,UAAS,IAC1BQ,EAAaC,IAAkBT,EAAAA,EAAAA,UAAS,KACxClF,EAAcwK,IAAmBtF,EAAAA,EAAAA,UAAS,CAACzC,KAAK,KAAME,GAAG,QACzDkD,EAAY5F,IAAiBiF,EAAAA,EAAAA,WAAS,IACtCuF,EAAQC,IAAaxF,EAAAA,EAAAA,UAAS,KAC/B,KAACyF,IAAQC,EAAAA,EAAAA,KA0DT9E,EA1Ba,IAAId,GAAWe,MAAK,CAACC,EAAGC,KAAO,IAADC,EAAAC,EAC/C,IAAK5C,EAAS,OAAO,EAErB,MAKMc,EALS,CACb+B,UAAW,YACXC,iBAAkB,mBAClBhI,YAAa,eAEIkF,GAEnB,IAAKc,EAAK,OAAO,EACjB,MAAMiC,EAAe,QAATJ,EAAGF,EAAE3B,UAAI,IAAA6B,EAAAA,EAAI,GACnBK,EAAe,QAATJ,EAAGF,EAAE5B,UAAI,IAAA8B,EAAAA,EAAI,GAEzB,GAAsB,kBAAXG,GAAyC,kBAAXC,EACvC,MAA0B,QAAnBrD,EACHoD,EAAOE,cAAcD,GACrBA,EAAOC,cAAcF,GAG3B,MAAMG,EAAOC,WAAWJ,GAClBK,EAAOD,WAAWH,GACxB,OAAIK,OAAOC,MAAMJ,IAASG,OAAOC,MAAMF,GAAc,EAC3B,QAAnBzD,EAA2BuD,EAAOE,EAAOA,EAAOF,CAAI,IAG7BK,QAAQC,IAAG,IAAAC,EAAA,OAAkB,QAAlBA,EAAKD,EAAI5I,iBAAS,IAAA6I,OAAA,EAAbA,EAAgBC,SAAS9B,EAAY,IAE/EpC,EAAgB+C,EAAaoB,MACjC1B,EAAOE,EACPF,EAAOE,EAAcA,GAyDvB,OA3CAyB,EAAAA,EAAAA,YAAU,KACkB/K,WACxB,IACE,GAA0B,OAAtB4D,EAAayC,MAAqC,OAApBzC,EAAa2C,GAAa,CAC1D,MAAMkI,EAA4C,IAAhCC,IAAM9K,EAAayC,MAAMsI,OAAaD,IAAM9K,EAAayC,MAAMK,QAE3EwG,EAAY,CAAC7G,KAAKoI,EAAWlI,GADW,IAA9BmI,IAAM9K,EAAa2C,IAAIoI,OAAaD,IAAM9K,EAAa2C,IAAIG,SAErEtG,EAAqB,IAAdmO,EAAKK,KAAa,CAC7B1L,OAAQqL,EAAKM,IACbnL,KAAMwJ,GACJ,CACFhK,OAAQqL,EAAKO,OACbpL,KAAMwJ,GAEF6B,QAAiBjM,EAAAA,EAAAA,IAAuB1C,GACzB,YAAlB2O,EAAS3M,KACV6I,EAAAA,GAAM+D,QAAQ,qCAAsC,CAAC7D,MAAM,YAE3DF,EAAAA,GAAM5J,MAAM,6BAA6B,CAAC8J,MAAO,YAEnD,MAAM1J,EDjFUwN,EAAC7O,EAAM8M,KAC7B,MAAM/M,EAAW,GAOjB,OANAC,EAAKyB,SAAQC,IACX,MAAMvB,EAAW,CAACmD,KAAK,GAAItD,KAAK,IAChCG,EAASmD,KAAO5B,EAAQoN,SACxB3O,EAASH,KAAO,IAAI0B,EAAQ1B,MAC5BD,EAASQ,KAAKJ,EAAS,IAElByM,EAAW7M,EAAU+M,EAAU,ECyEb+B,CAAWF,EAAS3O,KAAKA,KAAM8M,GAC5CiC,EDvEKC,EAACC,EAAOC,EAAQpC,KACnC,MAAMU,EAAiB,GACvB,IAAI,IAAIC,EAAIX,EAAU7G,KAAMwH,GAAIX,EAAU3G,GAAIsH,GAAG,EAC5CA,EAAE,MAAQ,KAAKA,EAAIA,EAAI,GAAK,KAC/BD,EAAejN,KAAK,CAAEmM,OAAQ,EAAGpJ,KAAMmK,IAGzC,MAAM1N,EAAWuB,KAAKC,MAAMD,KAAKE,UAAUyN,IAC3C,IAAK,IAAI3B,EAAI,EAAGA,EAAIvN,EAAS6K,OAAQ0C,GAAG,EAAG,CACzC,IAAIC,EAAW,GACf2B,EAAOzN,SAAQC,IACV3B,EAASuN,GAAG3L,YAAcD,EAAQC,YACnC4L,EAAW7L,EAAQ1B,KACrB,IAEFD,EAASuN,GAAGtN,KAAOuN,EACI,IAApBA,EAAS3C,SAAc7K,EAASuN,GAAGtN,KAAOwN,EAC/C,CACA,OAAOzN,CAAQ,ECqDaiP,CAAML,EAAS3O,KAAKiP,MAAO5N,EAAYyL,GAC3DrE,EAAasG,GAjCF/B,KACjB,MAAMmC,EAAc,GACpBnC,EAAQvL,SAAQ,CAACzB,EAAMqH,KACrB,MAAMkH,EAAO3C,SAAS5L,EAAKsD,KAAK,IAAK,IAC/BgD,EAAQtG,EAAKsD,KAAY,IAALiL,EACpBa,EAAU,GAAAlE,OAAM4C,EAAWxH,GAAM,KAAA4E,OAAIqD,GAC3CY,EAAY5O,KAAK6O,EAAW,IAE9BlB,EAAUiB,EAAY,EA0BhBE,CAAUhO,EAAW,GAAGrB,KAC1B,CACF,CAAE,MAAOgB,GACPE,QAAQC,IAAI,2BAA2BH,EACzC,GAEFsO,EAAmB,GAClB,CAAC9L,EAAc2K,EAAKM,IAAKN,EAAKO,OAAQP,EAAKK,QAE9C7D,EAAAA,EAAAA,YAAU,KACLtB,IACuB,IAArBb,EAAUoC,QAAkC,IAAlBqD,EAAOrD,OAClCC,EAAAA,GAAMC,KAAK,yBAAyB,CAACC,MAAM,aAE3CC,EAAAA,EAAAA,GAAc,CAAEhL,KAAMwI,EAAWlC,MAAO2H,EAAQhD,SAAS,gBAADC,OAAkB1H,EAAayC,KAAI,OAAAiF,OAAM1H,EAAa2C,IAAMnE,KAAK,iBAE3HyB,GAAc,GAChB,GACA,CAAC4F,EAAYb,EAAWhF,EAAcyK,KAGtC3J,EAAAA,EAAAA,KAACR,EAAAA,EAAG,CAAAO,UACFR,EAAAA,EAAAA,MAACuH,EAAAA,EAAI,CACHrH,GAAI,CAAEqB,MAAO,OAAQM,EAAG,GAAIrB,SAAA,EAE5BC,EAAAA,EAAAA,KAACiL,EAAkB,CACjB3L,aA3HaA,KACnBgF,EAAevF,EAASiI,QAAQxF,MAAM,EA0HJzC,SAAUA,EACtCI,cAAeA,EACfD,aAAcA,EAAcE,iBAzHXA,CAACJ,EAAMtB,KAC9B,IAAKsB,EAAM,OACX,IAAIkM,EAEFA,EADCxN,GACS8J,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAOtI,GAAY,IAAEyC,KAAM3C,KAE3BwI,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAOtI,GAAY,IAAE2C,GAAI7C,IAErC0K,EAAgBwB,EAAW,KAmHvBlL,EAAAA,EAAAA,KAACmL,EAAqB,CACpBlJ,cAAeA,EAAeQ,QAASA,EAAST,MAAO2H,EACvDxH,kBAlHmBgF,IAEzB1C,EADchC,IAAY0E,GAA6B,QAAnB/E,EACV,OAAS,OACnCoC,EAAW2C,EAAO,EA+G0B/E,eAAgBA,KAExDpC,EAAAA,EAAAA,KAAC2H,EAAAA,EAAe,CACdC,mBAAoB,CAAC,EAAG,GAAI,IAC5BC,UAAU,MACVC,MAAO9C,EAAasB,OACpB1B,YAAaA,EACbF,KAAMA,EACNqD,aApHiBC,CAACC,EAAOC,KAC/BvD,EAAQuD,EAAQ,EAoHVC,oBAjHyBF,IAC/BpD,EAAeyC,SAASW,EAAMlE,OAAOvC,MAAO,KAC5CmD,EAAQ,EAAE,QAkHJ,E,qCClKV,MAAMyG,GAAYC,EAAAA,EAAAA,IAAOC,EAAAA,EAAPD,EAAevM,IAAA,IAAC,MAAE2H,GAAO3H,EAAA,MAAM,CAC7CgC,MAAO,GACPyK,OAAQ,GACRpK,aAAc,GACdqK,QAAS,EACT9L,QAAS,OACT,WAAY,CACV,qBAAsB,CACpBoB,MAAO,IAET,sCAAuC,CACrC2K,UAAW,qBAGf,0BAA2B,CACzBD,QAAS,EACT,gBAAiB,CACfC,UAAW,mBACX9K,MAAO,OACP,wBAAsB6G,EAAAA,EAAAA,GAAA,CACpBkE,QAAS,GACNjF,EAAMkF,YAAY,WAI3B,qBAAsB,CACpBC,UAAW,iCACX9K,MAAO,GACPyK,OAAQ,GACRpK,aAAc,GACd0K,WAAYpF,EAAMqF,YAAYxP,OAAO,CAAC,SAAU,CAC9CyP,SAAU,OAGd,sBAAoBvE,EAAAA,EAAAA,GAAA,CAClBrG,aAAc,EACduK,QAAS,EACTM,gBAAiB,kBACjBC,UAAW,cACRxF,EAAMkF,YAAY,OAAQ,CAC3BK,gBAAiB,2BAGxB,IAmBD,EAjBqBE,IAA4B,IAA3B,SAACC,EAAQ,UAAEC,GAAUF,EAIzC,OACI3M,EAAAA,EAAAA,MAAC8M,EAAAA,EAAK,CAAC/I,UAAU,MAAMgJ,QAAS,EAAG7M,GAAI,CAAEG,WAAY,UAAWG,SAAA,EAC9DC,EAAAA,EAAAA,KAACuM,EAAAA,EAAU,CAAAxM,SAAC,QACZC,EAAAA,EAAAA,KAACoL,EAAS,CAACoB,gBAAc,EAAChL,MAAO4K,EAAWxL,QAN7B6L,KACjBN,GAAUC,EAAU,KAMlBpM,EAAAA,EAAAA,KAACuM,EAAAA,EAAU,CAAAxM,SAAC,SACN,ECtCDuI,EAAaA,CAACC,EAAUC,KACjC,MAAMtE,EAAY,IAAIuE,IACtBF,EAASpL,SAAQuL,IACfA,EAAQhN,KAAKyB,SAAQ2B,IAA8E,IAA5EzB,EAAWC,EAAkBC,EAAamP,EAAcC,GAAc7N,EAC3F,MAAM8J,EAAY,GAAAhC,OAAMvJ,EAAS,KAAAuJ,OAAItJ,GAChC4G,EAAU2E,IAAID,IACjB1E,EAAU4E,IAAIF,EAAc,CAC1BvL,YACAC,mBACAC,cACA7B,KAAM,KAGVwI,EAAUvG,IAAIiL,GAAclN,KAAKO,KAAK,CACpC+C,KAAM0J,EAAQ1J,KACd4E,OAAQ8I,EACRnR,SAAUoR,GACV,GACF,IAEJ,MACMzQ,EA7CsB6M,EAACrN,EAAM8M,KACnC,MAAM/M,EAAWuB,KAAKC,MAAMD,KAAKE,UAAUxB,IAC3C,IAAK,IAAIsN,EAAI,EAAGA,EAAIvN,EAAS6K,OAAQ0C,GAAG,EAAG,CACzC,MAAMC,EAAWxN,EAASuN,GAAGtN,KACvBwN,EAAiB,GACvB,IAAI0D,EAAM,EACV,IAAI,IAAIzD,EAAIX,EAAU7G,KAAMwH,GAAIX,EAAU3G,GAAIsH,GAAG,EAAE,CAC9CA,EAAE,MAAQ,KAAKA,EAAIA,EAAI,GAAK,KAC/B,MAAMC,EAAcH,EAASI,MAAKzN,GAAQA,EAAKoD,OAASmK,IACpDC,GACFF,EAAejN,KAAKmN,GACpBwD,GAAOxD,EAAYxF,QAEnBsF,EAAejN,KAAK,CAAE2H,OAAQ,EAAG5E,KAAMmK,EAAG5N,SAAU,GAExD,CACAE,EAASuN,GAAGtN,KAAOwN,EACnBzN,EAASuN,GAAG/B,QAAUrB,YAAYgH,EAAI1D,EAAe5C,QAAQuG,YAAY,IACzEpR,EAASuN,GAAGnF,SAAW,EACvBpI,EAASuN,GAAG9M,OAAS0J,YAAYgH,EAAI1D,EAAe5C,QAAQuG,YAAY,GAC1E,CACA,OAAOpR,CAAQ,EAwBAsN,CADQO,MAAM3H,KAAKuC,EAAUqF,UACIf,GAChD,OAAOtM,CAAM,EAGJqO,EAAaA,CAAC7O,EAAM8M,KAC7B,MAAM/M,EAAW,GAOjB,OANAC,EAAKyB,SAAQC,IACX,MAAMvB,EAAW,CAACmD,KAAK,GAAItD,KAAK,IAChCG,EAASmD,KAAO5B,EAAQoN,SACxB3O,EAASH,KAAO,IAAI0B,EAAQ1B,MAC5BD,EAASQ,KAAKJ,EAAS,IAElByM,EAAW7M,EAAU+M,EAAU,ECpCpCgB,EAAa,CACjB,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAGjG,SAASsD,IACtB,MAAMC,GAAWC,EAAAA,EAAAA,OACV9N,EAAcwK,IAAmBtF,EAAAA,EAAAA,UAAS,CAACzC,KAAK,KAAME,GAAG,QACzD3F,EAAQ+Q,IAAa7I,EAAAA,EAAAA,UAAS,KAC9BrC,EAAQmL,IAAa9I,EAAAA,EAAAA,UAAS,KAC9B+I,EAAaC,IAAkBhJ,EAAAA,EAAAA,WAAS,IACzC,KAACyF,IAAQC,EAAAA,EAAAA,MACRuD,EAAaC,IAAkBlJ,EAAAA,EAAAA,UAAS,OACxCgI,EAAWmB,IAAgBnJ,EAAAA,EAAAA,WAAS,GAuF3C,OAhCAiC,EAAAA,EAAAA,YAAU,KACc/K,WACpB,IACE,GAA0B,OAAtB4D,EAAayC,MAAqC,OAApBzC,EAAa2C,GAAa,CAC1D,MAAMkI,EAA4C,IAAhCC,IAAM9K,EAAayC,MAAMsI,OAAaD,IAAM9K,EAAayC,MAAMK,QAE3EwG,EAAY,CAAC7G,KAAKoI,EAAWlI,GADW,IAA9BmI,IAAM9K,EAAa2C,IAAIoI,OAAaD,IAAM9K,EAAa2C,IAAIG,SAErEtG,EAAqB,IAAdmO,EAAKK,KAAa,CAC7B1L,OAAQqL,EAAKM,IACbnL,KAAMwJ,GACJ,CACFhK,OAAQqL,EAAKO,OACbpL,KAAMwJ,GAGF6B,QAAiB5M,EAAAA,EAAAA,IAAY/B,GACd,YAAlB2O,EAAS3M,KACV6I,EAAAA,GAAM+D,QAAQ,+BAAgC,CAAC7D,MAAM,YAErDF,EAAAA,GAAM5J,MAAM,wBAAwB,CAAC8J,MAAO,YAE9C,MAAM1J,EAAawN,EAAWF,EAAS3O,KAAM8M,GAC7CyE,EAAUlQ,GA3EC2L,KACjB,MAAMmC,EAAc,GACpBnC,EAAQvL,SAAQ,CAACzB,EAAMqH,KACrB,MAAMkH,GAAO3C,EAAAA,EAAAA,UAAS5L,EAAKsD,KAAK,KAC1BgD,EAAQtG,EAAKsD,KAAY,IAALiL,EACpBa,EAAU,GAAAlE,OAAM4C,EAAWxH,GAAM,KAAA4E,OAAIqD,GAC3CY,EAAY5O,KAAK6O,EAAW,IAE9BoC,EAAUrC,EAAY,EAoEhBE,CAAUhO,EAAW,GAAGrB,KAC1B,CACF,CAAE,MAAOgB,GACPE,QAAQC,IAAI,uBAAuBH,EACrC,GAEF8Q,EAAe,GACd,CAACtO,EAAc2K,EAAKM,IAAKN,EAAKO,OAAQP,EAAKK,QAG5C3K,EAAAA,EAAAA,MAACkO,EAAAA,EAAS,CAAC3J,UAAUiJ,EAASW,cAAuB,KAAK3N,SAAA,EACxDR,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACC,GAAI,CAAEC,QAAS,OAAQC,eAAgB,gBAAiBC,WAAY,SAAU+N,GAAI,GAAI5N,SAAA,EACzFC,EAAAA,EAAAA,KAACuM,EAAAA,EAAU,CAACrM,QAAQ,KAAIH,UACP,IAAdqM,EAAqB,2BAA6B,2BAErDpM,EAAAA,EAAAA,KAAC4N,EAAY,CAACxB,UAAWA,EAAWD,SAAWzQ,GAAS6R,EAAa7R,SAEvEsE,EAAAA,EAAAA,KAACR,EAAAA,EAAG,CAAAO,UACa,IAAdqM,GACCpM,EAAAA,EAAAA,KAAC6N,EAAa,CACZ7J,cAAe9H,EAAQ8F,MAAOD,EAC9B/C,KAAMqO,EAAanO,aAAcA,EACjCE,iBAvFeA,CAACJ,EAAMtB,KAC9B,IAAKsB,EAAM,OACX,IAAIkM,EAEFA,EADCxN,GACS8J,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAOtI,GAAY,IAAEyC,KAAM3C,KAE3BwI,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAOtI,GAAY,IAAE2C,GAAI7C,IAErC0K,EAAgBwB,EAAW,EAgFnBjM,QAAYD,GAASsO,EAAetO,GACpCiF,aAAiBvI,GAASuR,EAAUvR,MAGtCsE,EAAAA,EAAAA,KAAC8N,EAAoB,OAGzB9N,EAAAA,EAAAA,KAACR,EAAAA,EAAG,CAAAO,UACFC,EAAAA,EAAAA,KAAC+N,EAAAA,EAAa,CACZlG,UAAU,QACVlH,MAAM,UACNT,QAAQ,YACRU,QAzFStF,UACf8R,GAAe,GACf,MAAMY,EAAWhE,IAAMqD,GAAaY,OAAO,aACrCC,EAAqC,IAA1BlE,IAAMqD,GAAapD,OAAaD,IAAMqD,GAAarL,QAE9DtG,EAAqB,IAAdmO,EAAKK,KAAa,CAC7B1L,OAAQqL,EAAKM,IACbnL,KAAMgP,EACNxD,SAAU0D,EACVxS,KAAMQ,GACJ,CACFsC,OAAQqL,EAAKO,OACbpL,KAAMgP,EACNxD,SAAU0D,EACVxS,KAAMQ,GAGR,GAAIR,EAAKA,MAA6B,IAArBA,EAAKA,KAAK4K,OAGpB,CAEW,kBADOxJ,EAAAA,EAAAA,IAAepB,GAEpC6K,EAAAA,GAAM+D,QAAQ,kCAAmC,CAAC7D,MAAM,YAExDF,EAAAA,GAAM5J,MAAM,wBAAwB,CAAC8J,MAAO,YAE9C2G,GAAe,EACjB,MAVE7G,EAAAA,GAAM5J,MAAM,gCAAgC,CAAC8J,MAAO,YACpD2G,GAAe,EASjB,EA8DMe,QAAShB,EACT1N,GAAM,CAACI,GAAG,EAAGC,GAAG,GAChBsO,WAAWpO,EAAAA,EAAAA,KAACqO,EAAAA,EAAe,IAAItO,SAChC,eAMT,CCxJe,SAASuO,IACtB,OACE/O,EAAAA,EAAAA,MAAAgP,EAAAA,SAAA,CAAAxO,SAAA,EACEC,EAAAA,EAAAA,KAACwO,EAAAA,GAAM,CAAAzO,UACLC,EAAAA,EAAAA,KAAA,SAAAD,SAAO,2BAGTC,EAAAA,EAAAA,KAAC8M,EAAY,MAGnB,C,6DCTO,MAAMpG,EAAgB5H,IAA2C,IAA1C,KAAEpD,EAAI,MAAEsG,EAAQ,GAAE,SAAE2E,EAAQ,KAAEjJ,GAAMoB,EAC1D2P,EAAU,GACVC,EAAY,GAGJ,aAAThR,IACC+Q,EAAU,IAHO,CAAC,YAAa,mBAAoB,kBAGpBzM,EAAM2M,SAAQC,GAAK,CAAC,GAADhI,OAAIgI,EAAC,cAAAhI,OAAcgI,EAAC,gBAAe,aAAc,YAEnGF,EAAYhT,EAAKC,KAAIC,GAAQ,CAC7BA,EAAKyB,UACLzB,EAAK0B,iBACL1B,EAAK2B,eACF3B,EAAKF,KAAKiT,SAAQE,GAAK,CAACA,EAAEjL,OAAQiL,EAAEtT,YACvCK,EAAKiI,SACLjI,EAAKM,WAIG,iBAATwB,IACC+Q,EAAU,CAAC,eAAgBzM,GAE3B0M,EAAYhT,EAAKC,KAAIC,GAAQ,CACzBA,EAAKyB,aACFzB,EAAKF,KAAKC,KAAIkT,GAAKA,EAAEzG,aAIpB,UAAT1K,IACC+Q,EAAU,CAAC,OAAQ,gBAAiB,gBAAiB,aAAc,iBAEnEC,EAAYhT,EAAKC,KAAIC,GAAQ,CACzBA,EAAKqO,KACLrO,EAAKkT,aACLlT,EAAKmT,cACLnT,EAAKoT,UACLpT,EAAKqT,iBAKb,MAAMC,EAAKC,EAAAA,GAAWC,aAAa,CAACX,KAAYC,IAC1CW,EAAKF,EAAAA,GAAWG,WACtBH,EAAAA,GAAWI,kBAAkBF,EAAIH,EAAI,UAGrC,MAAMM,EAAcL,EAAAA,GAAWE,EAAI,CAAEI,SAAU,OAAQ/R,KAAM,UACvDgS,EAAW,IAAIC,KAAK,CAACH,GAAc,CAAE9R,KAAM,8BACjDkS,EAAAA,EAAAA,QAAOF,EAAS,GAAD9I,OAAKD,EAAQ,SAAQ,C","sources":["api/forecast.js","api/transaction.js","components/forecastTable/header.js","components/forecastTable/container.js","components/forecastTable/index.js","components/balancesheet/header.js","components/balancesheet/container.js","components/balancesheet/func.js","components/balancesheet/index.js","sections/Bugeting_Forecasting/forecast/switch.js","sections/Bugeting_Forecasting/forecast/func.js","sections/Bugeting_Forecasting/forecast/view.js","pages/budgeting_forecasting/dataForecast.js","utils/exportToExcel.js"],"sourcesContent":["import axios, { endpoints } from 'src/utils/axios';\r\n\r\nexport const CreateForecast = async (forecast, coaResult) => {\r\n  const tempData = []\r\n  forecast.data.map(item => {\r\n      const tempItem = [...item]\r\n      tempItem[1] = tempItem[3]\r\n      tempItem[3] = tempItem[2]\r\n      tempItem[4] = 0\r\n      let flag = false;\r\n      coaResult.map(coa => {\r\n          if(coa[0].toString() === tempItem[0]) {\r\n            tempItem[2] = coa[2]; \r\n            flag = true;\r\n          }\r\n          return true;\r\n      })\r\n      if(flag === true) tempData.push(tempItem)\r\n      return true;\r\n  })\r\n  forecast.data = tempData;\r\n  try {\r\n    let result = ''\r\n    await axios.post(endpoints.forecast.create, forecast)\r\n            .then(res => {result = 'success'})\r\n            .catch(err => {result = 'error'})\r\n    return result;\r\n  } catch (error) {\r\n    console.log(\"Error Create Forecast\", error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport const UpdateForecast = async (forecast) => {\r\n  const tempData = []\r\n  const tempResult = JSON.parse(JSON.stringify(forecast))\r\n  forecast.data.forEach(element => {\r\n    tempData.push([element.AccountId,element.RevenueExpenseId,element.Description,0,element.result])\r\n  });\r\n  tempResult.data = tempData;\r\n  try {\r\n    let result = ''\r\n    await axios.post(endpoints.forecast.update, tempResult)\r\n            .then(res => {result = 'success'})\r\n            .catch(err => {result = 'error'})\r\n    return result\r\n  } catch (error) {\r\n    console.error(\r\n      'Error fetching Revenue By Month:', error\r\n    );\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const GetForecast = async (data) => {\r\n  try {\r\n    let result = {type:'', data:{}}\r\n    await axios.post(endpoints.forecast.get, data)\r\n            .then(res => {result = {type:'success', data:res.data}})\r\n            .catch(err => {result = {type: 'error', data:err}})\r\n    return result;\r\n  } catch (error) {\r\n    console.error(\r\n      'Error fetching Revenue By Month:', error\r\n    );\r\n    throw error;\r\n  }\r\n};","import axios, { endpoints } from 'src/utils/axios';\r\n\r\nexport const GetRevenueByMonth = async (data) => {\r\n  try {\r\n    let result = {type: '', data: {}}\r\n    await axios.post(endpoints.revenue.getRevenueByMonth, data)\r\n            .then(res => {result = {type: 'success', data: res.data}})\r\n            .catch(err => {result = {type: 'error', data: err}})\r\n    return result;\r\n  } catch (error) {\r\n    console.error(\r\n      'Error fetching Revenue By Month:', error\r\n    );\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const GetRevenue = async (data) => {\r\n  try {\r\n    let result = {type: '', data: {}}\r\n    await axios.post(endpoints.revenue.getRevenue, data)\r\n            .then(res => {result = {type: 'success', data: res.data.data.data}})\r\n            .catch(err => {result = {type: 'error', data: err}})\r\n    return result;\r\n  } catch (error) {\r\n    console.error(\r\n      'Error fetching Revenue:',error\r\n    );\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const GetBalanceSheet = async (data) => {\r\n  try {\r\n    let result = {type: '', data: {}}\r\n    await axios.post(endpoints.balanceSheet.getBalanceSheet, data)\r\n            .then(res => {result = {type: 'success', data: res.data.data.data}})\r\n            .catch(err => {result = {type: 'error', data: err}})\r\n    return result;\r\n  } catch (error) {\r\n    console.error(\r\n      'Error fetching Revenue:',error\r\n    );\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const GetBalanceSheetByMonth = async (data) => {\r\n  try {\r\n    let result = {type: '', data: {}}\r\n    await axios.post(endpoints.balanceSheet.getBalanceSheetByMonth, data)\r\n            .then(res => {result = {type: 'success', data: res.data}})\r\n            .catch(err => {result = {type: 'error', data: err}})\r\n    return result;\r\n  } catch (error) {\r\n    console.error(\r\n      'Error fetching Balance Sheet By Month:', error\r\n    );\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const GetCOA = async (userId) => {\r\n  try {\r\n    let result = {type: '', data: {}}\r\n    await axios.post(endpoints.coa.getCOA, {userId})\r\n            .then(res => {result = {type: 'success', data: res.data.data.data}})\r\n            .catch(err => {result = {type: 'error', data: err}})\r\n    return result\r\n  } catch (error) {\r\n    console.error(\r\n      'Error fetching Revenue:',error\r\n    );\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const CreateRevenue = async (data) => {\r\n  try {\r\n    let result = {type: '', data: {}}\r\n    await axios.post(endpoints.revenue.create, data)\r\n            .then(res => {result = {type: 'success', data: res.data.data.data}})\r\n            .catch(err => {result = {type: 'error', data: err}})\r\n    return result;\r\n  } catch (error) {\r\n    console.log(\"Error Create Revenue\", error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport const CreateBalanceSheet = async (data) => {\r\n  try {\r\n    let result = {type: '', data: {}}\r\n    await axios.post(endpoints.balanceSheet.create, data)\r\n            .then(res => {result = {type: 'success', data: res.data.data.data}})\r\n            .catch(err => {result = {type: 'error', data: err}})\r\n    return result;\r\n  } catch (error) {\r\n    console.log(\"Error Create Revenue\", error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport const CreateCOA = async (data) => {\r\n  try {\r\n    let result = {type: '', data: {}}\r\n    await axios.post(endpoints.coa.create, data)\r\n            .then(res => {result = {type: 'success', data: res.data.data.data}})\r\n            .catch(err => {result = {type: 'error', data: err}})\r\n    return result;\r\n  } catch (error) {\r\n    console.log(\"Error Create COA\", error);\r\n    return [];\r\n  }\r\n}\r\n\r\nexport const GetAllRevenueData = async (userId) => {\r\n  try {\r\n    let result = {type:'', data:{}}\r\n    await axios.post(endpoints.revenue.getAllRevenue, {userId})\r\n            .then(res => {result = {type:'success', data:res.data}})\r\n            .catch(err => {result = {type: 'error', data:err}})\r\n    return result;\r\n  } catch (error) {\r\n    console.error(\r\n      'Error fetching Revenue By Month:', error\r\n    );\r\n    throw error;\r\n  }\r\n}","import React from 'react'\r\n\r\nimport {\r\n    Box,\r\n    TextField,\r\n    InputAdornment,\r\n    IconButton,\r\n    Button,\r\n} from '@mui/material';\r\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\r\nimport SearchIcon from '@mui/icons-material/Search';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ForecastHeader = \r\n    ({\r\n      inputRef, date,setDate, selectedDate, setExportData,\r\n      handleDateChange, addEditableRow,handleSearch,\r\n    }) => \r\n    (\r\n        <Box\r\n            sx={{\r\n            display: 'flex',\r\n            justifyContent: 'space-between',\r\n            alignItems: 'center',\r\n            mt: 2,\r\n            mb: 2\r\n            }}\r\n        >\r\n            <TextField\r\n                variant=\"outlined\"\r\n                size=\"small\"\r\n                inputRef={inputRef}\r\n                placeholder=\"Search by AccountID\"\r\n                InputProps={{\r\n                    endAdornment: (\r\n                    <InputAdornment position=\"end\">\r\n                        <IconButton\r\n                        edge=\"end\"\r\n                        color=\"primary\"\r\n                        onClick={handleSearch} \r\n                        >\r\n                        <SearchIcon />\r\n                        </IconButton>\r\n                    </InputAdornment>\r\n                    ),\r\n                }}\r\n                sx={{ width: '20%' }}\r\n            />\r\n            <Box\r\n                sx={{\r\n                    display: 'flex',\r\n                    justifyContent: 'flex-end',\r\n                    mr: 4,\r\n                    ml: 4,\r\n                    border: '2px solid',\r\n                    borderColor: '#007867',\r\n                    borderRadius: 1,\r\n                    p: 0.2,\r\n                }}\r\n            >\r\n                <DatePicker \r\n                    label={date === null ? 'Forecast' : ''}\r\n                    views={['month', 'year']}  \r\n                    value={date} \r\n                    onChange={(e) => setDate(e)}\r\n                />\r\n            </Box>\r\n            <Box\r\n                sx={{\r\n                    display: 'flex',\r\n                    justifyContent: 'flex-end',\r\n                    alignItems: 'center',\r\n                    mr: 4,\r\n                    border: '2px solid',\r\n                    borderColor: '#007867',\r\n                    borderRadius: 1,\r\n                    p: 0.2,\r\n                }}\r\n            >\r\n                <DatePicker \r\n                    label={selectedDate.from === null ? 'From' : ''} \r\n                    views={['month', 'year']} \r\n                    value={selectedDate.from}\r\n                    onChange={(e) => handleDateChange(e, true)}\r\n                />\r\n                <Box sx={{ mx: 1 }}>-</Box>\r\n                <DatePicker \r\n                    label={selectedDate.to === null ? 'To' : ''}  \r\n                    views={['month', 'year']} \r\n                    value={selectedDate.to}\r\n                    onChange={(e) => handleDateChange(e, false)}\r\n                />\r\n            </Box>\r\n            <Button\r\n                variant='contained' color='primary' sx={{mr: 3}}\r\n                onClick={() => setExportData(true)}\r\n            >\r\n                Export\r\n            </Button>\r\n            <Button\r\n                variant='contained' color='primary' sx={{mr: 3}}\r\n                onClick={addEditableRow}\r\n            >\r\n                Add\r\n            </Button>\r\n        </Box>\r\n    )\r\n\r\nForecastHeader.propTypes = {\r\n  setExportData: PropTypes.func,\r\n  inputRef: PropTypes.object,\r\n  date: PropTypes.object,\r\n  selectedDate: PropTypes.object,\r\n  setDate: PropTypes.func,\r\n  addEditableRow: PropTypes.func,\r\n  handleDateChange: PropTypes.func,\r\n  handleSearch: PropTypes.func\r\n};\r\n\r\nexport default ForecastHeader","import React from 'react'\r\nimport {\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    TextField,\r\n    TableSortLabel,\r\n    Button,\r\n} from '@mui/material';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ForecastContainer = \r\n    ({\r\n        header=[], month=[], paginatedData=[], newRow,\r\n        handleRequestSort, orderDirection, changeUserInfo,\r\n        handleInputChange, saveNewRow, cancelNewRow, orderBy\r\n    }) => (\r\n        <TableContainer>\r\n            <Table>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        {header.map((title, index) => (\r\n                            <TableCell rowSpan={2} key={index} style={{ textAlign: 'center'}}>\r\n                            <TableSortLabel\r\n                                active={orderBy === title}\r\n                                direction={orderBy === title ? orderDirection : 'asc'}\r\n                                onClick={() => handleRequestSort(title)}\r\n                            >\r\n                                {title}\r\n                            </TableSortLabel>\r\n                            </TableCell>\r\n                        ))}\r\n                        {month.map((item, key) => (\r\n                            <TableCell colSpan={2} key={key}  sx={{textAlign: 'center'}}>\r\n                            {item}\r\n                            </TableCell>\r\n                        ))}\r\n                        <TableCell rowSpan={2}>Adjustment</TableCell>\r\n                        <TableCell rowSpan={2}>Forecast</TableCell>\r\n                    </TableRow>\r\n                    <TableRow>\r\n                        {month.map((_, index) => (\r\n                            <React.Fragment key={index}>\r\n                            <TableCell sx={{textAlign: 'center'}}>Actual</TableCell>\r\n                            <TableCell sx={{textAlign: 'center'}}>Forecast</TableCell>\r\n                            </React.Fragment>\r\n                        ))}\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {paginatedData.map((item, index) => (\r\n                        <TableRow key={index} sx={{textAlign: 'center'}}>\r\n                            <TableCell sx={{textAlign: 'center'}}>{item.AccountId}</TableCell>\r\n                            <TableCell sx={{textAlign: 'center'}}>{item.RevenueExpenseId}</TableCell>\r\n                            <TableCell sx={{textAlign: 'center'}}>{item.Description}</TableCell>\r\n                            {item.data.map( (data, key) => (\r\n                                <React.Fragment key={key}>\r\n                                    <TableCell sx={{textAlign: 'center'}}>{data.actual}</TableCell>\r\n                                    <TableCell sx={{textAlign: 'center'}}>{data.forecast}</TableCell>\r\n                                </React.Fragment>\r\n                            ))}\r\n                            <TableCell>\r\n                                <TextField \r\n                                    type='number'\r\n                                    value= {item.userInfo} \r\n                                    size='small' sx={{maxWidth:65}}  \r\n                                    onChange={(e) => changeUserInfo(e.target.value, item.RevenueExpenseId)}\r\n                                />\r\n                            </TableCell>\r\n                            <TableCell>{item.result}</TableCell>\r\n                        </TableRow>\r\n                    ))}\r\n                    {newRow && (\r\n                        <TableRow sx={{textAlign: 'center'}}>\r\n                            <TableCell sx={{textAlign: 'center'}}>\r\n                            <TextField\r\n                                value={newRow.AccountId}\r\n                                onChange={(e) => handleInputChange('AccountId', e.target.value)}\r\n                                size=\"small\"\r\n                            />\r\n                            </TableCell>\r\n                            <TableCell sx={{textAlign: 'center'}}>\r\n                            <TextField\r\n                                value={newRow.RevenueExpenseId}\r\n                                onChange={(e) => handleInputChange('RevenueExpenseId', e.target.value)}\r\n                                size=\"small\"\r\n                            />\r\n                            </TableCell>\r\n                            <TableCell sx={{textAlign: 'center'}}>\r\n                            <TextField\r\n                                value={newRow.Description}\r\n                                onChange={(e) => handleInputChange('Description', e.target.value)}\r\n                                size=\"small\"\r\n                            />\r\n                            </TableCell>\r\n                            {newRow.data.map((data, index) => (\r\n                            <React.Fragment key={index}>\r\n                                <TableCell sx={{textAlign: 'center'}}>\r\n                                0\r\n                                </TableCell>\r\n                                <TableCell sx={{textAlign: 'center'}}>\r\n                                0\r\n                                </TableCell>\r\n                            </React.Fragment>\r\n                            ))}\r\n                            <TableCell sx={{textAlign: 'center'}}>\r\n                            <TextField\r\n                                type='number'\r\n                                value={newRow.userInfo}\r\n                                sx={{maxWidth:65}}\r\n                                onChange={(e) => handleInputChange('userInfo', e.target.value)}\r\n                                size=\"small\"\r\n                            />\r\n                            </TableCell>\r\n                            <TableCell sx={{textAlign: 'center'}}>\r\n                            <Button onClick={saveNewRow}>Save</Button>\r\n                            <Button onClick={cancelNewRow}>Cancel</Button>\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    )}\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    )\r\n\r\nForecastContainer.propTypes = {\r\n    header: PropTypes.array,\r\n    month: PropTypes.array,\r\n    orderBy: PropTypes.string,\r\n    orderDirection: PropTypes.string,\r\n    handleRequestSort: PropTypes.func,\r\n    handleInputChange:PropTypes.func,\r\n    paginatedData: PropTypes.array,\r\n    newRow: PropTypes.object,\r\n    saveNewRow: PropTypes.func,\r\n    cancelNewRow: PropTypes.func,\r\n    changeUserInfo: PropTypes.func,\r\n};\r\n\r\nexport default ForecastContainer","import React, { useEffect, useRef, useState } from 'react';\r\nimport {\r\n    Box,\r\n    Card,\r\n    TablePagination\r\n} from '@mui/material';\r\nimport PropTypes from 'prop-types';\r\nimport { parseInt } from 'lodash';\r\n// eslint-disable-next-line import/no-extraneous-dependencies\r\nimport { toast } from 'react-toastify';\r\nimport { exportToExcel } from 'src/utils/exportToExcel';\r\nimport ForecastHeader from './header';\r\nimport ForecastContainer from './container';\r\n\r\nconst ForecastTable = ({ currentResult, month, date, setDate, changeResult, handleDateChange, selectedDate}) => {\r\n  const [tableData, setTableData] = useState([]);\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const inputRef = useRef(null);\r\n  const [orderBy, setOrderBy] = useState('');\r\n  const [orderDirection, setOrderDirection] = useState('asc');\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(10);\r\n  const [newRow, setNewRow] = useState(null);\r\n  const [exportData, setExportData] = useState(false);\r\n  const header = ['AccountID', 'RevenueExpenseID', 'Description'];\r\n\r\n  const handleRequestSort = (column) => {\r\n    const isAsc = orderBy === column && orderDirection === 'asc';\r\n    setOrderDirection(isAsc ? 'desc' : 'asc');\r\n    setOrderBy(column);\r\n  };\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  const handleSearch = () => {\r\n    setSearchQuery(inputRef.current.value);\r\n  }\r\n\r\n  const addEditableRow = () => {\r\n    setNewRow({\r\n      AccountId: '',\r\n      RevenueExpenseId: '',\r\n      Description: '',\r\n      data: month.map(() => ({ actual: 0, forecast: 0 })),\r\n      average:0,\r\n      userInfo: 0,\r\n      result: 0,\r\n    });\r\n  };\r\n  \r\n  const saveNewRow = () => {\r\n    let flag = true;\r\n    if(newRow.AccountID === '' && newRow.RevenueExpenseId === '' && newRow.Description === '' && newRow.userInfo === 0) {\r\n      flag = false;\r\n      toast.warn('Missing Value',{theme:'colored'})\r\n    }\r\n    if (newRow && flag) {\r\n      const tempData = [...tableData, newRow];\r\n      changeResult(tempData)\r\n      setNewRow(null); \r\n    }\r\n  };\r\n\r\n  const cancelNewRow = () => {\r\n    setNewRow(null);\r\n  };\r\n\r\n  const handleInputChange = (field, value) => {\r\n    setNewRow((prev) => ({ ...prev, [field]: value }));\r\n  };\r\n\r\n  const sortedData = [...tableData].sort((a, b) => {\r\n    if (!orderBy) return 0;\r\n\r\n    const keyMap = {\r\n      AccountID: 'AccountId',\r\n      RevenueExpenseID: 'RevenueExpenseId',\r\n      Description: 'Description',\r\n    };\r\n    const key = keyMap[orderBy];\r\n\r\n    if (!key) return 0; \r\n    const valueA = a[key] ?? ''; \r\n    const valueB = b[key] ?? '';\r\n\r\n    if (typeof valueA === 'string' && typeof valueB === 'string') {\r\n      return orderDirection === 'asc'\r\n        ? valueA.localeCompare(valueB)\r\n        : valueB.localeCompare(valueA);\r\n    }\r\n\r\n    const numA = parseFloat(valueA);\r\n    const numB = parseFloat(valueB);\r\n    if (Number.isNaN(numA) || Number.isNaN(numB)) return 0; \r\n    return orderDirection === 'asc' ? numA - numB : numB - numA;\r\n  });\r\n  const filteredData = sortedData.filter((row) => row.AccountId ?.includes(searchQuery));\r\n  \r\n  const paginatedData = filteredData.slice(\r\n    page * rowsPerPage,\r\n    page * rowsPerPage + rowsPerPage\r\n  );\r\n\r\n  useEffect(() => {\r\n    setTableData(currentResult)\r\n  },[currentResult])\r\n\r\n  useEffect(() => {\r\n    if(exportData) {\r\n      if(tableData.length === 0 || month.length === 0 || date === null) {\r\n        toast.warn('Export data is missing',{theme:'colored'})\r\n      } else {\r\n        exportToExcel({ data: tableData, month, fileName: `forecast ${date}`, type:'forecast' });\r\n      }\r\n      setExportData(false);\r\n    }\r\n  },[exportData, tableData, date, month])\r\n\r\n  const changeUserInfo = (value, id) => {\r\n    const tempData = tableData.map(item => {\r\n      let realValue = 0\r\n      realValue = parseInt(value);\r\n      if(value === '' || value === undefined ) {\r\n        realValue = 0;\r\n      }\r\n      if(item.average === '' || item.average === undefined) {item.average = 0;}\r\n      const tempResult = parseInt(item.average + realValue);\r\n      if(item.RevenueExpenseId === id) {\r\n        return { ...item, userInfo: value , result: tempResult}\r\n      };\r\n      return item;\r\n    })\r\n    changeResult(tempData)\r\n  }\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        position: 'relative',\r\n        width: '100%',\r\n        justifyContent: 'top',\r\n        alignItems: 'center',\r\n      }}\r\n    >\r\n      <Card sx={{ \r\n        width: '100%', \r\n        p: 2,\r\n      }}>\r\n        <ForecastHeader \r\n          inputRef={inputRef} date={date} setDate={setDate} \r\n          handleSearch={handleSearch} addEditableRow={addEditableRow}\r\n          selectedDate={selectedDate} handleDateChange={handleDateChange}\r\n          setExportData={setExportData} \r\n        />\r\n        <ForecastContainer\r\n          header={header} month={month} paginatedData={paginatedData} newRow={newRow}\r\n          handleRequestSort={handleRequestSort} orderDirection={orderDirection} changeUserInfo={changeUserInfo}\r\n          handleInputChange={handleInputChange} saveNewRow={saveNewRow} cancelNewRow={cancelNewRow} orderBy={orderBy}\r\n        />\r\n        <TablePagination\r\n          rowsPerPageOptions={[5, 10, 25]}\r\n          component=\"div\"\r\n          count={filteredData.length}\r\n          rowsPerPage={rowsPerPage}\r\n          page={page}\r\n          onPageChange={handleChangePage}\r\n          onRowsPerPageChange={handleChangeRowsPerPage}\r\n        />\r\n      </Card>\r\n    </Box>\r\n  );\r\n};\r\n\r\nForecastTable.propTypes = {\r\n  currentResult: PropTypes.array,\r\n  month: PropTypes.array,\r\n  date: PropTypes.object,\r\n  selectedDate: PropTypes.object,\r\n  setDate: PropTypes.func,\r\n  changeResult: PropTypes.func,\r\n  handleDateChange: PropTypes.func\r\n};\r\n\r\nexport default ForecastTable;\r\n","import React from 'react'\r\n\r\nimport {\r\n  Box,\r\n  TextField,\r\n  InputAdornment,\r\n  IconButton,\r\n} from '@mui/material';\r\nimport Button from '@mui/material/Button';\r\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\r\nimport SearchIcon from '@mui/icons-material/Search';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst BalanceSheetHeader = ({\r\n  inputRef, selectedDate, handleDateChange,handleSearch,setExportData\r\n}) => (\r\n  <Box\r\n    sx={{\r\n    display: 'flex',\r\n    justifyContent: 'space-between',\r\n    alignItems: 'center',\r\n    mt: 2,\r\n    mb: 2\r\n    }}\r\n  >\r\n    <TextField\r\n      variant=\"outlined\"\r\n      size=\"small\"\r\n      inputRef={inputRef}\r\n      placeholder=\"Search by AccountID\"\r\n      InputProps={{\r\n        endAdornment: (\r\n        <InputAdornment position=\"end\">\r\n          <IconButton\r\n            edge=\"end\"\r\n            color=\"primary\"\r\n            onClick={handleSearch} \r\n          >\r\n          <SearchIcon />\r\n          </IconButton>\r\n        </InputAdornment>\r\n        ),\r\n      }}\r\n      sx={{ width: '20%' }}\r\n    />\r\n    <Box\r\n      sx={{\r\n        display: 'flex',\r\n        justifyContent: 'flex-end',\r\n        alignItems: 'center',\r\n        mr: 4,\r\n        border: '2px solid',\r\n        borderColor: '#007867',\r\n        borderRadius: 1,\r\n        p: 0.2,\r\n      }}\r\n    >\r\n      <DatePicker \r\n        label={selectedDate.from === null ? 'From' : ''} \r\n        views={['month', 'year']} \r\n        value={selectedDate.from}\r\n        onChange={(e) => handleDateChange(e, true)}\r\n      />\r\n      <Box sx={{ mx: 1 }}>-</Box>\r\n      <DatePicker \r\n        label={selectedDate.to === null ? 'To' : ''}  \r\n        views={['month', 'year']} \r\n        value={selectedDate.to}\r\n        onChange={(e) => handleDateChange(e, false)}\r\n      />\r\n    </Box>\r\n      <Button\r\n        variant='contained' color='primary' sx={{mr: 3}}\r\n        onClick={() => setExportData(true)}\r\n      >\r\n        Export\r\n      </Button>\r\n  </Box>\r\n)\r\n\r\nBalanceSheetHeader.propTypes = {\r\n  inputRef:PropTypes.object,\r\n  selectedDate: PropTypes.object,\r\n  handleDateChange: PropTypes.func,\r\n  handleSearch: PropTypes.func,\r\n  setExportData: PropTypes.func\r\n};\r\n\r\nexport default BalanceSheetHeader","import React from 'react'\r\n\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  TableSortLabel,\r\n} from '@mui/material';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nconst BalanceSheetContainer = ({ \r\n  month=[], paginatedData=[], orderBy, \r\n  handleRequestSort, orderDirection\r\n}) => (\r\n  <TableContainer>\r\n    <Table>\r\n      <TableHead>\r\n        <TableRow>\r\n          <TableCell style={{ textAlign: 'center'}}>\r\n            <TableSortLabel\r\n              active={orderBy === 'AccountID'}\r\n              direction={orderBy === 'AccountID' ? orderDirection : 'asc'}\r\n              onClick={() => handleRequestSort('AccountID')}\r\n            >\r\n              AccountID\r\n            </TableSortLabel>\r\n          </TableCell>\r\n          {month.length > 0 && month.map((item, key) => (\r\n            <TableCell key={key}  sx={{textAlign: 'center'}}>\r\n              {item}\r\n            </TableCell>\r\n          ))}\r\n          <TableCell sx={{textAlign: 'center'}}>LifeTime Balance</TableCell>\r\n        </TableRow>\r\n      </TableHead>\r\n      <TableBody>\r\n        {paginatedData.length > 0 && paginatedData.map((item, index) => (\r\n          <TableRow key={index} sx={{textAlign: 'center'}}>\r\n            <TableCell sx={{textAlign: 'center'}}>{item.AccountId}</TableCell>\r\n            {item.data.length > 0 && item.data.map( (data, key) => (\r\n              <TableCell key={key} sx={{textAlign: 'center'}}>{data.amount}</TableCell>\r\n            ))}\r\n            <TableCell sx={{textAlign: 'center'}}>{item.lifetime_balance}</TableCell>\r\n          </TableRow>\r\n        ))}\r\n      </TableBody>\r\n    </Table>\r\n  </TableContainer>\r\n)\r\n\r\nBalanceSheetContainer.propTypes = {\r\n    month: PropTypes.array,\r\n    orderBy: PropTypes.string,\r\n    orderDirection: PropTypes.string,\r\n    handleRequestSort: PropTypes.func,\r\n    paginatedData: PropTypes.array,\r\n};\r\n\r\nexport default BalanceSheetContainer","export const fillMissingDates = (data, dateRange) => {\r\n    const tempData = JSON.parse(JSON.stringify(data));\r\n    for (let i = 0; i < tempData.length; i+=1) { \r\n      const subArray = tempData[i].data;\r\n      const filledSubArray = [];\r\n      // fill missing dates\r\n      for(let j = dateRange.from; j<= dateRange.to; j+=1){\r\n        if(j%100 === 12) {j = j - 12 + 100} \r\n        const existingObj = subArray.find(item => item.date === j); \r\n        if (existingObj) {\r\n          filledSubArray.push(existingObj);\r\n        } else {\r\n          filledSubArray.push({ amount: 0, date: j });\r\n        }\r\n      }\r\n      tempData[i].data = filledSubArray;\r\n    }\r\n    return tempData;\r\n  }\r\n  \r\nexport const formatData = (datasets, dateRange) => {\r\n    const tableData = new Map();\r\n    datasets.forEach(dataset => {\r\n      dataset.data.forEach(([AccountId, RevenueExpenseId, Amount, Description]) => {\r\n        const compositeKey = `${AccountId}`;\r\n        if (!tableData.has(compositeKey)) {\r\n          tableData.set(compositeKey, {\r\n            AccountId,\r\n            data: []\r\n          });\r\n        }\r\n        tableData.get(compositeKey).data.push({\r\n          date: dataset.date,\r\n          amount: Amount,\r\n        })\r\n      });\r\n    }); \r\n    const tableDataArray = Array.from(tableData.values())\r\n    const result = fillMissingDates(tableDataArray, dateRange);\r\n    return result\r\n}\r\n  \r\nexport const handleData = (data, dateRange) => {\r\n    const tempData = []\r\n    data.forEach(element => {\r\n      const tempItem = {date:'', data:[]}\r\n      tempItem.date = element.dateFlag\r\n      tempItem.data = [...element.data]\r\n      tempData.push(tempItem)\r\n    });\r\n    return formatData(tempData, dateRange);\r\n}\r\n \r\nexport const align = (total, period, dateRange) => {\r\n  const filledSubArray = [];\r\n  for(let j = dateRange.from; j<= dateRange.to; j+=1){\r\n    if(j%100 === 12) {j = j - 12 + 100} \r\n    filledSubArray.push({ amount: 0, date: j });\r\n  }\r\n\r\n  const tempData = JSON.parse(JSON.stringify(total));\r\n  for (let i = 0; i < tempData.length; i+=1) {\r\n    let subArray = []; \r\n    period.forEach(element => {\r\n      if(tempData[i].AccountId === element.AccountId) {\r\n        subArray = element.data\r\n      } \r\n    });\r\n    tempData[i].data = subArray;\r\n    if(subArray.length === 0) tempData[i].data = filledSubArray    \r\n  }\r\n  return tempData;\r\n}","import React, { useEffect, useRef, useState } from 'react'\r\nimport dayjs from 'dayjs';\r\nimport { Box, Card, TablePagination} from '@mui/material'\r\n// eslint-disable-next-line import/no-extraneous-dependencies\r\nimport {toast } from 'react-toastify';\r\nimport { useAuthContext } from 'src/auth/hooks';\r\nimport { GetBalanceSheetByMonth } from 'src/api/transaction';\r\nimport { exportToExcel } from 'src/utils/exportToExcel';\r\nimport BalanceSheetHeader from './header'\r\nimport BalanceSheetContainer from './container'\r\nimport { handleData, align } from './func';\r\n\r\nconst monthArray = [\r\n  'January', 'Feburary', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'\r\n]\r\n\r\nconst BalaceSheetAnalysis = () => {\r\n  const [tableData, setTableData] = useState([]);\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const inputRef = useRef(null);\r\n  const [orderBy, setOrderBy] = useState('');\r\n  const [orderDirection, setOrderDirection] = useState('asc');\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(10);\r\n  const [selectedDate, setSelectedDate] = useState({from:null, to:null});\r\n  const [exportData, setExportData] = useState(false);\r\n  const [months, setMonths] = useState([])\r\n  const {user} = useAuthContext()  \r\n  \r\n  const handleSearch = () => {\r\n    setSearchQuery(inputRef.current.value);\r\n  }\r\n\r\n  const handleDateChange = (date, type) => {\r\n    if (!date) return; \r\n    let dateResult;\r\n    if(type) {\r\n      dateResult = {...selectedDate, from: date}\r\n    } else {\r\n      dateResult = {...selectedDate, to: date}\r\n    }\r\n    setSelectedDate(dateResult)\r\n  };\r\n\r\n  const handleRequestSort = (column) => {\r\n    const isAsc = orderBy === column && orderDirection === 'asc';\r\n    setOrderDirection(isAsc ? 'desc' : 'asc');\r\n    setOrderBy(column);\r\n  };\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  const sortedData = [...tableData].sort((a, b) => {\r\n    if (!orderBy) return 0;\r\n\r\n    const keyMap = {\r\n      AccountID: 'AccountId',\r\n      RevenueExpenseID: 'RevenueExpenseId',\r\n      Description: 'Description',\r\n    };\r\n    const key = keyMap[orderBy];\r\n\r\n    if (!key) return 0; \r\n    const valueA = a[key] ?? ''; \r\n    const valueB = b[key] ?? '';\r\n\r\n    if (typeof valueA === 'string' && typeof valueB === 'string') {\r\n      return orderDirection === 'asc'\r\n        ? valueA.localeCompare(valueB)\r\n        : valueB.localeCompare(valueA);\r\n    }\r\n\r\n    const numA = parseFloat(valueA);\r\n    const numB = parseFloat(valueB);\r\n    if (Number.isNaN(numA) || Number.isNaN(numB)) return 0; \r\n    return orderDirection === 'asc' ? numA - numB : numB - numA;\r\n  });\r\n\r\n  const filteredData = sortedData.filter((row) => row.AccountId ?.includes(searchQuery));\r\n  \r\n  const paginatedData = filteredData.slice(\r\n    page * rowsPerPage,\r\n    page * rowsPerPage + rowsPerPage\r\n  );\r\n\r\n  const headerSet = (dataset) => {\r\n    const headerTitle = []\r\n    dataset.forEach((data, index) => {\r\n      const year = parseInt(data.date/100, 10)\r\n      const month = data.date - year*100\r\n      const tempHeader = `${monthArray[month]} ${year}`\r\n      headerTitle.push(tempHeader);\r\n    });\r\n    setMonths(headerTitle)\r\n  }\r\n\r\n  useEffect(() => {\r\n    const fetchBalanceSheet = async () => {\r\n      try {\r\n        if (selectedDate.from !== null && selectedDate.to !== null) {\r\n          const startDate = dayjs(selectedDate.from).year()*100 + dayjs(selectedDate.from).month();\r\n          const endDate = dayjs(selectedDate.to).year()*100 + dayjs(selectedDate.to).month();\r\n          const dateRange = {from:startDate, to:endDate}\r\n          const data = user.role === 1 ? {\r\n            userId: user._id,\r\n            date: dateRange\r\n          } : {\r\n            userId: user.parent,\r\n            date: dateRange\r\n          }\r\n          const response = await GetBalanceSheetByMonth(data);\r\n          if(response.type === 'success') {\r\n            toast.success('Balance Sheet successfully loaded!', {theme:'colored'})\r\n          } else {\r\n            toast.error('Update Balance Sheet Error',{theme: \"colored\"})\r\n          }\r\n          const tempResult = handleData(response.data.data, dateRange);\r\n          const totalResult = align(response.data.total, tempResult, dateRange);\r\n          setTableData(totalResult)\r\n          headerSet(tempResult[0].data)\r\n        }\r\n      } catch (err) {\r\n        console.log(\"fetchBalanceSheet Error:\",err)\r\n      }\r\n    };\r\n    fetchBalanceSheet();\r\n  }, [selectedDate, user._id, user.parent, user.role]);\r\n\r\n  useEffect(() => {\r\n    if(exportData) {\r\n      if(tableData.length === 0 || months.length === 0) {\r\n        toast.warn('Export data is missing',{theme:'colored'})\r\n      } else {\r\n        exportToExcel({ data: tableData, month: months, fileName: `balancesheet ${selectedDate.from} - ${selectedDate.to}`, type:'balancesheet' });\r\n      }\r\n      setExportData(false);\r\n    }\r\n  },[exportData, tableData, selectedDate, months])\r\n\r\n  return (\r\n    <Box>\r\n      <Card \r\n        sx={{ width: '100%', p: 2,}}\r\n      >\r\n        <BalanceSheetHeader\r\n          handleSearch={handleSearch} inputRef={inputRef}\r\n          setExportData={setExportData} \r\n          selectedDate={selectedDate} handleDateChange={handleDateChange}\r\n        />\r\n        <BalanceSheetContainer\r\n          paginatedData={paginatedData} orderBy={orderBy} month={months}\r\n          handleRequestSort={handleRequestSort} orderDirection={orderDirection}\r\n        />\r\n        <TablePagination\r\n          rowsPerPageOptions={[5, 10, 25]}\r\n          component=\"div\"\r\n          count={filteredData.length}\r\n          rowsPerPage={rowsPerPage}\r\n          page={page}\r\n          onPageChange={handleChangePage}\r\n          onRowsPerPageChange={handleChangeRowsPerPage}\r\n        />\r\n      </Card>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default BalaceSheetAnalysis","import PropTypes from 'prop-types';\r\n\r\nimport * as React from 'react';\r\nimport { styled } from '@mui/material/styles';\r\nimport Switch from '@mui/material/Switch';\r\nimport Stack from '@mui/material/Stack';\r\nimport Typography from '@mui/material/Typography';\r\n\r\nconst AntSwitch = styled(Switch)(({ theme }) => ({\r\n    width: 70,\r\n    height: 30,\r\n    borderRadius: 15,\r\n    padding: 0,\r\n    display: 'flex',\r\n    '&:active': {\r\n      '& .MuiSwitch-thumb': {\r\n        width: 20,\r\n      },\r\n      '& .MuiSwitch-switchBase.Mui-checked': {\r\n        transform: 'translateX(40px)',\r\n      },\r\n    },\r\n    '& .MuiSwitch-switchBase': {\r\n      padding: 2,\r\n      '&.Mui-checked': {\r\n        transform: 'translateX(35px)',\r\n        color: '#fff',\r\n        '& + .MuiSwitch-track': {\r\n          opacity: 1,\r\n          ...theme.applyStyles('dark'),\r\n        },\r\n      },\r\n    },\r\n    '& .MuiSwitch-thumb': {\r\n      boxShadow: '0 2px 4px 0 rgb(0 35 11 / 20%)',\r\n      width: 24,\r\n      height: 24,\r\n      borderRadius: 20,\r\n      transition: theme.transitions.create(['width'], {\r\n        duration: 200,\r\n      }),\r\n    },\r\n    '& .MuiSwitch-track': {\r\n      borderRadius: 16 / 2,\r\n      opacity: 1,\r\n      backgroundColor: 'rgba(0,0,0,.25)',\r\n      boxSizing: 'border-box',\r\n      ...theme.applyStyles('dark', {\r\n        backgroundColor: 'rgba(255,255,255,.35)',\r\n      }),\r\n    },\r\n}));\r\n\r\nconst SwitchButton = ({setState, statement}) => {\r\n  const handlechange = () => {\r\n      setState(!statement);\r\n  }\r\n  return (\r\n      <Stack direction=\"row\" spacing={1} sx={{ alignItems: 'center' }}>\r\n        <Typography>BS</Typography>\r\n        <AntSwitch defaultChecked value={statement} onClick={handlechange}/>\r\n        <Typography>IS</Typography>\r\n      </Stack>\r\n  )\r\n}\r\n\r\nSwitchButton.propTypes = {\r\n  statement: PropTypes.bool,\r\n  setState: PropTypes.func\r\n};\r\nexport default SwitchButton;","export const fillMissingDates = (data, dateRange) => {\r\n    const tempData = JSON.parse(JSON.stringify(data));\r\n    for (let i = 0; i < tempData.length; i+=1) {\r\n      const subArray = tempData[i].data;\r\n      const filledSubArray = [];\r\n      let sum = 0;\r\n      for(let j = dateRange.from; j<= dateRange.to; j+=1){\r\n        if(j%100 === 12) {j = j - 12 + 100} \r\n        const existingObj = subArray.find(item => item.date === j);\r\n        if (existingObj) {\r\n          filledSubArray.push(existingObj);\r\n          sum += existingObj.actual;\r\n        } else {\r\n          filledSubArray.push({ actual: 0, date: j, forecast: 0 });\r\n        }\r\n      }\r\n      tempData[i].data = filledSubArray;\r\n      tempData[i].average = parseFloat((sum/filledSubArray.length).toPrecision(5));\r\n      tempData[i].userInfo = 0;\r\n      tempData[i].result = parseFloat((sum/filledSubArray.length).toPrecision(5));\r\n    }\r\n    return tempData;\r\n  }\r\n  \r\nexport const formatData = (datasets, dateRange) => {\r\n    const tableData = new Map();\r\n    datasets.forEach(dataset => {\r\n      dataset.data.forEach(([AccountId, RevenueExpenseId, Description, currentValue, forecastValue]) => {\r\n        const compositeKey = `${AccountId}_${RevenueExpenseId}`;\r\n        if (!tableData.has(compositeKey)) {\r\n          tableData.set(compositeKey, {\r\n            AccountId,\r\n            RevenueExpenseId,\r\n            Description,\r\n            data: []\r\n          });\r\n        }\r\n        tableData.get(compositeKey).data.push({\r\n          date: dataset.date,\r\n          actual: currentValue,\r\n          forecast: forecastValue\r\n        })\r\n      });\r\n    }); \r\n    const tableDataArray = Array.from(tableData.values())\r\n    const result = fillMissingDates(tableDataArray, dateRange);\r\n    return result\r\n}\r\n  \r\nexport const handleData = (data, dateRange) => {\r\n    const tempData = []\r\n    data.forEach(element => {\r\n      const tempItem = {date:'', data:[]}\r\n      tempItem.date = element.dateFlag\r\n      tempItem.data = [...element.data]\r\n      tempData.push(tempItem)\r\n    });\r\n    return formatData(tempData, dateRange);\r\n}\r\n  ","// @mui\r\nimport dayjs from 'dayjs';\r\nimport Box from '@mui/material/Box';\r\nimport Container from '@mui/material/Container';\r\nimport Typography from '@mui/material/Typography';\r\nimport CloudUploadIcon from '@mui/icons-material/CloudUpload';\r\nimport {LoadingButton} from '@mui/lab';\r\n// eslint-disable-next-line import/no-extraneous-dependencies\r\nimport { parseInt } from 'lodash';\r\n// eslint-disable-next-line import/no-extraneous-dependencies\r\nimport {toast } from 'react-toastify';\r\nimport { useEffect, useState } from 'react';\r\nimport { useSettingsContext } from 'src/components/settings';\r\nimport { useAuthContext } from 'src/auth/hooks';\r\n// eslint-disable-next-line import/order\r\nimport { GetForecast, UpdateForecast } from 'src/api/forecast';\r\nimport ForecastTable from 'src/components/forecastTable';\r\nimport BalanceSheetAnalysis from 'src/components/balancesheet';\r\nimport SwitchButton from './switch';\r\nimport { handleData } from './func';\r\n\r\nconst monthArray = [\r\n  'January', 'Feburary', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'\r\n]\r\n\r\nexport default function DataForecast() {\r\n  const settings = useSettingsContext();\r\n  const [selectedDate, setSelectedDate] = useState({from:null, to:null});\r\n  const [result, setResult] = useState([])\r\n  const [header, setHeader] = useState([])\r\n  const [uploadState, setUploadState] = useState(false);\r\n  const {user} = useAuthContext()  \r\n  const [currentDate, setCurrentDate] = useState(null);\r\n  const [statement, setStatement] = useState(true);\r\n\r\n  const headerSet = (dataset) => {\r\n    const headerTitle = []\r\n    dataset.forEach((data, index) => {\r\n      const year = parseInt(data.date/100)\r\n      const month = data.date - year*100\r\n      const tempHeader = `${monthArray[month]} ${year}`\r\n      headerTitle.push(tempHeader);\r\n    });\r\n    setHeader(headerTitle)\r\n  }\r\n\r\n  const handleDateChange = (date, type) => {\r\n    if (!date) return; \r\n    let dateResult;\r\n    if(type) {\r\n      dateResult = {...selectedDate, from: date}\r\n    } else {\r\n      dateResult = {...selectedDate, to: date}\r\n    }\r\n    setSelectedDate(dateResult)\r\n  };\r\n\r\n  const onSubmit = async () => {\r\n    setUploadState(true)\r\n    const saveDate = dayjs(currentDate).format('MMMM YYYY');\r\n    const dateflag = dayjs(currentDate).year()*100 + dayjs(currentDate).month();\r\n\r\n    const data = user.role === 1 ? {\r\n      userId: user._id,\r\n      date: saveDate,\r\n      dateFlag: dateflag,\r\n      data: result\r\n    } : {\r\n      userId: user.parent,\r\n      date: saveDate,\r\n      dateFlag: dateflag,\r\n      data: result\r\n    }\r\n\r\n    if(!data.data || data.data.length === 0) {\r\n      toast.error('Monthly Result data required!',{theme: \"colored\"})\r\n      setUploadState(false)\r\n    } else {\r\n      const response = await UpdateForecast(data);\r\n      if(response === 'success') {\r\n        toast.success('Forecast successfully Uploaded!', {theme:'colored'})\r\n      } else {\r\n        toast.error('Update Forecast Error',{theme: \"colored\"})\r\n      }\r\n      setUploadState(false)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    const fetchForecast = async () => {\r\n      try {\r\n        if (selectedDate.from !== null && selectedDate.to !== null) {\r\n          const startDate = dayjs(selectedDate.from).year()*100 + dayjs(selectedDate.from).month();\r\n          const endDate = dayjs(selectedDate.to).year()*100 + dayjs(selectedDate.to).month();\r\n          const dateRange = {from:startDate, to:endDate}\r\n          const data = user.role === 1 ? {\r\n            userId: user._id,\r\n            date: dateRange\r\n          } : {\r\n            userId: user.parent,\r\n            date: dateRange\r\n          }\r\n\r\n          const response = await GetForecast(data);\r\n          if(response.type === 'success') {\r\n            toast.success('History successfully loaded!', {theme:'colored'})\r\n          } else {\r\n            toast.error('Update Forecast Error',{theme: \"colored\"})\r\n          }\r\n          const tempResult = handleData(response.data, dateRange);\r\n          setResult(tempResult)\r\n          headerSet(tempResult[0].data)\r\n        }\r\n      } catch (err) {\r\n        console.log(\"fetchForecast Error:\",err)\r\n      }\r\n    };\r\n    fetchForecast();\r\n  }, [selectedDate, user._id, user.parent, user.role]);\r\n\r\n  return (\r\n    <Container maxWidth={settings.themeStretch ? false : 'xl'}>\r\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', pb: 2 }}>\r\n        <Typography variant=\"h4\"> \r\n          {statement === true ? \"Forecast IncomeStatement\" : \"Analysis BalanceSheet\"} \r\n        </Typography>\r\n        <SwitchButton statement={statement} setState={(data) => setStatement(data)}/>\r\n      </Box>\r\n      <Box>\r\n        {statement === true ? \r\n          <ForecastTable \r\n            currentResult={result} month={header} \r\n            date={currentDate} selectedDate={selectedDate}\r\n            handleDateChange = {handleDateChange}\r\n            setDate = {(date) => setCurrentDate(date)}\r\n            changeResult = {(data) => setResult(data)}\r\n          />\r\n          :\r\n          <BalanceSheetAnalysis />\r\n        }\r\n      </Box>\r\n      <Box>\r\n        <LoadingButton\r\n          component=\"label\"\r\n          color=\"primary\"\r\n          variant=\"contained\"\r\n          onClick={onSubmit}\r\n          loading={uploadState}\r\n          sx = {{mt:2, mb:2}}\r\n          startIcon={<CloudUploadIcon />}\r\n        >\r\n          Submit\r\n        </LoadingButton>\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\n","import { Helmet } from 'react-helmet-async';\r\nimport DataForecast from 'src/sections/Bugeting_Forecasting/forecast/view';\r\n// sections\r\n\r\nexport default function Page() {\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title> Dashboard: Details</title>\r\n      </Helmet>\r\n\r\n      <DataForecast />\r\n    </>\r\n  );\r\n}\r\n","\r\nimport * as XLSX from 'xlsx';\r\n// eslint-disable-next-line import/no-extraneous-dependencies\r\nimport { saveAs } from 'file-saver';\r\n\r\nexport const exportToExcel = ({ data, month = [], fileName, type }) => {\r\n    let headers = [];\r\n    let excelData = [];\r\n    const headerRender = ['AccountID', 'RevenueExpenseID', 'Description'];\r\n    \r\n    if(type === 'forecast') {\r\n        headers = [...headerRender, ...month.flatMap(m => [`${m} Actual`, `${m} Forecast`]), 'Adjustment', 'Forecast'];\r\n\r\n        excelData = data.map(item => [\r\n        item.AccountId,\r\n        item.RevenueExpenseId,\r\n        item.Description,\r\n        ...item.data.flatMap(d => [d.actual, d.forecast]),  // Monthly data\r\n        item.userInfo,  // Adjustment column\r\n        item.result     // Forecast column\r\n        ]);\r\n    }\r\n\r\n    if(type === 'balancesheet') {\r\n        headers = ['AccountID', ...month];\r\n        \r\n        excelData = data.map(item => [\r\n            item.AccountId, // First column: Account ID\r\n            ...item.data.map(d => d.amount) // Monthly \"amount\" values\r\n        ]);\r\n    }\r\n    \r\n    if(type === 'model') {\r\n        headers = ['YEAR', 'TOTAL REVENUE', 'TOTAL EXPENSE', 'NET PROFIT', 'PROFIT MARGIN'];\r\n\r\n        excelData = data.map(item => [\r\n            item.year,\r\n            item.totalRevenue,\r\n            item.totalExpenses,\r\n            item.netProfit,\r\n            item.profitMargin\r\n        ])\r\n    }\r\n\r\n    // Create worksheet and workbook\r\n    const ws = XLSX.utils.aoa_to_sheet([headers, ...excelData]);\r\n    const wb = XLSX.utils.book_new();\r\n    XLSX.utils.book_append_sheet(wb, ws, 'Sheet1');\r\n\r\n    // Save file\r\n    const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });\r\n    const dataBlob = new Blob([excelBuffer], { type: 'application/octet-stream' });\r\n    saveAs(dataBlob, `${fileName}.xlsx`);\r\n};"],"names":["CreateForecast","async","forecast","coaResult","tempData","data","map","item","tempItem","flag","coa","toString","push","result","axios","post","endpoints","create","then","res","catch","err","error","console","log","UpdateForecast","tempResult","JSON","parse","stringify","forEach","element","AccountId","RevenueExpenseId","Description","update","GetForecast","type","get","GetRevenueByMonth","revenue","getRevenueByMonth","GetRevenue","getRevenue","GetBalanceSheet","balanceSheet","getBalanceSheet","GetBalanceSheetByMonth","getBalanceSheetByMonth","GetCOA","getCOA","userId","CreateRevenue","CreateBalanceSheet","CreateCOA","GetAllRevenueData","getAllRevenue","_ref","inputRef","date","setDate","selectedDate","setExportData","handleDateChange","addEditableRow","handleSearch","_jsxs","Box","sx","display","justifyContent","alignItems","mt","mb","children","_jsx","TextField","variant","size","placeholder","InputProps","endAdornment","InputAdornment","position","IconButton","edge","color","onClick","SearchIcon","width","mr","ml","border","borderColor","borderRadius","p","DatePicker","label","views","value","onChange","e","from","mx","to","Button","header","month","paginatedData","newRow","handleRequestSort","orderDirection","changeUserInfo","handleInputChange","saveNewRow","cancelNewRow","orderBy","TableContainer","Table","TableHead","TableRow","title","index","TableCell","rowSpan","style","textAlign","TableSortLabel","active","direction","key","colSpan","_","React","TableBody","actual","userInfo","maxWidth","target","currentResult","changeResult","tableData","setTableData","useState","searchQuery","setSearchQuery","useRef","setOrderBy","setOrderDirection","page","setPage","rowsPerPage","setRowsPerPage","setNewRow","exportData","filteredData","sort","a","b","_a$key","_b$key","AccountID","RevenueExpenseID","valueA","valueB","localeCompare","numA","parseFloat","numB","Number","isNaN","filter","row","_row$AccountId","includes","slice","useEffect","length","toast","warn","theme","exportToExcel","fileName","concat","flexDirection","Card","ForecastHeader","current","average","ForecastContainer","column","id","realValue","parseInt","undefined","_objectSpread","field","prev","TablePagination","rowsPerPageOptions","component","count","onPageChange","handleChangePage","event","newPage","onRowsPerPageChange","amount","lifetime_balance","formatData","datasets","dateRange","Map","dataset","Amount","compositeKey","has","set","fillMissingDates","i","subArray","filledSubArray","j","existingObj","find","Array","values","monthArray","BalaceSheetAnalysis","setSelectedDate","months","setMonths","user","useAuthContext","startDate","dayjs","year","role","_id","parent","response","success","handleData","dateFlag","totalResult","align","total","period","headerTitle","tempHeader","headerSet","fetchBalanceSheet","BalanceSheetHeader","dateResult","BalanceSheetContainer","AntSwitch","styled","Switch","height","padding","transform","opacity","applyStyles","boxShadow","transition","transitions","duration","backgroundColor","boxSizing","_ref2","setState","statement","Stack","spacing","Typography","defaultChecked","handlechange","currentValue","forecastValue","sum","toPrecision","DataForecast","settings","useSettingsContext","setResult","setHeader","uploadState","setUploadState","currentDate","setCurrentDate","setStatement","fetchForecast","Container","themeStretch","pb","SwitchButton","ForecastTable","BalanceSheetAnalysis","LoadingButton","saveDate","format","dateflag","loading","startIcon","CloudUploadIcon","Page","_Fragment","Helmet","headers","excelData","flatMap","m","d","totalRevenue","totalExpenses","netProfit","profitMargin","ws","XLSX","aoa_to_sheet","wb","book_new","book_append_sheet","excelBuffer","bookType","dataBlob","Blob","saveAs"],"sourceRoot":""}