{"version":3,"file":"static/js/404.b42984cf.chunk.js","mappings":"6NAEO,MAAMA,EAAoBC,UAC/B,IACE,IAAIC,EAAS,CAACC,KAAM,GAAIC,KAAM,CAAC,GAI/B,aAHMC,EAAAA,GAAMC,KAAKC,EAAAA,GAAUC,QAAQC,kBAAmBL,GAC7CM,MAAKC,IAAQT,EAAS,CAACC,KAAM,UAAWC,KAAMO,EAAIP,KAAK,IACvDQ,OAAMC,IAAQX,EAAS,CAACC,KAAM,QAASC,KAAMS,EAAI,IACnDX,CACT,CAAE,MAAOY,GAIP,MAHAC,QAAQD,MACN,mCAAoCA,GAEhCA,CACR,GAGWE,EAAaf,UACxB,IACE,IAAIC,EAAS,CAACC,KAAM,GAAIC,KAAM,CAAC,GAI/B,aAHMC,EAAAA,GAAMC,KAAKC,EAAAA,GAAUC,QAAQS,WAAYb,GACtCM,MAAKC,IAAQT,EAAS,CAACC,KAAM,UAAWC,KAAMO,EAAIP,KAAKA,KAAKA,KAAK,IACjEQ,OAAMC,IAAQX,EAAS,CAACC,KAAM,QAASC,KAAMS,EAAI,IACnDX,CACT,CAAE,MAAOY,GAIP,OAHAC,QAAQD,MACN,0BAA0BA,GAErB,EACT,GAGWI,EAAkBjB,UAC7B,IACE,IAAIC,EAAS,CAACC,KAAM,GAAIC,KAAM,CAAC,GAI/B,aAHMC,EAAAA,GAAMC,KAAKC,EAAAA,GAAUY,aAAaC,gBAAiBhB,GAChDM,MAAKC,IAAQT,EAAS,CAACC,KAAM,UAAWC,KAAMO,EAAIP,KAAKA,KAAKA,KAAK,IACjEQ,OAAMC,IAAQX,EAAS,CAACC,KAAM,QAASC,KAAMS,EAAI,IACnDX,CACT,CAAE,MAAOY,GAIP,OAHAC,QAAQD,MACN,0BAA0BA,GAErB,EACT,GAGWO,EAAyBpB,UACpC,IACE,IAAIC,EAAS,CAACC,KAAM,GAAIC,KAAM,CAAC,GAI/B,aAHMC,EAAAA,GAAMC,KAAKC,EAAAA,GAAUY,aAAaG,uBAAwBlB,GACvDM,MAAKC,IAAQT,EAAS,CAACC,KAAM,UAAWC,KAAMO,EAAIP,KAAK,IACvDQ,OAAMC,IAAQX,EAAS,CAACC,KAAM,QAASC,KAAMS,EAAI,IACnDX,CACT,CAAE,MAAOY,GAIP,MAHAC,QAAQD,MACN,yCAA0CA,GAEtCA,CACR,GAGWS,EAAStB,UACpB,IACE,IAAIC,EAAS,CAACC,KAAM,GAAIC,KAAM,CAAC,GAI/B,aAHMC,EAAAA,GAAMC,KAAKC,EAAAA,GAAUiB,IAAIC,OAAQ,CAACC,WAC/BhB,MAAKC,IAAQT,EAAS,CAACC,KAAM,UAAWC,KAAMO,EAAIP,KAAKA,KAAKA,KAAK,IACjEQ,OAAMC,IAAQX,EAAS,CAACC,KAAM,QAASC,KAAMS,EAAI,IACnDX,CACT,CAAE,MAAOY,GAIP,OAHAC,QAAQD,MACN,0BAA0BA,GAErB,EACT,GAGWa,EAAgB1B,UAC3B,IACE,IAAIC,EAAS,CAACC,KAAM,GAAIC,KAAM,CAAC,GAI/B,aAHMC,EAAAA,GAAMC,KAAKC,EAAAA,GAAUC,QAAQoB,OAAQxB,GAClCM,MAAKC,IAAQT,EAAS,CAACC,KAAM,UAAWC,KAAMO,EAAIP,KAAKA,KAAKA,KAAK,IACjEQ,OAAMC,IAAQX,EAAS,CAACC,KAAM,QAASC,KAAMS,EAAI,IACnDX,CACT,CAAE,MAAOY,GAEP,MADAC,QAAQc,IAAI,uBAAwBf,GAC9BA,CACR,GAGWgB,EAAqB7B,UAChC,IACE,IAAIC,EAAS,CAACC,KAAM,GAAIC,KAAM,CAAC,GAI/B,aAHMC,EAAAA,GAAMC,KAAKC,EAAAA,GAAUY,aAAaS,OAAQxB,GACvCM,MAAKC,IAAQT,EAAS,CAACC,KAAM,UAAWC,KAAMO,EAAIP,KAAKA,KAAKA,KAAK,IACjEQ,OAAMC,IAAQX,EAAS,CAACC,KAAM,QAASC,KAAMS,EAAI,IACnDX,CACT,CAAE,MAAOY,GAEP,MADAC,QAAQc,IAAI,uBAAwBf,GAC9BA,CACR,GAGWiB,EAAY9B,UACvB,IACE,IAAIC,EAAS,CAACC,KAAM,GAAIC,KAAM,CAAC,GAI/B,aAHMC,EAAAA,GAAMC,KAAKC,EAAAA,GAAUiB,IAAII,OAAQxB,GAC9BM,MAAKC,IAAQT,EAAS,CAACC,KAAM,UAAWC,KAAMO,EAAIP,KAAKA,KAAKA,KAAK,IACjEQ,OAAMC,IAAQX,EAAS,CAACC,KAAM,QAASC,KAAMS,EAAI,IACnDX,CACT,CAAE,MAAOY,GAEP,OADAC,QAAQc,IAAI,mBAAoBf,GACzB,EACT,GAGWkB,EAAoB/B,UAC/B,IACE,IAAIC,EAAS,CAACC,KAAK,GAAIC,KAAK,CAAC,GAI7B,aAHMC,EAAAA,GAAMC,KAAKC,EAAAA,GAAUC,QAAQyB,cAAe,CAACP,WAC1ChB,MAAKC,IAAQT,EAAS,CAACC,KAAK,UAAWC,KAAKO,EAAIP,KAAK,IACrDQ,OAAMC,IAAQX,EAAS,CAACC,KAAM,QAASC,KAAKS,EAAI,IAClDX,CACT,CAAE,MAAOY,GAIP,MAHAC,QAAQD,MACN,mCAAoCA,GAEhCA,CACR,E,wNChIK,MAAMoB,EAA2BA,CACtCC,EACAC,EACAC,KAEA,MAAMC,EAAcH,EAAeI,QACjC,CAACC,EAAKC,IAAWD,EAAMC,EAAOC,QAC9B,GAEIC,EAAeP,EAASG,QAC5B,CAACC,EAAKI,IAAYJ,EAAMI,EAAQF,QAChC,GAIIG,EAAU,CACdC,SAAU,GACVC,KAAM,GACNC,MAAO,IA6BT,MAjCkB,CAAC,WAAY,OAAQ,SAO7BC,SAASC,IAEjB,MAAMC,EAAed,EAASa,GACxBE,EAAa,GAEnB,IAAK,IAAIC,EAAO,EAAGA,GAAQhB,EAASiB,iBAAkBD,GAAQ,EAAG,CAC/D,MAAME,EACJjB,GAAe,EAAIa,EAAaK,cAAgB,OAASH,EAAO,GAC5DI,EACJd,GAAgB,EAAIQ,EAAaO,cAAgB,OAASL,EAAO,GAC7DM,EAAYJ,EAAeE,EAC3BG,EACJL,EAAe,EAAKI,EAAYJ,EAAgB,IAAM,EAExDH,EAAWS,KAAK,CACdR,OACAE,eACAE,gBACAE,YACAC,gBAEJ,CAEAf,EAAQK,GAAYE,CAAU,IAGzBP,CAAO,EAGHiB,EAAkBpB,GAC7B,IAAIqB,KAAKC,aAAa,QAAS,CAC7BC,MAAO,WACPC,SAAU,MACVC,sBAAuB,EACvBC,sBAAuB,IACtBC,OAAO3B,GAIC4B,EAAgB,WAAiC,IAAd9C,EAAG+C,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GACpD,MAAM/D,EAAU,GACVoC,EAAU,GAEV8B,EAAiBA,CAACvE,EAAMwE,KAC5B,IAAIC,GAAO,EACPzE,GACEK,EAAQgE,OAAS,GACnBhE,EAAQyC,SAAS4B,IACXA,EAAMC,OAASH,EAAQG,OACzBD,EAAMnC,QAAUiC,EAAQjC,OACxBkC,GAAO,EACT,KAGS,IAATA,GAAgBpE,EAAQqD,KAAKc,KAE7B/B,EAAQ4B,OAAS,GACnB5B,EAAQK,SAAS8B,IACXA,EAAMD,OAASH,EAAQG,OACzBC,EAAMrC,QAAUiC,EAAQjC,OACxBkC,GAAO,EACT,KAGS,IAATA,GAAgBhC,EAAQiB,KAAKc,GACnC,EAkCF,OA5DuCJ,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,IA6B9BtB,SAAS+B,IACnBxD,EAAIyB,SAASgC,IACX,GAAID,EAAME,YAAcD,EAAM,GAAI,CAChC,MAAMN,EAAU,CACdQ,GAAIH,EAAMI,KACVN,KAAMG,EAAM,GACZvC,OAAQsC,EAAMtC,QAGhB,OAAQuC,EAAM,IACZ,IAAK,WACHP,GAAe,EAAMC,GACrB,MACF,IAAK,WAGL,IAAK,MAGL,IAAK,8BAGL,IAAK,qBACHD,GAAe,EAAOC,GAK5B,IACA,IAEG,CAACU,YAAY7E,EAAS8E,YAAa1C,EAC5C,E,+EC7GO,MAAM2C,EAAeC,IAAmC,IAAlC,eAAErD,EAAc,SAAEsD,GAAUD,EACvD,MAAME,EAAcP,GAAOA,EAAGQ,WAAW,QAWnCC,EAAsBA,CAACT,EAAIU,EAAOC,KACtC,IAAKJ,EAAWP,GAAK,OAErB,MAAMY,EAAU5D,EAAe6D,KAAIvD,GACjCA,EAAO0C,KAAOA,GAAEc,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAQxD,GAAM,IAAE,CAACoD,GAAQC,IAAUrD,IAErDgD,EAASM,EAAQ,EASnB,OACEG,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACC,GAAI,CAAEC,QAAS,OAAQC,cAAe,SAAUC,IAAK,GAAIC,SAAA,EAC5DC,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CACTC,QAAQ,YACRP,GAAI,CACFQ,WAAY,IACZC,MAAO,iBACPC,SAAU,YACVN,SACH,qBAIDC,EAAAA,EAAAA,KAACN,EAAAA,EAAG,CACFC,GAAI,CACFW,OAAQ,QACRC,UAAW,OACXC,GAAI,EACJ,uBAAwB,CACtBC,MAAO,OAET,6BAA8B,CAC5BC,gBAAiB,eAEnB,6BAA8B,CAC5BA,gBAAiB,kBACjBC,aAAc,QAEhBZ,UAEFC,EAAAA,EAAAA,KAACY,EAAAA,EAAK,CAACC,QAAS,IAAId,SACjBrE,EAAe6D,KAAKvD,IACnB,MAAM8E,EAAe7B,EAAWjD,EAAO0C,IACvC,OACEe,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAEFC,GAAI,CACFC,QAAS,OACTE,IAAK,EACLiB,WAAY,UACZhB,SAAA,EAEFC,EAAAA,EAAAA,KAACgB,EAAAA,EAAS,CACR3B,MAAOrD,EAAOqC,KACd4C,SAAWC,GAAM/B,EAAoBnD,EAAO0C,GAAI,OAAQwC,EAAEC,OAAO9B,OACjE+B,YAAY,sBACZC,KAAK,QACL1B,GAAI,CACF2B,KAAM,EACN,wBAAyB,CACvBZ,gBAAgC,cAChCa,OAAQT,EAAe,OAAS,YAGpCZ,QAAQ,WACRsB,WAAY,CACVC,UAAWX,MAGfd,EAAAA,EAAAA,KAACgB,EAAAA,EAAS,CACRtH,KAAK,SACL2F,MAAOrD,EAAOC,OACdgF,SAAWC,GAAM/B,EAAoBnD,EAAO0C,GAAI,SAAUgD,SAASR,EAAEC,OAAO9B,MAAO,KAAO,GAC1F+B,YAAY,SACZC,KAAK,QACL1B,GAAI,CACFc,MAAO,OACP,wBAAyB,CACvBC,gBAAgC,cAChCa,OAAQT,EAAe,OAAS,YAGpCZ,QAAQ,WACRsB,WAAY,CACVC,UAAWX,KAGdA,IACCd,EAAAA,EAAAA,KAAC2B,EAAAA,EAAU,CACTC,QAASA,KAAMC,OArFJnD,EAqFwB1C,EAAO0C,QApFrDO,EAAWP,IAEhBM,EAAStD,EAAeoG,QAAO9F,GAAUA,EAAO0C,KAAOA,MAH5BA,KAqFmC,EAC9C2C,KAAK,QACL1B,GAAI,CACFS,MAAO,aACP,UAAW,CACTA,MAAO,eAETL,UAEFC,EAAAA,EAAAA,KAAC+B,EAAAA,EAAC,CAACV,KAAM,QAGXP,IACAd,EAAAA,EAAAA,KAACN,EAAAA,EAAG,CAACC,GAAI,CAAEc,MAAO,GAAIH,OAAQ,QAzD3BtE,EAAO0C,GA2DR,SAMdsB,EAAAA,EAAAA,KAACgC,EAAAA,EAAM,CACL9B,QAAQ,OACR0B,QA9HmBK,KACvB,MAAMC,EAAY,CAChBxD,GAAG,OAADyD,OAASC,KAAKC,OAChBhE,KAAK,WAAD8D,OAAaG,OAAOC,aAAa,GAAK7G,EAAeqC,SACzD9B,OAAQ,GAEV+C,EAAS,IAAItD,EAAgBwG,GAAW,EAyHpCM,WAAWxC,EAAAA,EAAAA,KAACyC,EAAAA,EAAI,CAACpB,KAAM,KACvB1B,GAAI,CACFS,MAAO,eACPsC,eAAgB,aAChB,UAAW,CACTtC,MAAO,eACPM,gBAAiB,eAEnBX,SACH,yBAGG,EC9IG4C,EAAe5D,IAA6B,IAA5B,SAAEpD,EAAQ,SAAEqD,GAAUD,EACjD,MAAME,EAAcP,GAAOA,EAAGQ,WAAW,QAgBnC0D,EAAgBA,CAAClE,EAAIU,EAAOC,KAChC,IAAKJ,EAAWP,GAAK,OAErB,MAAMY,EAAU3D,EAAS4D,KAAIpD,GAC3BA,EAAQuC,KAAOA,GAAEc,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAQrD,GAAO,IAAE,CAACiD,GAAQC,IAAUlD,IAEvD6C,EAASM,EAAQ,EASnB,OACEG,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACC,GAAI,CAAEC,QAAS,OAAQC,cAAe,SAAUC,IAAK,GAAIC,SAAA,EAC5DC,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CACTC,QAAQ,YACRP,GAAI,CACFQ,WAAY,IACZC,MAAO,iBACPC,SAAU,YACVN,SACH,cAIDC,EAAAA,EAAAA,KAACN,EAAAA,EAAG,CACFC,GAAI,CACFW,OAAQ,QACRC,UAAW,OACXC,GAAI,EACJ,uBAAwB,CACtBC,MAAO,OAET,6BAA8B,CAC5BC,gBAAiB,eAEnB,6BAA8B,CAC5BA,gBAAiB,kBACjBC,aAAc,QAEhBZ,UAEFC,EAAAA,EAAAA,KAACY,EAAAA,EAAK,CAACC,QAAS,IAAId,SACjBpE,EAAS4D,KAAKpD,IACb,MAAM2E,EAAe7B,EAAW9C,EAAQuC,IACxC,OACEe,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAEFC,GAAI,CACFC,QAAS,OACTE,IAAK,EACLiB,WAAY,UACZhB,SAAA,EAEFC,EAAAA,EAAAA,KAACgB,EAAAA,EAAS,CACR3B,MAAOlD,EAAQkC,KACf4C,SAAWC,GAAM0B,EAAczG,EAAQuC,GAAI,OAAQwC,EAAEC,OAAO9B,OAC5D+B,YAAY,eACZC,KAAK,QACL1B,GAAI,CACF2B,KAAM,EACN,wBAAyB,CACvBZ,gBAAgC,cAChCa,OAAQT,EAAe,OAAS,YAGpCZ,QAAQ,WACRsB,WAAY,CACVC,UAAWX,MAGfd,EAAAA,EAAAA,KAACgB,EAAAA,EAAS,CACRtH,KAAK,SACL2F,MAAOlD,EAAQF,OACfgF,SAAWC,GAAM0B,EAAczG,EAAQuC,GAAI,SAAUgD,SAASR,EAAEC,OAAO9B,MAAO,KAAO,GACrF+B,YAAY,SACZC,KAAK,QACL1B,GAAI,CACFc,MAAO,OACP,wBAAyB,CACvBC,gBAAgC,cAChCa,OAAQT,EAAe,OAAS,YAGpCZ,QAAQ,WACRsB,WAAY,CACVC,UAAWX,KAGdA,IACCd,EAAAA,EAAAA,KAAC2B,EAAAA,EAAU,CACTC,QAASA,KAAMiB,OArFVnE,EAqFwBvC,EAAQuC,QApFhDO,EAAWP,IAEhBM,EAASrD,EAASmG,QAAO3F,GAAWA,EAAQuC,KAAOA,MAH9BA,KAqFoC,EACzC2C,KAAK,QACL1B,GAAI,CACFS,MAAO,aACP,UAAW,CACTA,MAAO,eAETL,UAEFC,EAAAA,EAAAA,KAAC+B,EAAAA,EAAC,CAACV,KAAM,QAGXP,IACAd,EAAAA,EAAAA,KAACN,EAAAA,EAAG,CAACC,GAAI,CAAEc,MAAO,GAAIH,OAAQ,QAzD3BnE,EAAQuC,GA2DT,SAMdsB,EAAAA,EAAAA,KAACgC,EAAAA,EAAM,CACL9B,QAAQ,OACR0B,QAnIakB,KACjB,MACMC,EAAYpH,EAAS4D,KAAI2B,GAAKA,EAAE7C,OAChC2E,EAFe,CAAC,WAAY,OAAQ,YAAa,YAAa,aAEhClB,QAAOzD,IAAS0E,EAAUE,SAAS5E,KACjE6E,EAAUF,EAAejF,OAAS,EAAIiF,EAAe,GAAE,WAAAb,OAAcxG,EAASoC,OAAS,GAEvFoF,EAAa,CACjBzE,GAAG,OAADyD,OAASC,KAAKC,OAChBhE,KAAM6E,EACNjH,OAAQ,GAEV+C,EAAS,IAAIrD,EAAUwH,GAAY,EAyH/BX,WAAWxC,EAAAA,EAAAA,KAACyC,EAAAA,EAAI,CAACpB,KAAM,KACvB1B,GAAI,CACFS,MAAO,eACPsC,eAAgB,aAChB,UAAW,CACTtC,MAAO,eACPM,gBAAiB,eAEnBX,SACH,kBAGG,E,qCClJH,MAAMqD,EAAmBrE,IAA6B,IAA5B,SAAEnD,EAAQ,SAAEoD,GAAUD,EACrD,MAAMsE,EAAiBA,CAAC5G,EAAU2C,EAAOC,KACvCL,GAAQQ,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EACL5D,GAAQ,IACX,CAACa,IAAQ+C,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACJ5D,EAASa,IAAS,IACrB,CAAC2C,GAAQC,MAEX,EAUEiE,EAAwBA,CAACC,EAAOC,KACpC/D,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAAAK,SAAA,EACFC,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CACTC,QAAQ,YACRP,GAAI,CACFQ,WAAY,IACZC,MAAO,iBACPC,SAAU,WACVoD,GAAI,GACJ1D,SAEDwD,KAEH9D,EAAAA,EAAAA,MAACiE,EAAAA,GAAI,CAACC,WAAS,EAAC9C,QAAS,EAAEd,SAAA,EACzBC,EAAAA,EAAAA,KAAC0D,EAAAA,GAAI,CAACE,MAAI,EAACC,GAAI,EAAE9D,UACfN,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAAAK,SAAA,EACFC,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CACTC,QAAQ,UACRP,GAAI,CACFS,MAAO,gBACPC,SAAU,UACVT,QAAS,QACT6D,GAAI,IACJ1D,SACH,sBAGDC,EAAAA,EAAAA,KAACgB,EAAAA,EAAS,CACRtH,KAAK,SACL2F,MAAOzD,EAAS4H,GAAazG,cAC7BkE,SAAWC,GAAMmC,EAAeG,EAAa,gBAAiBM,WAAW5C,EAAEC,OAAO9B,QAAU,GAC5FgC,KAAK,QACL0C,WAAS,EACT7D,QAAQ,mBAIdF,EAAAA,EAAAA,KAAC0D,EAAAA,GAAI,CAACE,MAAI,EAACC,GAAI,EAAE9D,UACfN,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAAAK,SAAA,EACFC,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CACTC,QAAQ,UACRP,GAAI,CACFS,MAAO,gBACPC,SAAU,UACVT,QAAS,QACT6D,GAAI,IACJ1D,SACH,sBAGDC,EAAAA,EAAAA,KAACgB,EAAAA,EAAS,CACRtH,KAAK,SACL2F,MAAOzD,EAAS4H,GAAavG,cAC7BgE,SAAWC,GAAMmC,EAAeG,EAAa,gBAAiBM,WAAW5C,EAAEC,OAAO9B,QAAU,GAC5FgC,KAAK,QACL0C,WAAS,EACT7D,QAAQ,wBAQpB,OACET,EAAAA,EAAAA,MAACmB,EAAAA,EAAK,CAACC,QAAS,EAAEd,SAAA,CACfuD,EAAsB,uBAAwB,YAC9CA,EAAsB,YAAa,QACnCA,EAAsB,aAAc,UAErC7D,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAAAK,SAAA,EACFC,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CACTC,QAAQ,YACRP,GAAI,CACFQ,WAAY,IACZC,MAAO,iBACPC,SAAU,WACVoD,GAAI,GACJ1D,SACH,uBAGDC,EAAAA,EAAAA,KAACgE,EAAAA,EAAW,CAAC3C,KAAK,QAAQ0C,WAAS,EAAAhE,UACjCN,EAAAA,EAAAA,MAACwE,EAAAA,EAAM,CACL5E,MAAOzD,EAASiB,iBAChBoE,SAAWC,IAAMgD,OA5FLC,EA4FkBjD,EAAEC,OAAO9B,WA3F/CL,GAAQQ,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EACL5D,GAAQ,IACXiB,iBAAkBsH,KAHAA,KA4FkC,EAC9CjE,QAAQ,WAAUH,SAAA,EAElBC,EAAAA,EAAAA,KAACoE,EAAAA,EAAQ,CAAC/E,MAAO,EAAEU,SAAC,aACpBC,EAAAA,EAAAA,KAACoE,EAAAA,EAAQ,CAAC/E,MAAO,EAAEU,SAAC,aACpBC,EAAAA,EAAAA,KAACoE,EAAAA,EAAQ,CAAC/E,MAAO,GAAGU,SAAC,uBAIrB,E,iFC5GL,MAAMsE,EAAiBtF,IAIvB,IAJwB,aAC7BuF,EAAY,SACZC,EAAQ,UACRC,GACDzF,EACC,MAAO0F,EAAkBC,IAAuBC,EAAAA,EAAAA,UAAS,YA+BnDC,EA7BkBC,MACtB,OAAQJ,GACN,IAAK,OAAQ,OAAOF,EACpB,IAAK,QAAS,OAAOC,EACrB,QAAS,OAAOF,EAClB,EAwBkBO,GAEpB,OACEpF,EAAAA,EAAAA,MAACqF,EAAAA,EAAK,CAACnF,GAAI,CAAEgB,aAAc,EAAGoE,SAAU,UAAWhF,SAAA,EACjDC,EAAAA,EAAAA,KAACN,EAAAA,EAAG,CACFC,GAAI,CACFqF,EAAG,GACHjF,UAEFN,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACC,GAAI,CAAEC,QAAS,OAAQmB,WAAY,SAAU2B,eAAgB,iBAAkB3C,SAAA,EAClFC,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACC,QAAQ,KAAK+E,UAAU,KAAKtF,GAAI,CAAEQ,WAAY,KAAMJ,SAAC,uBAGjEC,EAAAA,EAAAA,KAACY,EAAAA,EAAK,CAACsE,UAAU,MAAMrE,QAAS,EAAEd,SAlClB,CACtB,CACEtD,SAAU,WACV0I,MAAO,WACPC,YAAa,UACbC,cAAe,WAEjB,CACE5I,SAAU,OACV0I,MAAO,OACPC,YAAa,UACbC,cAAe,WAEjB,CACE5I,SAAU,QACV0I,MAAO,QACPC,YAAa,UACbC,cAAe,YAkBQ9F,KAAI+F,IAAsD,IAArD,SAAE7I,EAAQ,MAAE0I,EAAK,YAAEC,EAAW,cAAEC,GAAeC,EACnE,MAAMC,EAAWd,IAAqBhI,EACtC,OACEuD,EAAAA,EAAAA,KAACgC,EAAAA,EAAM,CAELtI,KAAK,SACLkI,QAASA,IAAM8C,EAAoBjI,GACnCyD,QAASqF,EAAW,YAAc,WAClClE,KAAK,QACL1B,IAAEH,EAAAA,EAAAA,GAAA,CACAgG,SAAU,GACVrF,WAAY,IACZsF,cAAe,QACXF,EAAW,CACb7E,gBAAiB2E,EACjBjF,MAAOgF,EACP,UAAW,CACT1E,gBAAiB2E,EACjBK,QAAS,KAET,CACFtF,MAAO,OACPuF,YAAa,UACb,UAAW,CACTjF,gBAAiB,aAGrBX,SAEDoF,GAzBI1I,EA0BE,YAOnBuD,EAAAA,EAAAA,KAAC4F,EAAAA,EAAc,CAAA7F,UACbN,EAAAA,EAAAA,MAACoG,EAAAA,EAAK,CAAClG,GAAI,CAAE6F,SAAU,KAAMzF,SAAA,EAC3BC,EAAAA,EAAAA,KAAC8F,EAAAA,EAAS,CAAA/F,UACRN,EAAAA,EAAAA,MAACsG,EAAAA,EAAQ,CAAAhG,SAAA,EACPC,EAAAA,EAAAA,KAACgG,EAAAA,EAAS,CAACrG,GAAI,CAAEQ,WAAY,IAAKsF,cAAe,YAAapF,SAAU,WAAYN,SAAC,UAGrFC,EAAAA,EAAAA,KAACgG,EAAAA,EAAS,CAACrG,GAAI,CAAEQ,WAAY,IAAKsF,cAAe,YAAapF,SAAU,WAAYN,SAAC,mBAGrFC,EAAAA,EAAAA,KAACgG,EAAAA,EAAS,CAACrG,GAAI,CAAEQ,WAAY,IAAKsF,cAAe,YAAapF,SAAU,WAAYN,SAAC,oBAGrFC,EAAAA,EAAAA,KAACgG,EAAAA,EAAS,CAACrG,GAAI,CAAEQ,WAAY,IAAKsF,cAAe,YAAapF,SAAU,WAAYN,SAAC,gBAGrFC,EAAAA,EAAAA,KAACgG,EAAAA,EAAS,CAACrG,GAAI,CAAEQ,WAAY,IAAKsF,cAAe,YAAapF,SAAU,WAAYN,SAAC,wBAKzFC,EAAAA,EAAAA,KAACiG,EAAAA,EAAS,CAAAlG,SACP6E,EAAYrF,KAAK5F,IAChB8F,SAAAA,EAAAA,MAACsG,EAAAA,EAAQ,CAEPpG,GAAI,CACF,UAAW,CACTe,gBAAiB,YAEnBX,SAAA,EAEFN,EAAAA,EAAAA,MAACuG,EAAAA,EAAS,CAACrG,GAAI,CAAEQ,WAAY,IAAKE,SAAU,YAAaN,SAAA,CAAC,QAClDpG,EAAKiD,SAEboD,EAAAA,EAAAA,KAACgG,EAAAA,EAAS,CAACrG,GAAI,CAAEU,SAAU,YAAaN,SACrC1C,EAAe1D,EAAKmD,iBAEvBkD,EAAAA,EAAAA,KAACgG,EAAAA,EAAS,CAACrG,GAAI,CAAEU,SAAU,YAAaN,SACrC1C,EAAe1D,EAAKqD,kBAEvBgD,EAAAA,EAAAA,KAACgG,EAAAA,EAAS,CACRrG,GAAI,CACFQ,WAAY,IACZE,SAAU,WACVD,MAAOzG,EAAKuD,WAAa,EAAI,UAAY,WACzC6C,SAED1C,EAAe1D,EAAKuD,cAEvB8C,EAAAA,EAAAA,KAACgG,EAAAA,EAAS,CAACrG,GAAI,CAAEU,SAAU,YAAaN,UJ/FvBV,EIgGG1F,EAAKwD,aJhGH,GAAAgF,OAAQ9C,EAAM6G,QAAQ,GAAE,UIsEzCvM,EAAKiD,MJtEOyC,KImGpB,aAID,E,sICxIZ,MAAM8G,GAAgBpH,IAAiC,IAAhC,OAAEqH,EAAM,QAAEC,EAAO,MAAElB,GAAOpG,EAC/C,OAAIqH,GAAUC,GAAWA,EAAQtI,QAE7B0B,EAAAA,EAAAA,MAACqF,EAAAA,EAAK,CACJwB,UAAW,EACX3G,GAAI,CACFqF,EAAG,EACHtE,gBAAiB,QACjB6F,OAAQ,qBACRxG,SAAA,EAEFC,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACC,QAAQ,YAAYP,GAAI,CAAEQ,WAAY,IAAKsD,GAAI,GAAI1D,SAC5DoF,IAEFkB,EAAQ9G,KAAI,CAACiH,EAAOC,KACnBhH,EAAAA,EAAAA,MAACQ,EAAAA,EAAU,CAETC,QAAQ,QACRP,GAAI,CAAES,MAAOoG,EAAMpG,OAAQL,SAAA,CAE1ByG,EAAME,QAAQ,KAAGrJ,EAAemJ,EAAMnH,SAJlCoH,QAUR,IAAI,EAePE,GAAarB,IAAA,IAAC,MAAElF,EAAK,MAAE+E,GAAOG,EAAA,OAClC7F,EAAAA,EAAAA,MAACmB,EAAAA,EAAK,CAACsE,UAAU,MAAMnE,WAAW,SAASF,QAAS,EAAEd,SAAA,EACpDC,EAAAA,EAAAA,KAACN,EAAAA,EAAG,CACFC,GAAI,CACFc,MAAO,GACPH,OAAQ,GACRI,gBAAiBN,EACjBO,aAAc,MAGlBX,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACC,QAAQ,QAAQP,GAAI,CAAES,MAAO,kBAAmBL,SACzDoF,MAEG,EAQGyB,GAAkBC,IAKxB,IALyB,aAC9BvC,EAAY,SACZC,EAAQ,UACRC,EAAS,eACT9I,GACDmL,EACC,MAAMC,EAAwBxC,EAAa/E,KAAI5F,IAAI,CACjDiD,KAAK,QAADuF,OAAUxI,EAAKiD,MACnBmK,QAASpN,EAAKmD,aACdkK,SAAUrN,EAAKqD,kBAGXiK,EAA0B3C,EAAa/E,KAAI,CAAC2H,EAAMT,KAAK,IAAAU,EAAAC,EAAA,MAAM,CACjExK,KAAK,QAADuF,OAAU+E,EAAKtK,MACnB,gBAAiBsK,EAAKhK,UACtB,aAA4B,QAAfiK,EAAA5C,EAASkC,UAAM,IAAAU,OAAA,EAAfA,EAAiBjK,YAAa,EAC3C,cAA8B,QAAhBkK,EAAA5C,EAAUiC,UAAM,IAAAW,OAAA,EAAhBA,EAAkBlK,YAAa,EAC9C,IAEKmK,EAAU3L,EAAe6D,KAAI,CAACvD,EAAQyK,KAAK,CAC/CpI,KAAMrC,EAAOqC,KACbgB,MAAOrD,EAAOC,OACdmE,MAAO,CAAC,UAAW,UAAW,WAAWqG,EAAQ,OAGnD,OACEhH,EAAAA,EAAAA,MAACiE,EAAAA,GAAI,CAACC,WAAS,EAAC9C,QAAS,EAAEd,SAAA,EACzBC,EAAAA,EAAAA,KAAC0D,EAAAA,GAAI,CAACE,MAAI,EAACC,GAAI,GAAIyD,GAAI,EAAEvH,UACvBN,EAAAA,EAAAA,MAACqF,EAAAA,EAAK,CAACnF,GAAI,CAAEqF,EAAG,EAAG1E,OAAQ,QAASP,SAAA,EAClCN,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACC,GAAI,CAAEC,QAAS,OAAQ8C,eAAgB,gBAAiB3B,WAAY,SAAU0C,GAAI,GAAI1D,SAAA,EACzFC,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACC,QAAQ,KAAK+E,UAAU,KAAIlF,SAAC,yBAGxCN,EAAAA,EAAAA,MAACmB,EAAAA,EAAK,CAACsE,UAAU,MAAMrE,QAAS,EAAEd,SAAA,EAChCC,EAAAA,EAAAA,KAAC2G,GAAU,CAACvG,MAAM,UAAU+E,MAAM,aAClCnF,EAAAA,EAAAA,KAAC2G,GAAU,CAACvG,MAAM,UAAU+E,MAAM,oBAGtCnF,EAAAA,EAAAA,KAACuH,EAAAA,EAAmB,CAAC9G,MAAM,OAAOH,OAAQ,IAAIP,UAC5CN,EAAAA,EAAAA,MAAC+H,EAAAA,EAAQ,CAAC7N,KAAMmN,EAAsB/G,SAAA,EACpCC,EAAAA,EAAAA,KAACyH,EAAAA,EAAa,CAACC,gBAAgB,SAC/B1H,EAAAA,EAAAA,KAAC2H,EAAAA,EAAK,CAACjB,QAAQ,UACf1G,EAAAA,EAAAA,KAAC4H,EAAAA,EAAK,CAACC,cAAgBxI,GAAK,IAAA8C,QAAU9C,EAAQ,KAAM6G,QAAQ,GAAE,QAC9DlG,EAAAA,EAAAA,KAAC8H,EAAAA,EAAO,CAACC,SAAS/H,EAAAA,EAAAA,KAACmG,GAAa,OAChCnG,EAAAA,EAAAA,KAACgI,EAAAA,EAAG,CAACtB,QAAQ,UAAUuB,KAAK,aAC5BjI,EAAAA,EAAAA,KAACgI,EAAAA,EAAG,CAACtB,QAAQ,WAAWuB,KAAK,uBAMrCjI,EAAAA,EAAAA,KAAC0D,EAAAA,GAAI,CAACE,MAAI,EAACC,GAAI,GAAIyD,GAAI,EAAEvH,UACvBN,EAAAA,EAAAA,MAACqF,EAAAA,EAAK,CAACnF,GAAI,CAAEqF,EAAG,EAAG1E,OAAQ,QAASP,SAAA,EAClCN,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACC,GAAI,CAAEC,QAAS,OAAQ8C,eAAgB,gBAAiB3B,WAAY,SAAU0C,GAAI,GAAI1D,SAAA,EACzFC,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACC,QAAQ,KAAK+E,UAAU,KAAIlF,SAAC,2BAGxCN,EAAAA,EAAAA,MAACmB,EAAAA,EAAK,CAACsE,UAAU,MAAMrE,QAAS,EAAEd,SAAA,EAChCC,EAAAA,EAAAA,KAAC2G,GAAU,CAACvG,MAAM,UAAU+E,MAAM,cAClCnF,EAAAA,EAAAA,KAAC2G,GAAU,CAACvG,MAAM,UAAU+E,MAAM,UAClCnF,EAAAA,EAAAA,KAAC2G,GAAU,CAACvG,MAAM,UAAU+E,MAAM,iBAGtCnF,EAAAA,EAAAA,KAACuH,EAAAA,EAAmB,CAAC9G,MAAM,OAAOH,OAAQ,IAAIP,UAC5CN,EAAAA,EAAAA,MAACyI,EAAAA,EAAS,CAACvO,KAAMsN,EAAwBlH,SAAA,EACvCC,EAAAA,EAAAA,KAACyH,EAAAA,EAAa,CAACC,gBAAgB,SAC/B1H,EAAAA,EAAAA,KAAC2H,EAAAA,EAAK,CAACjB,QAAQ,UACf1G,EAAAA,EAAAA,KAAC4H,EAAAA,EAAK,CAACC,cAAgBxI,GAAK,IAAA8C,QAAU9C,EAAQ,KAAM6G,QAAQ,GAAE,QAC9DlG,EAAAA,EAAAA,KAAC8H,EAAAA,EAAO,CAACC,SAAS/H,EAAAA,EAAAA,KAACmG,GAAa,OAChCnG,EAAAA,EAAAA,KAACmI,EAAAA,EAAI,CAACzO,KAAK,WAAWgN,QAAQ,gBAAgB0B,OAAO,UAAUC,YAAa,KAC5ErI,EAAAA,EAAAA,KAACmI,EAAAA,EAAI,CAACzO,KAAK,WAAWgN,QAAQ,YAAY0B,OAAO,UAAUC,YAAa,KACxErI,EAAAA,EAAAA,KAACmI,EAAAA,EAAI,CAACzO,KAAK,WAAWgN,QAAQ,aAAa0B,OAAO,UAAUC,YAAa,eAMjFrI,EAAAA,EAAAA,KAAC0D,EAAAA,GAAI,CAACE,MAAI,EAACC,GAAI,GAAG9D,UAChBN,EAAAA,EAAAA,MAACqF,EAAAA,EAAK,CAACnF,GAAI,CAAEqF,EAAG,GAAIjF,SAAA,EAClBC,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACC,QAAQ,KAAK+E,UAAU,KAAKtF,GAAI,CAAE8D,GAAI,GAAI1D,SAAC,uBAGvDN,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACC,GAAI,CAAEC,QAAS,OAAQmB,WAAY,SAAU2B,eAAgB,UAAW3C,SAAA,EAC3EC,EAAAA,EAAAA,KAACuH,EAAAA,EAAmB,CAAC9G,MAAM,OAAOH,OAAQ,IAAIP,UAC5CN,EAAAA,EAAAA,MAAC6I,EAAAA,EAAQ,CAAAvI,SAAA,EACPC,EAAAA,EAAAA,KAACuI,EAAAA,EAAG,CACF5O,KAAM0N,EACNmB,GAAG,MACHC,GAAG,MACHC,YAAa,GACbC,YAAa,IACbC,aAAc,EACdlC,QAAQ,QAAO3G,SAEdsH,EAAQ9H,KAAI,CAACiH,EAAOC,KACnBzG,EAAAA,EAAAA,KAAC6I,EAAAA,EAAI,CAAuBZ,KAAMzB,EAAMpG,OAAM,QAAA+B,OAA3BsE,SAGvBzG,EAAAA,EAAAA,KAAC8H,EAAAA,EAAO,CAACgB,UAAYzJ,GAAUhC,EAAegC,WAGlDW,EAAAA,EAAAA,KAACN,EAAAA,EAAG,CAACC,GAAI,CAAEoJ,GAAI,GAAIhJ,SAChBsH,EAAQ9H,KAAI,CAACiH,EAAOC,KACnBzG,EAAAA,EAAAA,KAACN,EAAAA,EAAG,CAAaC,GAAI,CAAE8D,GAAI,GAAI1D,UAC7BC,EAAAA,EAAAA,KAAC2G,GAAU,CAACvG,MAAOoG,EAAMpG,MAAO+E,MAAOqB,EAAMnI,QADrCoI,iBAQf,EC5KI,SAASuC,KACtB,MAAM,KAAEC,IAASC,EAAAA,EAAAA,MAEVxN,EAAgByN,IAAqBxE,EAAAA,EAAAA,UAAS,CACnD,CAAEjG,GAAI,IAAKL,KAAM,YAAapC,OAAQ,KACtC,CAAEyC,GAAI,IAAKL,KAAM,YAAapC,OAAQ,MACtC,CAAEyC,GAAI,IAAKL,KAAM,YAAapC,OAAQ,SAGjCN,EAAUyN,IAAezE,EAAAA,EAAAA,UAAS,CACvC,CAAEjG,GAAI,IAAKL,KAAM,WAAYpC,OAAQ,KACrC,CAAEyC,GAAI,IAAKL,KAAM,OAAQpC,OAAQ,MACjC,CAAEyC,GAAI,IAAKL,KAAM,YAAapC,OAAQ,QAGjCoN,EAAkBC,IAAuB3E,EAAAA,EAAAA,UAAS,CACvDtI,SAAU,CAAEU,cAAe,EAAGE,cAAe,GAC7CX,KAAM,CAAES,cAAe,GAAIE,cAAe,GAC1CV,MAAO,CAAEQ,cAAe,EAAGE,cAAe,GAC1CJ,iBAAkB,IAGd0M,GAAkBC,EAAAA,EAAAA,UACtB,IAAM/N,EAAyBC,EAAgBC,EAAU0N,IACzD,CAAC3N,EAAgBC,EAAU0N,IAwC7B,OA7BAI,EAAAA,EAAAA,YAAU,KACcjQ,WACpB,IACE,IAAIC,EAAS,CAAC,EACd,MAAMwB,EAAuB,IAAdgO,EAAKS,KAAaT,EAAKU,IAAMV,EAAKW,OAC3CC,QAAiBtO,EAAAA,EAAAA,IAAkBN,GACnB,YAAlB4O,EAASnQ,KACXoQ,EAAAA,GAAMC,QAAQ,+BAAgC,CAAEC,MAAO,YAEvDF,EAAAA,GAAMzP,MAAM,wBAAyB,CAAE2P,MAAO,YAGhD,MAAMjP,QAAYD,EAAAA,EAAAA,IAAOG,GACR,YAAbF,EAAIrB,MACNoQ,EAAAA,GAAMC,QAAQ,2BAA4B,CAAEC,MAAO,YAChDH,EAASlQ,KAAKA,KAAKoE,OAAS,GAAKhD,EAAIpB,KAAKoE,OAAS,IACpDtE,EAASoE,EAAcgM,EAASlQ,KAAKA,KAAMoB,EAAIpB,MAC/CwP,EAAkB1P,EAAOmF,aACzBwK,EAAY3P,EAAOoF,eAGrBiL,EAAAA,GAAMzP,MAAM,mBAAoB,CAAE2P,MAAO,WAE7C,CAAE,MAAO5P,GACPE,QAAQc,IAAI,uBAAwBhB,EACtC,GAEF6P,EAAe,GACd,CAAChB,EAAKU,IAAKV,EAAKW,OAAQX,EAAKS,QAE9BjK,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAAAK,SAAA,EACFN,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CACFC,GAAI,CACFuK,GAAI,EACJC,GAAI,GACJpK,SAAA,EAEFC,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CACTC,QAAQ,KACR+E,UAAU,KACVtF,GAAI,CAAEQ,WAAY,OAAQsD,GAAI,GAAI1D,SACnC,iCAGDC,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CACTC,QAAQ,QACRP,GAAI,CACFU,SAAU,QACVN,SACH,sFAKHC,EAAAA,EAAAA,KAACoK,EAAAA,EAAS,CAACC,SAAS,KAAK1K,GAAI,CAAEuK,GAAI,EAAGC,GAAI,GAAIpK,UAC5CN,EAAAA,EAAAA,MAACiE,EAAAA,GAAI,CAACC,WAAS,EAAC9C,QAAS,EAAEd,SAAA,EACzBC,EAAAA,EAAAA,KAAC0D,EAAAA,GAAI,CAACE,MAAI,EAACC,GAAI,GAAIyD,GAAI,EAAEvH,UACvBN,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CACFC,GAAI,CACFC,QAAS,OACTC,cAAe,UACfE,SAAA,EAEFN,EAAAA,EAAAA,MAAC6K,EAAAA,EAAI,CACH3K,GAAI,CACF2B,KAAM,EACN1B,QAAS,OACTC,cAAe,UACfE,SAAA,EAEFC,EAAAA,EAAAA,KAACuK,EAAAA,EAAU,CAAC5K,GAAI,CAAE6K,WAAY,GAAIzK,UAChCC,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACC,QAAQ,KAAK+E,UAAU,MAAKlF,SAAC,uBAI3CC,EAAAA,EAAAA,KAACyK,EAAAA,EAAW,CACV9K,GAAI,CACF2B,KAAM,EACNyD,SAAU,SACVnF,QAAS,OACTC,cAAe,UACfE,UAEFC,EAAAA,EAAAA,KAACN,EAAAA,EAAG,CACFC,GAAI,CACFW,OAAQ,OACRC,UAAW,OACXC,GAAI,EACJ,uBAAwB,CACtBC,MAAO,OAET,6BAA8B,CAC5BC,gBAAiB,eAEnB,6BAA8B,CAC5BA,gBAAiB,kBACjBC,aAAc,QAEhBZ,UAEFN,EAAAA,EAAAA,MAACmB,EAAAA,EAAK,CAACC,QAAS,EAAEd,SAAA,EAChBC,EAAAA,EAAAA,KAAClB,EAAY,CACXpD,eAAgBA,EAChBsD,SAAUmK,KAEZnJ,EAAAA,EAAAA,KAAC2C,EAAY,CACXhH,SAAUA,EACVqD,SAAUoK,eAOpB3J,EAAAA,EAAAA,MAAC6K,EAAAA,EAAI,CAAC3K,GAAI,CAAE+K,GAAI,GAAI3K,SAAA,EAClBC,EAAAA,EAAAA,KAACuK,EAAAA,EAAU,CAAAxK,UACTC,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACC,QAAQ,KAAK+E,UAAU,MAAKlF,SAAC,yBAI3CC,EAAAA,EAAAA,KAACyK,EAAAA,EAAW,CAAA1K,UACVC,EAAAA,EAAAA,KAACoD,EAAgB,CACfxH,SAAUyN,EACVrK,SAAUsK,UAKhB7J,EAAAA,EAAAA,MAACmB,EAAAA,EAAK,CAACsE,UAAU,MAAMrE,QAAS,EAAGlB,GAAI,CAAE+K,GAAI,GAAI3K,SAAA,EAC/CC,EAAAA,EAAAA,KAACgC,EAAAA,EAAM,CACLJ,QA1IQ+I,KACtBb,EAAAA,GAAMC,QAAQ,qCAAqC,EA0IrC7J,QAAQ,YACRsC,WAAWxC,EAAAA,EAAAA,KAAC4K,EAAAA,EAAU,CAACvJ,KAAM,KAC7BjB,MAAM,YAAWL,SAClB,yBAGDC,EAAAA,EAAAA,KAACgC,EAAAA,EAAM,CACLJ,QA9IKiJ,KACnBf,EAAAA,GAAMC,QAAQ,2BAA2B,EA8I3B7J,QAAQ,YACRsC,WAAWxC,EAAAA,EAAAA,KAAC8K,EAAAA,EAAQ,CAACzJ,KAAM,KAC3BjB,MAAM,UAASL,SAChB,oBAOPC,EAAAA,EAAAA,KAAC0D,EAAAA,GAAI,CAACE,MAAI,EAACC,GAAI,GAAIyD,GAAI,EAAEvH,UACvBN,EAAAA,EAAAA,MAACmB,EAAAA,EAAK,CAACC,QAAS,EAAEd,SAAA,EAChBC,EAAAA,EAAAA,KAACqE,EAAc,CACbC,aAAciF,EAAgBlN,SAC9BkI,SAAUgF,EAAgBjN,KAC1BkI,UAAW+E,EAAgBhN,SAG7ByD,EAAAA,EAAAA,KAAC4G,GAAe,CACdtC,aAAciF,EAAgBlN,SAC9BkI,SAAUgF,EAAgBjN,KAC1BkI,UAAW+E,EAAgBhN,MAC3Bb,eAAgBA,gBAQhC,CCjOe,SAASqP,KACtB,OACEtL,EAAAA,EAAAA,MAAAuL,EAAAA,SAAA,CAAAjL,SAAA,EACEC,EAAAA,EAAAA,KAACiL,EAAAA,GAAM,CAAAlL,UACLC,EAAAA,EAAAA,KAAA,SAAAD,SAAO,mBAETC,EAAAA,EAAAA,KAACgJ,GAAS,MAGhB,C","sources":["api/transaction.js","utils/financialCalculations.js","sections/model/RevenuInput.js","sections/model/ExpenseInput.js","sections/model/ScenarioSettings.js","sections/model/FinancialTable.js","sections/model/FinancialCharts.js","sections/model/index.js","pages/model_page/modelPage.js"],"sourcesContent":["import axios, { endpoints } from 'src/utils/axios';\r\n\r\nexport const GetRevenueByMonth = async (data) => {\r\n  try {\r\n    let result = {type: '', data: {}}\r\n    await axios.post(endpoints.revenue.getRevenueByMonth, data)\r\n            .then(res => {result = {type: 'success', data: res.data}})\r\n            .catch(err => {result = {type: 'error', data: err}})\r\n    return result;\r\n  } catch (error) {\r\n    console.error(\r\n      'Error fetching Revenue By Month:', error\r\n    );\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const GetRevenue = async (data) => {\r\n  try {\r\n    let result = {type: '', data: {}}\r\n    await axios.post(endpoints.revenue.getRevenue, data)\r\n            .then(res => {result = {type: 'success', data: res.data.data.data}})\r\n            .catch(err => {result = {type: 'error', data: err}})\r\n    return result;\r\n  } catch (error) {\r\n    console.error(\r\n      'Error fetching Revenue:',error\r\n    );\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const GetBalanceSheet = async (data) => {\r\n  try {\r\n    let result = {type: '', data: {}}\r\n    await axios.post(endpoints.balanceSheet.getBalanceSheet, data)\r\n            .then(res => {result = {type: 'success', data: res.data.data.data}})\r\n            .catch(err => {result = {type: 'error', data: err}})\r\n    return result;\r\n  } catch (error) {\r\n    console.error(\r\n      'Error fetching Revenue:',error\r\n    );\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const GetBalanceSheetByMonth = async (data) => {\r\n  try {\r\n    let result = {type: '', data: {}}\r\n    await axios.post(endpoints.balanceSheet.getBalanceSheetByMonth, data)\r\n            .then(res => {result = {type: 'success', data: res.data}})\r\n            .catch(err => {result = {type: 'error', data: err}})\r\n    return result;\r\n  } catch (error) {\r\n    console.error(\r\n      'Error fetching Balance Sheet By Month:', error\r\n    );\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const GetCOA = async (userId) => {\r\n  try {\r\n    let result = {type: '', data: {}}\r\n    await axios.post(endpoints.coa.getCOA, {userId})\r\n            .then(res => {result = {type: 'success', data: res.data.data.data}})\r\n            .catch(err => {result = {type: 'error', data: err}})\r\n    return result\r\n  } catch (error) {\r\n    console.error(\r\n      'Error fetching Revenue:',error\r\n    );\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const CreateRevenue = async (data) => {\r\n  try {\r\n    let result = {type: '', data: {}}\r\n    await axios.post(endpoints.revenue.create, data)\r\n            .then(res => {result = {type: 'success', data: res.data.data.data}})\r\n            .catch(err => {result = {type: 'error', data: err}})\r\n    return result;\r\n  } catch (error) {\r\n    console.log(\"Error Create Revenue\", error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport const CreateBalanceSheet = async (data) => {\r\n  try {\r\n    let result = {type: '', data: {}}\r\n    await axios.post(endpoints.balanceSheet.create, data)\r\n            .then(res => {result = {type: 'success', data: res.data.data.data}})\r\n            .catch(err => {result = {type: 'error', data: err}})\r\n    return result;\r\n  } catch (error) {\r\n    console.log(\"Error Create Revenue\", error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport const CreateCOA = async (data) => {\r\n  try {\r\n    let result = {type: '', data: {}}\r\n    await axios.post(endpoints.coa.create, data)\r\n            .then(res => {result = {type: 'success', data: res.data.data.data}})\r\n            .catch(err => {result = {type: 'error', data: err}})\r\n    return result;\r\n  } catch (error) {\r\n    console.log(\"Error Create COA\", error);\r\n    return [];\r\n  }\r\n}\r\n\r\nexport const GetAllRevenueData = async (userId) => {\r\n  try {\r\n    let result = {type:'', data:{}}\r\n    await axios.post(endpoints.revenue.getAllRevenue, {userId})\r\n            .then(res => {result = {type:'success', data:res.data}})\r\n            .catch(err => {result = {type: 'error', data:err}})\r\n    return result;\r\n  } catch (error) {\r\n    console.error(\r\n      'Error fetching Revenue By Month:', error\r\n    );\r\n    throw error;\r\n  }\r\n}","export const calculateScenarioResults = (\r\n  revenueStreams,\r\n  expenses,\r\n  settings\r\n) => {\r\n  const baseRevenue = revenueStreams.reduce(\r\n    (sum, stream) => sum + stream.amount,\r\n    0\r\n  );\r\n  const baseExpenses = expenses.reduce(\r\n    (sum, expense) => sum + expense.amount,\r\n    0\r\n  );\r\n\r\n  const scenarios = [\"probable\", \"best\", \"worst\"];\r\n  const results = {\r\n    probable: [],\r\n    best: [],\r\n    worst: [],\r\n  };\r\n\r\n  scenarios.forEach((scenario) => {\r\n    // Get scenario-specific settings\r\n    const scenarioData = settings[scenario];\r\n    const yearlyData = [];\r\n\r\n    for (let year = 1; year <= settings.projectionPeriod; year += 1) {\r\n      const totalRevenue =\r\n        baseRevenue * (1 + scenarioData.revenueGrowth / 100) ** (year - 1);\r\n      const totalExpenses =\r\n        baseExpenses * (1 + scenarioData.expenseGrowth / 100) ** (year - 1);\r\n      const netProfit = totalRevenue - totalExpenses;\r\n      const profitMargin =\r\n        totalRevenue > 0 ? (netProfit / totalRevenue) * 100 : 0;\r\n\r\n      yearlyData.push({\r\n        year,\r\n        totalRevenue,\r\n        totalExpenses,\r\n        netProfit,\r\n        profitMargin,\r\n      });\r\n    }\r\n\r\n    results[scenario] = yearlyData;\r\n  });\r\n\r\n  return results;\r\n};\r\n\r\nexport const formatCurrency = (amount) =>\r\n  new Intl.NumberFormat(\"en-US\", {\r\n    style: \"currency\",\r\n    currency: \"USD\",\r\n    minimumFractionDigits: 0,\r\n    maximumFractionDigits: 0,\r\n  }).format(amount);\r\n\r\nexport const formatPercentage = (value) => `${value.toFixed(1)}%`;\r\n\r\nexport const divideRevenue = (revenueData = [], coa = []) => {\r\n  const revenue = [];\r\n  const expense = [];\r\n\r\n  const setTotalResult = (type, newItem) => {\r\n    let flag = false;\r\n    if (type) {\r\n      if (revenue.length > 0) {\r\n        revenue.forEach((ritem) => {\r\n          if (ritem.name === newItem.name) {\r\n            ritem.amount += newItem.amount;\r\n            flag = true;\r\n          }\r\n        });\r\n      }\r\n      if (flag === false) revenue.push(newItem);\r\n    } else {\r\n      if (expense.length > 0) {\r\n        expense.forEach((eitem) => {\r\n          if (eitem.name === newItem.name) {\r\n            eitem.amount += newItem.amount;\r\n            flag = true;\r\n          }\r\n        });\r\n      }\r\n      if (flag === false) expense.push(newItem);\r\n    }\r\n  };\r\n\r\n  revenueData.forEach((rItem) => {\r\n    coa.forEach((cItem) => {\r\n      if (rItem.accountId === cItem[0]) {\r\n        const newItem = {\r\n          id: rItem.code,\r\n          name: cItem[1],\r\n          amount: rItem.amount,\r\n        };\r\n\r\n        switch (cItem[4]) {\r\n          case \"Revenues\":\r\n            setTotalResult(true, newItem);\r\n            break;\r\n          case \"COGS/S&O\":\r\n            setTotalResult(false, newItem);\r\n            break;\r\n          case \"SGA\":\r\n            setTotalResult(false, newItem);\r\n            break;\r\n          case \"Depreciation & Amortization\":\r\n            setTotalResult(false, newItem);\r\n            break;\r\n          case \"Cash & Equivalents\":\r\n            setTotalResult(false, newItem);\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n      }\r\n    });\r\n  });\r\n  return {revenueList:revenue, expenseList: expense}\r\n};\r\n","import React from 'react';\r\nimport { Plus, X } from 'lucide-react';\r\nimport {\r\n  TextField,\r\n  Typography,\r\n  Button,\r\n  Box,\r\n  IconButton,\r\n  Stack\r\n} from '@mui/material';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const RevenueInput = ({ revenueStreams, onUpdate }) => {\r\n  const isEditable = (id) => id.startsWith('new_');\r\n\r\n  const addRevenueStream = () => {\r\n    const newStream = {\r\n      id: `new_${Date.now()}`,\r\n      name: `Product ${String.fromCharCode(65 + revenueStreams.length)}`,\r\n      amount: 0\r\n    };\r\n    onUpdate([...revenueStreams, newStream]);\r\n  };\r\n\r\n  const updateRevenueStream = (id, field, value) => {\r\n    if (!isEditable(id)) return;\r\n    \r\n    const updated = revenueStreams.map(stream =>\r\n      stream.id === id ? { ...stream, [field]: value } : stream\r\n    );\r\n    onUpdate(updated);\r\n  };\r\n\r\n  const removeRevenueStream = (id) => {\r\n    if (!isEditable(id)) return;\r\n    \r\n    onUpdate(revenueStreams.filter(stream => stream.id !== id));\r\n  };\r\n\r\n  return (\r\n    <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>\r\n      <Typography \r\n        variant=\"subtitle2\" \r\n        sx={{ \r\n          fontWeight: 500, \r\n          color: 'text.secondary',\r\n          fontSize: '0.875rem'\r\n        }}\r\n      >\r\n        Revenue Streams\r\n      </Typography>\r\n      \r\n      <Box\r\n        sx={{\r\n          height: '192px', \r\n          overflowY: 'auto',\r\n          pr: 1, \r\n          '&::-webkit-scrollbar': {\r\n            width: '6px',\r\n          },\r\n          '&::-webkit-scrollbar-track': {\r\n            backgroundColor: 'transparent',\r\n          },\r\n          '&::-webkit-scrollbar-thumb': {\r\n            backgroundColor: 'rgba(0,0,0,0.2)',\r\n            borderRadius: '3px',\r\n          },\r\n        }}\r\n      >\r\n        <Stack spacing={1.5}>\r\n          {revenueStreams.map((stream) => {\r\n            const itemEditable = isEditable(stream.id);\r\n            return (\r\n              <Box \r\n                key={stream.id} \r\n                sx={{ \r\n                  display: 'flex', \r\n                  gap: 1, \r\n                  alignItems: 'center' \r\n                }}\r\n              >\r\n                <TextField\r\n                  value={stream.name}\r\n                  onChange={(e) => updateRevenueStream(stream.id, 'name', e.target.value)}\r\n                  placeholder=\"Revenue stream name\"\r\n                  size=\"small\"\r\n                  sx={{ \r\n                    flex: 1,\r\n                    '& .MuiInputBase-input': {\r\n                      backgroundColor: itemEditable ? 'transparent' : 'transparent',\r\n                      cursor: itemEditable ? 'text' : 'default'\r\n                    }\r\n                  }}\r\n                  variant=\"outlined\"\r\n                  InputProps={{\r\n                    readOnly: !itemEditable\r\n                  }}\r\n                />\r\n                <TextField\r\n                  type=\"number\"\r\n                  value={stream.amount}\r\n                  onChange={(e) => updateRevenueStream(stream.id, 'amount', parseInt(e.target.value, 10) || 0)}\r\n                  placeholder=\"Amount\"\r\n                  size=\"small\"\r\n                  sx={{ \r\n                    width: '96px',\r\n                    '& .MuiInputBase-input': {\r\n                      backgroundColor: itemEditable ? 'transparent' : 'transparent',\r\n                      cursor: itemEditable ? 'text' : 'default'\r\n                    }\r\n                  }}\r\n                  variant=\"outlined\"\r\n                  InputProps={{\r\n                    readOnly: !itemEditable\r\n                  }}\r\n                />\r\n                {itemEditable && (\r\n                  <IconButton\r\n                    onClick={() => removeRevenueStream(stream.id)}\r\n                    size=\"small\"\r\n                    sx={{ \r\n                      color: 'error.main',\r\n                      '&:hover': {\r\n                        color: 'error.dark'\r\n                      }\r\n                    }}\r\n                  >\r\n                    <X size={16} />\r\n                  </IconButton>\r\n                )}\r\n                {!itemEditable && (\r\n                  <Box sx={{ width: 40, height: 40 }} /> \r\n                )}\r\n              </Box>\r\n            );\r\n          })}\r\n        </Stack>\r\n      </Box>\r\n      \r\n      <Button\r\n        variant=\"text\"\r\n        onClick={addRevenueStream}\r\n        startIcon={<Plus size={16} />}\r\n        sx={{ \r\n          color: 'primary.main',\r\n          justifyContent: 'flex-start',\r\n          '&:hover': {\r\n            color: 'primary.dark',\r\n            backgroundColor: 'primary.50'\r\n          }\r\n        }}\r\n      >\r\n        Add Revenue Stream\r\n      </Button>\r\n    </Box>\r\n  );\r\n};\r\n\r\nRevenueInput.propTypes = {\r\n  revenueStreams: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      amount: PropTypes.number.isRequired,\r\n    })\r\n  ).isRequired,\r\n  onUpdate: PropTypes.func.isRequired,\r\n};","import React from 'react';\r\nimport { Plus, X } from 'lucide-react';\r\nimport {\r\n  TextField,\r\n  Typography,\r\n  Button,\r\n  Box,\r\n  IconButton,\r\n  Stack\r\n} from '@mui/material';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const ExpenseInput = ({ expenses, onUpdate }) => {\r\n  const isEditable = (id) => id.startsWith('new_');\r\n\r\n  const addExpense = () => {\r\n    const expenseNames = ['Salaries', 'Rent', 'Marketing', 'Equipment', 'Utilities'];\r\n    const usedNames = expenses.map(e => e.name);\r\n    const availableNames = expenseNames.filter(name => !usedNames.includes(name));\r\n    const newName = availableNames.length > 0 ? availableNames[0] : `Expense ${expenses.length + 1}`;\r\n    \r\n    const newExpense = {\r\n      id: `new_${Date.now()}`,\r\n      name: newName,\r\n      amount: 0\r\n    };\r\n    onUpdate([...expenses, newExpense]);\r\n  };\r\n\r\n  const updateExpense = (id, field, value) => {\r\n    if (!isEditable(id)) return;\r\n    \r\n    const updated = expenses.map(expense =>\r\n      expense.id === id ? { ...expense, [field]: value } : expense\r\n    );\r\n    onUpdate(updated);\r\n  };\r\n\r\n  const removeExpense = (id) => {\r\n    if (!isEditable(id)) return;\r\n    \r\n    onUpdate(expenses.filter(expense => expense.id !== id));\r\n  };\r\n\r\n  return (\r\n    <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>\r\n      <Typography \r\n        variant=\"subtitle2\" \r\n        sx={{ \r\n          fontWeight: 500, \r\n          color: 'text.secondary',\r\n          fontSize: '0.875rem'\r\n        }}\r\n      >\r\n        Expenses\r\n      </Typography>\r\n      \r\n      <Box\r\n        sx={{\r\n          height: '192px',\r\n          overflowY: 'auto',\r\n          pr: 1, \r\n          '&::-webkit-scrollbar': {\r\n            width: '6px',\r\n          },\r\n          '&::-webkit-scrollbar-track': {\r\n            backgroundColor: 'transparent',\r\n          },\r\n          '&::-webkit-scrollbar-thumb': {\r\n            backgroundColor: 'rgba(0,0,0,0.2)',\r\n            borderRadius: '3px',\r\n          },\r\n        }}\r\n      >\r\n        <Stack spacing={1.5}>\r\n          {expenses.map((expense) => {\r\n            const itemEditable = isEditable(expense.id);\r\n            return (\r\n              <Box \r\n                key={expense.id} \r\n                sx={{ \r\n                  display: 'flex', \r\n                  gap: 1, \r\n                  alignItems: 'center' \r\n                }}\r\n              >\r\n                <TextField\r\n                  value={expense.name}\r\n                  onChange={(e) => updateExpense(expense.id, 'name', e.target.value)}\r\n                  placeholder=\"Expense name\"\r\n                  size=\"small\"\r\n                  sx={{ \r\n                    flex: 1,\r\n                    '& .MuiInputBase-input': {\r\n                      backgroundColor: itemEditable ? 'transparent' : 'transparent',\r\n                      cursor: itemEditable ? 'text' : 'default'\r\n                    }\r\n                  }}\r\n                  variant=\"outlined\"\r\n                  InputProps={{\r\n                    readOnly: !itemEditable\r\n                  }}\r\n                />\r\n                <TextField\r\n                  type=\"number\"\r\n                  value={expense.amount}\r\n                  onChange={(e) => updateExpense(expense.id, 'amount', parseInt(e.target.value, 10) || 0)}\r\n                  placeholder=\"Amount\"\r\n                  size=\"small\"\r\n                  sx={{ \r\n                    width: '96px',\r\n                    '& .MuiInputBase-input': {\r\n                      backgroundColor: itemEditable ? 'transparent' : 'transparent',\r\n                      cursor: itemEditable ? 'text' : 'default'\r\n                    }\r\n                  }}\r\n                  variant=\"outlined\"\r\n                  InputProps={{\r\n                    readOnly: !itemEditable\r\n                  }}\r\n                />\r\n                {itemEditable && (\r\n                  <IconButton\r\n                    onClick={() => removeExpense(expense.id)}\r\n                    size=\"small\"\r\n                    sx={{ \r\n                      color: 'error.main',\r\n                      '&:hover': {\r\n                        color: 'error.dark'\r\n                      }\r\n                    }}\r\n                  >\r\n                    <X size={16} />\r\n                  </IconButton>\r\n                )}\r\n                {!itemEditable && (\r\n                  <Box sx={{ width: 40, height: 40 }} /> \r\n                )}\r\n              </Box>\r\n            );\r\n          })}\r\n        </Stack>\r\n      </Box>\r\n      \r\n      <Button\r\n        variant=\"text\"\r\n        onClick={addExpense}\r\n        startIcon={<Plus size={16} />}\r\n        sx={{ \r\n          color: 'primary.main',\r\n          justifyContent: 'flex-start',\r\n          '&:hover': {\r\n            color: 'primary.dark',\r\n            backgroundColor: 'primary.50'\r\n          }\r\n        }}\r\n      >\r\n        Add Expense\r\n      </Button>\r\n    </Box>\r\n  );\r\n};\r\n\r\nExpenseInput.propTypes = {\r\n  expenses: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      amount: PropTypes.number.isRequired\r\n    })\r\n  ).isRequired,\r\n  onUpdate: PropTypes.func.isRequired\r\n};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n  Typography,\r\n  TextField,\r\n  Select,\r\n  MenuItem,\r\n  FormControl,\r\n  Box,\r\n  Grid,\r\n  Stack\r\n} from '@mui/material';\r\n\r\nexport const ScenarioSettings = ({ settings, onUpdate }) => {\r\n  const updateScenario = (scenario, field, value) => {\r\n    onUpdate({\r\n      ...settings,\r\n      [scenario]: {\r\n        ...settings[scenario],\r\n        [field]: value\r\n      }\r\n    });\r\n  };\r\n\r\n  const updatePeriod = (period) => {\r\n    onUpdate({\r\n      ...settings,\r\n      projectionPeriod: period\r\n    });\r\n  };\r\n\r\n  const renderScenarioSection = (title, scenarioKey) => (\r\n    <Box>\r\n      <Typography \r\n        variant=\"subtitle2\" \r\n        sx={{ \r\n          fontWeight: 500, \r\n          color: 'text.secondary',\r\n          fontSize: '0.875rem',\r\n          mb: 2\r\n        }}\r\n      >\r\n        {title}\r\n      </Typography>\r\n      <Grid container spacing={2}>\r\n        <Grid item xs={6}>\r\n          <Box>\r\n            <Typography \r\n              variant=\"caption\" \r\n              sx={{ \r\n                color: 'text.disabled',\r\n                fontSize: '0.75rem',\r\n                display: 'block',\r\n                mb: 0.5\r\n              }}\r\n            >\r\n              Revenue Growth %\r\n            </Typography>\r\n            <TextField\r\n              type=\"number\"\r\n              value={settings[scenarioKey].revenueGrowth}\r\n              onChange={(e) => updateScenario(scenarioKey, 'revenueGrowth', parseFloat(e.target.value) || 0)}\r\n              size=\"small\"\r\n              fullWidth\r\n              variant=\"outlined\"\r\n            />\r\n          </Box>\r\n        </Grid>\r\n        <Grid item xs={6}>\r\n          <Box>\r\n            <Typography \r\n              variant=\"caption\" \r\n              sx={{ \r\n                color: 'text.disabled',\r\n                fontSize: '0.75rem',\r\n                display: 'block',\r\n                mb: 0.5\r\n              }}\r\n            >\r\n              Expense Growth %\r\n            </Typography>\r\n            <TextField\r\n              type=\"number\"\r\n              value={settings[scenarioKey].expenseGrowth}\r\n              onChange={(e) => updateScenario(scenarioKey, 'expenseGrowth', parseFloat(e.target.value) || 0)}\r\n              size=\"small\"\r\n              fullWidth\r\n              variant=\"outlined\"\r\n            />\r\n          </Box>\r\n        </Grid>\r\n      </Grid>\r\n    </Box>\r\n  );\r\n\r\n  return (\r\n    <Stack spacing={3}>\r\n      {renderScenarioSection('Probable Case (Base)', 'probable')}\r\n      {renderScenarioSection('Best Case', 'best')}\r\n      {renderScenarioSection('Worst Case', 'worst')}\r\n      \r\n      <Box>\r\n        <Typography \r\n          variant=\"subtitle2\" \r\n          sx={{ \r\n            fontWeight: 500, \r\n            color: 'text.secondary',\r\n            fontSize: '0.875rem',\r\n            mb: 1\r\n          }}\r\n        >\r\n          Projection Period\r\n        </Typography>\r\n        <FormControl size=\"small\" fullWidth>\r\n          <Select\r\n            value={settings.projectionPeriod}\r\n            onChange={(e) => updatePeriod(e.target.value)}\r\n            variant=\"outlined\"\r\n          >\r\n            <MenuItem value={3}>3 Years</MenuItem>\r\n            <MenuItem value={5}>5 Years</MenuItem>\r\n            <MenuItem value={10}>10 Years</MenuItem>\r\n          </Select>\r\n        </FormControl>\r\n      </Box>\r\n    </Stack>\r\n  );\r\n};\r\n\r\nScenarioSettings.propTypes = {\r\n  settings: PropTypes.shape({\r\n    probable: PropTypes.shape({\r\n      revenueGrowth: PropTypes.number.isRequired,\r\n      expenseGrowth: PropTypes.number.isRequired\r\n    }).isRequired,\r\n    best: PropTypes.shape({\r\n      revenueGrowth: PropTypes.number.isRequired,\r\n      expenseGrowth: PropTypes.number.isRequired\r\n    }).isRequired,\r\n    worst: PropTypes.shape({\r\n      revenueGrowth: PropTypes.number.isRequired,\r\n      expenseGrowth: PropTypes.number.isRequired\r\n    }).isRequired,\r\n    projectionPeriod: PropTypes.number.isRequired\r\n  }).isRequired,\r\n  onUpdate: PropTypes.func.isRequired\r\n};","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n  Paper,\r\n  Typography,\r\n  Button,\r\n  Box,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Stack\r\n} from '@mui/material';\r\nimport { formatCurrency, formatPercentage } from 'src/utils/financialCalculations';\r\n\r\nexport const FinancialTable = ({\r\n  probableData,\r\n  bestData,\r\n  worstData\r\n}) => {\r\n  const [selectedScenario, setSelectedScenario] = useState('probable');\r\n\r\n  const getScenarioData = () => {\r\n    switch (selectedScenario) {\r\n      case 'best': return bestData;\r\n      case 'worst': return worstData;\r\n      default: return probableData;\r\n    }\r\n  };\r\n\r\n  const scenarioButtons = [\r\n    { \r\n      scenario: 'probable', \r\n      label: 'Probable', \r\n      activeColor: '#1976d2',\r\n      activeBgColor: '#e3f2fd'\r\n    },\r\n    { \r\n      scenario: 'best', \r\n      label: 'Best', \r\n      activeColor: '#2e7d32',\r\n      activeBgColor: '#e8f5e8'\r\n    },\r\n    { \r\n      scenario: 'worst', \r\n      label: 'Worst', \r\n      activeColor: '#d32f2f',\r\n      activeBgColor: '#ffebee'\r\n    }\r\n  ];\r\n\r\n  const currentData = getScenarioData();\r\n\r\n  return (\r\n    <Paper sx={{ borderRadius: 2, overflow: 'hidden' }}>\r\n      <Box\r\n        sx={{\r\n          p: 3,\r\n        }}\r\n      >\r\n        <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\r\n          <Typography variant=\"h6\" component=\"h3\" sx={{ fontWeight: 600 }}>\r\n            Financial Summary\r\n          </Typography>\r\n          <Stack direction=\"row\" spacing={1}>\r\n            {scenarioButtons.map(({ scenario, label, activeColor, activeBgColor }) => {\r\n              const isActive = selectedScenario === scenario;\r\n              return (\r\n                <Button\r\n                  key={scenario}\r\n                  type=\"button\"\r\n                  onClick={() => setSelectedScenario(scenario)}\r\n                  variant={isActive ? \"contained\" : \"outlined\"}\r\n                  size=\"small\"\r\n                  sx={{\r\n                    minWidth: 80,\r\n                    fontWeight: 500,\r\n                    textTransform: 'none',\r\n                    ...(isActive ? {\r\n                      backgroundColor: activeBgColor,\r\n                      color: activeColor,\r\n                      '&:hover': {\r\n                        backgroundColor: activeBgColor,\r\n                        opacity: 0.8\r\n                      }\r\n                    } : {\r\n                      color: '#666',\r\n                      borderColor: '#e0e0e0',\r\n                      '&:hover': {\r\n                        backgroundColor: '#e0e0e0'\r\n                      }\r\n                    })\r\n                  }}\r\n                >\r\n                  {label}\r\n                </Button>\r\n              );\r\n            })}\r\n          </Stack>\r\n        </Box>\r\n      </Box>\r\n      \r\n      <TableContainer>\r\n        <Table sx={{ minWidth: 650 }}>\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell sx={{ fontWeight: 600, textTransform: 'uppercase', fontSize: '0.75rem' }}>\r\n                Year\r\n              </TableCell>\r\n              <TableCell sx={{ fontWeight: 600, textTransform: 'uppercase', fontSize: '0.75rem' }}>\r\n                Total Revenue\r\n              </TableCell>\r\n              <TableCell sx={{ fontWeight: 600, textTransform: 'uppercase', fontSize: '0.75rem' }}>\r\n                Total Expenses\r\n              </TableCell>\r\n              <TableCell sx={{ fontWeight: 600, textTransform: 'uppercase', fontSize: '0.75rem' }}>\r\n                Net Profit\r\n              </TableCell>\r\n              <TableCell sx={{ fontWeight: 600, textTransform: 'uppercase', fontSize: '0.75rem' }}>\r\n                Profit Margin\r\n              </TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {currentData.map((data) => (\r\n              <TableRow \r\n                key={data.year}\r\n                sx={{\r\n                  '&:hover': {\r\n                    backgroundColor: '#919EAB'\r\n                  }\r\n                }}\r\n              >\r\n                <TableCell sx={{ fontWeight: 500, fontSize: '0.875rem' }}>\r\n                  Year {data.year}\r\n                </TableCell>\r\n                <TableCell sx={{ fontSize: '0.875rem' }}>\r\n                  {formatCurrency(data.totalRevenue)}\r\n                </TableCell>\r\n                <TableCell sx={{ fontSize: '0.875rem' }}>\r\n                  {formatCurrency(data.totalExpenses)}\r\n                </TableCell>\r\n                <TableCell \r\n                  sx={{ \r\n                    fontWeight: 500,\r\n                    fontSize: '0.875rem',\r\n                    color: data.netProfit >= 0 ? '#2e7d32' : '#d32f2f'\r\n                  }}\r\n                >\r\n                  {formatCurrency(data.netProfit)}\r\n                </TableCell>\r\n                <TableCell sx={{ fontSize: '0.875rem' }}>\r\n                  {formatPercentage(data.profitMargin)}\r\n                </TableCell>\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nFinancialTable.propTypes = {\r\n  probableData: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      year: PropTypes.number.isRequired,\r\n      totalRevenue: PropTypes.number.isRequired,\r\n      totalExpenses: PropTypes.number.isRequired,\r\n      netProfit: PropTypes.number.isRequired,\r\n      profitMargin: PropTypes.number.isRequired\r\n    })\r\n  ).isRequired,\r\n  bestData: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      year: PropTypes.number.isRequired,\r\n      totalRevenue: PropTypes.number.isRequired,\r\n      totalExpenses: PropTypes.number.isRequired,\r\n      netProfit: PropTypes.number.isRequired,\r\n      profitMargin: PropTypes.number.isRequired\r\n    })\r\n  ).isRequired,\r\n  worstData: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      year: PropTypes.number.isRequired,\r\n      totalRevenue: PropTypes.number.isRequired,\r\n      totalExpenses: PropTypes.number.isRequired,\r\n      netProfit: PropTypes.number.isRequired,\r\n      profitMargin: PropTypes.number.isRequired\r\n    })\r\n  ).isRequired\r\n};","import React from 'react';\r\nimport {\r\n  BarChart,\r\n  Bar,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  ResponsiveContainer,\r\n  LineChart,\r\n  Line,\r\n  PieChart,\r\n  Pie,\r\n  Cell\r\n} from 'recharts';\r\nimport {\r\n  Typography,\r\n  Box,\r\n  Paper,\r\n  Grid,\r\n  Stack\r\n} from '@mui/material';\r\nimport PropTypes from 'prop-types';\r\nimport { formatCurrency } from 'src/utils/financialCalculations';\r\n\r\nconst CustomTooltip = ({ active, payload, label }) => {\r\n  if (active && payload && payload.length) {\r\n    return (\r\n      <Paper\r\n        elevation={3}\r\n        sx={{\r\n          p: 2,\r\n          backgroundColor: 'white',\r\n          border: '1px solid #e0e0e0'\r\n        }}\r\n      >\r\n        <Typography variant=\"subtitle2\" sx={{ fontWeight: 600, mb: 1 }}>\r\n          {label}\r\n        </Typography>\r\n        {payload.map((entry, index) => (\r\n          <Typography\r\n            key={index}\r\n            variant=\"body2\"\r\n            sx={{ color: entry.color }}\r\n          >\r\n            {entry.dataKey}: {formatCurrency(entry.value)}\r\n          </Typography>\r\n        ))}\r\n      </Paper>\r\n    );\r\n  }\r\n  return null;\r\n};\r\n\r\nCustomTooltip.propTypes = {\r\n  active: PropTypes.bool,\r\n  payload: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      dataKey: PropTypes.string,\r\n      value: PropTypes.number,\r\n      color: PropTypes.string\r\n    })\r\n  ),\r\n  label: PropTypes.string\r\n};\r\n\r\nconst LegendItem = ({ color, label }) => (\r\n  <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n    <Box\r\n      sx={{\r\n        width: 16,\r\n        height: 16,\r\n        backgroundColor: color,\r\n        borderRadius: 1\r\n      }}\r\n    />\r\n    <Typography variant=\"body2\" sx={{ color: 'text.secondary' }}>\r\n      {label}\r\n    </Typography>\r\n  </Stack>\r\n);\r\n\r\nLegendItem.propTypes = {\r\n  color: PropTypes.string.isRequired,\r\n  label: PropTypes.string.isRequired\r\n};\r\n\r\nexport const FinancialCharts = ({\r\n  probableData,\r\n  bestData,\r\n  worstData,\r\n  revenueStreams\r\n}) => {\r\n  const revenueVsExpensesData = probableData.map(data => ({\r\n    year: `Year ${data.year}`,\r\n    Revenue: data.totalRevenue,\r\n    Expenses: data.totalExpenses\r\n  }));\r\n\r\n  const netProfitComparisonData = probableData.map((prob, index) => ({\r\n    year: `Year ${prob.year}`,\r\n    'Probable Case': prob.netProfit,\r\n    'Best Case': bestData[index]?.netProfit || 0,\r\n    'Worst Case': worstData[index]?.netProfit || 0\r\n  }));\r\n\r\n  const pieData = revenueStreams.map((stream, index) => ({\r\n    name: stream.name,\r\n    value: stream.amount,\r\n    color: ['#8B5CF6', '#06D6A0', '#FFB800'][index % 3]\r\n  }));\r\n\r\n  return (\r\n    <Grid container spacing={3}>\r\n      <Grid item xs={12} lg={6}>\r\n        <Paper sx={{ p: 3, height: '100%' }}>\r\n          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\r\n            <Typography variant=\"h6\" component=\"h3\">\r\n              Revenue vs Expenses\r\n            </Typography>\r\n            <Stack direction=\"row\" spacing={2}>\r\n              <LegendItem color=\"#8B5CF6\" label=\"Revenue\" />\r\n              <LegendItem color=\"#EF4444\" label=\"Expenses\" />\r\n            </Stack>\r\n          </Box>\r\n          <ResponsiveContainer width=\"100%\" height={300}>\r\n            <BarChart data={revenueVsExpensesData}>\r\n              <CartesianGrid strokeDasharray=\"3 3\" />\r\n              <XAxis dataKey=\"year\" />\r\n              <YAxis tickFormatter={(value) => `$${(value / 1000).toFixed(0)}k`} />\r\n              <Tooltip content={<CustomTooltip />} />\r\n              <Bar dataKey=\"Revenue\" fill=\"#8B5CF6\" />\r\n              <Bar dataKey=\"Expenses\" fill=\"#EF4444\" />\r\n            </BarChart>\r\n          </ResponsiveContainer>\r\n        </Paper>\r\n      </Grid>\r\n\r\n      <Grid item xs={12} lg={6}>\r\n        <Paper sx={{ p: 3, height: '100%' }}>\r\n          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\r\n            <Typography variant=\"h6\" component=\"h3\">\r\n              Net Profit Comparison\r\n            </Typography>\r\n            <Stack direction=\"row\" spacing={2}>\r\n              <LegendItem color=\"#8B5CF6\" label=\"Probable\" />\r\n              <LegendItem color=\"#06D6A0\" label=\"Best\" />\r\n              <LegendItem color=\"#EF4444\" label=\"Worst\" />\r\n            </Stack>\r\n          </Box>\r\n          <ResponsiveContainer width=\"100%\" height={300}>\r\n            <LineChart data={netProfitComparisonData}>\r\n              <CartesianGrid strokeDasharray=\"3 3\" />\r\n              <XAxis dataKey=\"year\" />\r\n              <YAxis tickFormatter={(value) => `$${(value / 1000).toFixed(0)}k`} />\r\n              <Tooltip content={<CustomTooltip />} />\r\n              <Line type=\"monotone\" dataKey=\"Probable Case\" stroke=\"#8B5CF6\" strokeWidth={2} />\r\n              <Line type=\"monotone\" dataKey=\"Best Case\" stroke=\"#06D6A0\" strokeWidth={2} />\r\n              <Line type=\"monotone\" dataKey=\"Worst Case\" stroke=\"#EF4444\" strokeWidth={2} />\r\n            </LineChart>\r\n          </ResponsiveContainer>\r\n        </Paper>\r\n      </Grid>\r\n\r\n      <Grid item xs={12}>\r\n        <Paper sx={{ p: 3 }}>\r\n          <Typography variant=\"h6\" component=\"h3\" sx={{ mb: 2 }}>\r\n            Revenue Breakdown\r\n          </Typography>\r\n          <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\r\n            <ResponsiveContainer width=\"100%\" height={300}>\r\n              <PieChart>\r\n                <Pie\r\n                  data={pieData}\r\n                  cx=\"50%\"\r\n                  cy=\"50%\"\r\n                  innerRadius={60}\r\n                  outerRadius={120}\r\n                  paddingAngle={5}\r\n                  dataKey=\"value\"\r\n                >\r\n                  {pieData.map((entry, index) => (\r\n                    <Cell key={`cell-${index}`} fill={entry.color} />\r\n                  ))}\r\n                </Pie>\r\n                <Tooltip formatter={(value) => formatCurrency(value)} />\r\n              </PieChart>\r\n            </ResponsiveContainer>\r\n            <Box sx={{ ml: 4 }}>\r\n              {pieData.map((entry, index) => (\r\n                <Box key={index} sx={{ mb: 1 }}>\r\n                  <LegendItem color={entry.color} label={entry.name} />\r\n                </Box>\r\n              ))}\r\n            </Box>\r\n          </Box>\r\n        </Paper>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nFinancialCharts.propTypes = {\r\n  probableData: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      year: PropTypes.number.isRequired,\r\n      totalRevenue: PropTypes.number.isRequired,\r\n      totalExpenses: PropTypes.number.isRequired,\r\n      netProfit: PropTypes.number.isRequired\r\n    })\r\n  ).isRequired,\r\n  bestData: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      year: PropTypes.number.isRequired,\r\n      totalRevenue: PropTypes.number.isRequired,\r\n      totalExpenses: PropTypes.number.isRequired,\r\n      netProfit: PropTypes.number.isRequired\r\n    })\r\n  ).isRequired,\r\n  worstData: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      year: PropTypes.number.isRequired,\r\n      totalRevenue: PropTypes.number.isRequired,\r\n      totalExpenses: PropTypes.number.isRequired,\r\n      netProfit: PropTypes.number.isRequired\r\n    })\r\n  ).isRequired,\r\n  revenueStreams: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      amount: PropTypes.number.isRequired\r\n    })\r\n  ).isRequired\r\n};","import React, { useState, useMemo, useEffect } from \"react\";\r\nimport { Download, Calculator } from \"lucide-react\";\r\nimport {\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n  Typography,\r\n  Box,\r\n  Grid,\r\n  Container,\r\n  Stack,\r\n} from \"@mui/material\";\r\nimport { toast } from \"react-toastify\";\r\nimport { useAuthContext } from \"src/auth/hooks\";\r\nimport {\r\n  calculateScenarioResults,\r\n  divideRevenue,\r\n} from \"src/utils/financialCalculations\";\r\nimport { GetAllRevenueData, GetCOA } from \"src/api/transaction\";\r\nimport { RevenueInput } from \"./RevenuInput\";\r\nimport { ExpenseInput } from \"./ExpenseInput\";\r\nimport { ScenarioSettings } from \"./ScenarioSettings\";\r\nimport { FinancialTable } from \"./FinancialTable\";\r\nimport { FinancialCharts } from \"./FinancialCharts\";\r\n\r\nexport default function ModelPage() {\r\n  const { user } = useAuthContext();\r\n\r\n  const [revenueStreams, setRevenueStreams] = useState([\r\n    { id: \"1\", name: \"Product A\", amount: 50000 },\r\n    { id: \"2\", name: \"Product B\", amount: 35000 },\r\n    { id: \"3\", name: \"Service C\", amount: 25000 },\r\n  ]);\r\n\r\n  const [expenses, setExpenses] = useState([\r\n    { id: \"1\", name: \"Salaries\", amount: 40000 },\r\n    { id: \"2\", name: \"Rent\", amount: 12000 },\r\n    { id: \"3\", name: \"Marketing\", amount: 8000 },\r\n  ]);\r\n\r\n  const [scenarioSettings, setScenarioSettings] = useState({\r\n    probable: { revenueGrowth: 5, expenseGrowth: 3 },\r\n    best: { revenueGrowth: 10, expenseGrowth: 2 },\r\n    worst: { revenueGrowth: 2, expenseGrowth: 5 },\r\n    projectionPeriod: 5,\r\n  });\r\n\r\n  const scenarioResults = useMemo(\r\n    () => calculateScenarioResults(revenueStreams, expenses, scenarioSettings),\r\n    [revenueStreams, expenses, scenarioSettings]\r\n  );\r\n\r\n  const handleCalculate = () => {\r\n    toast.success(\"Scenarios calculated successfully!\");\r\n  };\r\n\r\n  const handleExport = () => {\r\n    toast.success(\"Financial data exported!\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchForecast = async () => {\r\n      try {\r\n        let result = {}\r\n        const userId = user.role === 1 ? user._id : user.parent;\r\n        const response = await GetAllRevenueData(userId);\r\n        if (response.type === \"success\") {\r\n          toast.success(\"History successfully loaded!\", { theme: \"colored\" });\r\n        } else {\r\n          toast.error(\"Update Forecast Error\", { theme: \"colored\" });\r\n        }\r\n\r\n        const coa = await GetCOA(userId);\r\n        if (coa.type === \"success\") {\r\n          toast.success(\"COA Successfully Upload!\", { theme: \"colored\" });\r\n          if(response.data.data.length > 0 && coa.data.length > 0) {\r\n            result = divideRevenue(response.data.data, coa.data);\r\n            setRevenueStreams(result.revenueList)\r\n            setExpenses(result.expenseList);\r\n          }\r\n        } else {\r\n          toast.error(\"COA Upload Error\", { theme: \"colored\" });\r\n        }\r\n      } catch (err) {\r\n        console.log(\"fetchForecast Error:\", err);\r\n      }\r\n    };\r\n    fetchForecast();\r\n  }, [user._id, user.parent, user.role]);\r\n  return (\r\n    <Box>\r\n      <Box\r\n        sx={{\r\n          px: 1,\r\n          py: 1,\r\n        }}\r\n      >\r\n        <Typography\r\n          variant=\"h3\"\r\n          component=\"h1\"\r\n          sx={{ fontWeight: \"bold\", mb: 1 }}\r\n        >\r\n          Financial Scenario Analysis\r\n        </Typography>\r\n        <Typography\r\n          variant=\"body1\"\r\n          sx={{\r\n            fontSize: \"1rem\",\r\n          }}\r\n        >\r\n          Analyze different financial scenarios by adjusting revenue and expense\r\n          inputs\r\n        </Typography>\r\n      </Box>\r\n      <Container maxWidth=\"xl\" sx={{ px: 3, py: 4 }}>\r\n        <Grid container spacing={4}>\r\n          <Grid item xs={12} lg={4}>\r\n            <Box\r\n              sx={{\r\n                display: \"flex\",\r\n                flexDirection: \"column\",\r\n              }}\r\n            >\r\n              <Card\r\n                sx={{\r\n                  flex: 1,\r\n                  display: \"flex\",\r\n                  flexDirection: \"column\",\r\n                }}\r\n              >\r\n                <CardHeader sx={{ flexShrink: 0 }}>\r\n                  <Typography variant=\"h6\" component=\"div\">\r\n                    Scenario Inputs\r\n                  </Typography>\r\n                </CardHeader>\r\n                <CardContent\r\n                  sx={{\r\n                    flex: 1,\r\n                    overflow: \"hidden\",\r\n                    display: \"flex\",\r\n                    flexDirection: \"column\",\r\n                  }}\r\n                >\r\n                  <Box\r\n                    sx={{\r\n                      height: \"100%\",\r\n                      overflowY: \"auto\",\r\n                      pr: 2,\r\n                      \"&::-webkit-scrollbar\": {\r\n                        width: \"6px\",\r\n                      },\r\n                      \"&::-webkit-scrollbar-track\": {\r\n                        backgroundColor: \"transparent\",\r\n                      },\r\n                      \"&::-webkit-scrollbar-thumb\": {\r\n                        backgroundColor: \"rgba(0,0,0,0.2)\",\r\n                        borderRadius: \"3px\",\r\n                      },\r\n                    }}\r\n                  >\r\n                    <Stack spacing={3}>\r\n                      <RevenueInput\r\n                        revenueStreams={revenueStreams}\r\n                        onUpdate={setRevenueStreams}\r\n                      />\r\n                      <ExpenseInput\r\n                        expenses={expenses}\r\n                        onUpdate={setExpenses}\r\n                      />\r\n                    </Stack>\r\n                  </Box>\r\n                </CardContent>\r\n              </Card>\r\n\r\n              <Card sx={{ mt: 3 }}>\r\n                <CardHeader>\r\n                  <Typography variant=\"h6\" component=\"div\">\r\n                    Scenario Settings\r\n                  </Typography>\r\n                </CardHeader>\r\n                <CardContent>\r\n                  <ScenarioSettings\r\n                    settings={scenarioSettings}\r\n                    onUpdate={setScenarioSettings}\r\n                  />\r\n                </CardContent>\r\n              </Card>\r\n\r\n              <Stack direction=\"row\" spacing={2} sx={{ mt: 3 }}>\r\n                <Button\r\n                  onClick={handleCalculate}\r\n                  variant=\"contained\"\r\n                  startIcon={<Calculator size={16} />}\r\n                  color=\"secondary\"\r\n                >\r\n                  Calculate Scenarios\r\n                </Button>\r\n                <Button\r\n                  onClick={handleExport}\r\n                  variant=\"contained\"\r\n                  startIcon={<Download size={16} />}\r\n                  color=\"primary\"\r\n                >\r\n                  Export\r\n                </Button>\r\n              </Stack>\r\n            </Box>\r\n          </Grid>\r\n\r\n          <Grid item xs={12} lg={8}>\r\n            <Stack spacing={3}>\r\n              <FinancialTable\r\n                probableData={scenarioResults.probable}\r\n                bestData={scenarioResults.best}\r\n                worstData={scenarioResults.worst}\r\n              />\r\n\r\n              <FinancialCharts\r\n                probableData={scenarioResults.probable}\r\n                bestData={scenarioResults.best}\r\n                worstData={scenarioResults.worst}\r\n                revenueStreams={revenueStreams}\r\n              />\r\n            </Stack>\r\n          </Grid>\r\n        </Grid>\r\n      </Container>\r\n    </Box>\r\n  );\r\n}\r\n","import { Helmet } from 'react-helmet-async';\r\n// sections\r\nimport ModelPage from 'src/sections/model';\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function Page() {\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title> ModelPage </title>\r\n      </Helmet>\r\n      <ModelPage/>\r\n    </>\r\n  );\r\n}\r\n"],"names":["GetRevenueByMonth","async","result","type","data","axios","post","endpoints","revenue","getRevenueByMonth","then","res","catch","err","error","console","GetRevenue","getRevenue","GetBalanceSheet","balanceSheet","getBalanceSheet","GetBalanceSheetByMonth","getBalanceSheetByMonth","GetCOA","coa","getCOA","userId","CreateRevenue","create","log","CreateBalanceSheet","CreateCOA","GetAllRevenueData","getAllRevenue","calculateScenarioResults","revenueStreams","expenses","settings","baseRevenue","reduce","sum","stream","amount","baseExpenses","expense","results","probable","best","worst","forEach","scenario","scenarioData","yearlyData","year","projectionPeriod","totalRevenue","revenueGrowth","totalExpenses","expenseGrowth","netProfit","profitMargin","push","formatCurrency","Intl","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits","format","divideRevenue","arguments","length","undefined","setTotalResult","newItem","flag","ritem","name","eitem","rItem","cItem","accountId","id","code","revenueList","expenseList","RevenueInput","_ref","onUpdate","isEditable","startsWith","updateRevenueStream","field","value","updated","map","_objectSpread","_jsxs","Box","sx","display","flexDirection","gap","children","_jsx","Typography","variant","fontWeight","color","fontSize","height","overflowY","pr","width","backgroundColor","borderRadius","Stack","spacing","itemEditable","alignItems","TextField","onChange","e","target","placeholder","size","flex","cursor","InputProps","readOnly","parseInt","IconButton","onClick","removeRevenueStream","filter","X","Button","addRevenueStream","newStream","concat","Date","now","String","fromCharCode","startIcon","Plus","justifyContent","ExpenseInput","updateExpense","removeExpense","addExpense","usedNames","availableNames","includes","newName","newExpense","ScenarioSettings","updateScenario","renderScenarioSection","title","scenarioKey","mb","Grid","container","item","xs","parseFloat","fullWidth","FormControl","Select","updatePeriod","period","MenuItem","FinancialTable","probableData","bestData","worstData","selectedScenario","setSelectedScenario","useState","currentData","getScenarioData","Paper","overflow","p","component","direction","label","activeColor","activeBgColor","_ref2","isActive","minWidth","textTransform","opacity","borderColor","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","toFixed","CustomTooltip","active","payload","elevation","border","entry","index","dataKey","LegendItem","FinancialCharts","_ref3","revenueVsExpensesData","Revenue","Expenses","netProfitComparisonData","prob","_bestData$index","_worstData$index","pieData","lg","ResponsiveContainer","BarChart","CartesianGrid","strokeDasharray","XAxis","YAxis","tickFormatter","Tooltip","content","Bar","fill","LineChart","Line","stroke","strokeWidth","PieChart","Pie","cx","cy","innerRadius","outerRadius","paddingAngle","Cell","formatter","ml","ModelPage","user","useAuthContext","setRevenueStreams","setExpenses","scenarioSettings","setScenarioSettings","scenarioResults","useMemo","useEffect","role","_id","parent","response","toast","success","theme","fetchForecast","px","py","Container","maxWidth","Card","CardHeader","flexShrink","CardContent","mt","handleCalculate","Calculator","handleExport","Download","Page","_Fragment","Helmet"],"sourceRoot":""}