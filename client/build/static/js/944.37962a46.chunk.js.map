{"version":3,"file":"static/js/944.37962a46.chunk.js","mappings":"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","sources":["api/auth.js","sections/auth/reset-password/reset-password-view.js","pages/auth/reset-password.js"],"sourcesContent":["import axios, { endpoints } from 'src/utils/axios';\r\n\r\nexport const forgotPassword = async (email) => {\r\n  try {\r\n    let result = '';\r\n    await axios.post(endpoints.auth.forgotPassword, { email })\r\n      .then(() => {\r\n        result = 'success';\r\n      })\r\n      .catch((err) => {\r\n        result = err?.response?.data?.message || 'Failed to send reset email';\r\n      });\r\n    if (result !== 'success') throw new Error(result);\r\n    return { message: 'Password reset link sent successfully' };\r\n  } catch (error) {\r\n    console.error('Error in forgotPassword:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const verifyResetToken = async (token) => {\r\n  try {\r\n    let result = { type: '', data: {} };\r\n    await axios.get(`${endpoints.auth.verifyToken}/${token}`)\r\n      .then((res) => {\r\n        result = { type: 'success', data: res.data };\r\n      })\r\n      .catch((err) => {\r\n        const msg = err?.response?.data?.message || 'Invalid or expired token';\r\n        result = { type: 'error', data: msg };\r\n      });\r\n    if (result.type === 'error') throw new Error(result.data);\r\n    return result.data;\r\n  } catch (error) {\r\n    console.error('Error in verifyResetToken:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const resetPassword = async (token, password) => {\r\n  try {\r\n    let result = '';\r\n    await axios.post(`${endpoints.auth.resetPassword}`, {password, token })\r\n      .then(() => {\r\n        result = 'success';\r\n      })\r\n      .catch((err) => {\r\n        result = err?.response?.data?.message || 'Failed to reset password';\r\n      });\r\n    if (result !== 'success') throw new Error(result);\r\n    return { message: 'Password has been reset successfully' };\r\n  } catch (error) {\r\n    console.error('Error in resetPassword:', error);\r\n    throw error;\r\n  }\r\n};\r\n","import * as Yup from 'yup';\r\nimport { useState, useEffect } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport { LoadingButton } from '@mui/lab';\r\nimport Alert from '@mui/material/Alert';\r\nimport Stack from '@mui/material/Stack';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport InputAdornment from '@mui/material/InputAdornment';\r\nimport Box from \"@mui/material/Box\";\r\nimport { paths } from 'src/routes/paths';\r\nimport { useRouter, useParams } from 'src/routes/hooks';\r\nimport { useBoolean } from 'src/hooks/use-boolean';\r\nimport Iconify from 'src/components/iconify';\r\nimport FormProvider, { RHFTextField } from 'src/components/hook-form';\r\nimport { resetPassword, verifyResetToken } from 'src/api/auth';\r\n\r\nexport default function ResetPasswordView() {\r\n  const router = useRouter();\r\n  const { token } = useParams();\r\n  \r\n  const [isValidToken, setIsValidToken] = useState(false);\r\n  const [isTokenVerifying, setIsTokenVerifying] = useState(true);\r\n  const [tokenError, setTokenError] = useState('');\r\n  const [successMsg, setSuccessMsg] = useState('');\r\n  const [errorMsg, setErrorMsg] = useState('');\r\n  \r\n  const password = useBoolean();\r\n\r\n  useEffect(() => {\r\n    const verifyToken = async () => {\r\n      try {\r\n        await verifyResetToken(token);\r\n        setIsValidToken(true);\r\n        setTokenError('');\r\n      } catch (error) {\r\n        setIsValidToken(false);\r\n        setTokenError(\r\n          typeof error === 'string' ? error : error.message || 'Token is invalid or has expired'\r\n        );\r\n      } finally {\r\n        setIsTokenVerifying(false);\r\n      }\r\n    };\r\n\r\n    if (token) {\r\n      verifyToken();\r\n    }\r\n  }, [token]);\r\n\r\n  const ResetPasswordSchema = Yup.object().shape({\r\n    password: Yup.string()\r\n      .required('Password is required')\r\n      .min(6, 'Password must be at least 6 characters'),\r\n    confirmPassword: Yup.string()\r\n      .required('Confirm password is required')\r\n      .oneOf([Yup.ref('password')], 'Passwords must match'),\r\n  });\r\n\r\n  const methods = useForm({\r\n    resolver: yupResolver(ResetPasswordSchema),\r\n    defaultValues: {\r\n      password: '',\r\n      confirmPassword: '',\r\n    },\r\n  });\r\n\r\n  const {\r\n    reset,\r\n    handleSubmit,\r\n    formState: { isSubmitting },\r\n  } = methods;\r\n\r\n  const onSubmit = handleSubmit(async (data) => {\r\n    try {\r\n      await resetPassword(token, data.password);\r\n      reset();\r\n      setSuccessMsg('Password reset successfully!');\r\n      setErrorMsg('');\r\n      \r\n      // Redirect to login after 3 seconds\r\n      setTimeout(() => {\r\n        router.push(paths.auth.jwt.login);\r\n      }, 3000);\r\n    } catch (error) {\r\n      console.error(error);\r\n      setErrorMsg(typeof error === 'string' ? error : error.message);\r\n      setSuccessMsg('');\r\n    }\r\n  });\r\n\r\n  if (isTokenVerifying) {\r\n    return (\r\n      <Stack spacing={3} sx={{ mb: 5, alignItems: 'center' }}>\r\n        <Typography variant=\"h4\">Verifying reset link...</Typography>\r\n      </Stack>\r\n    );\r\n  }\r\n\r\n  if (!isValidToken) {\r\n    return (\r\n      <Stack spacing={3} sx={{ mb: 5 }}>\r\n        <Typography variant=\"h4\">Link Invalid</Typography>\r\n        <Alert severity=\"error\">\r\n          {tokenError || 'Sorry, this password reset link is invalid or has expired.'}\r\n        </Alert>\r\n        <Typography variant=\"body2\">\r\n          Please request a new password reset link.\r\n        </Typography>\r\n      </Stack>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        height: \"100vh\",\r\n      }}\r\n    >\r\n      <Box sx={{width:500}}>\r\n        <FormProvider methods={methods} onSubmit={onSubmit}>\r\n          <Stack spacing={3} sx={{ mb: 5 }}>\r\n            <Typography variant=\"h4\">Reset Your Password</Typography>\r\n            \r\n            <Typography variant=\"body2\" sx={{ color: 'text.secondary' }}>\r\n              Please create a new password for your account.\r\n            </Typography>\r\n          </Stack>\r\n\r\n          {!!successMsg && <Alert severity=\"success\">{successMsg}</Alert>}\r\n          {!!errorMsg && <Alert severity=\"error\">{errorMsg}</Alert>}\r\n\r\n          <Stack spacing={3}>\r\n            <RHFTextField\r\n              name=\"password\"\r\n              label=\"New Password\"\r\n              type={password.value ? 'text' : 'password'}\r\n              InputProps={{\r\n                endAdornment: (\r\n                  <InputAdornment position=\"end\">\r\n                    <IconButton onClick={password.onToggle} edge=\"end\">\r\n                      <Iconify icon={password.value ? 'solar:eye-bold' : 'solar:eye-closed-bold'} />\r\n                    </IconButton>\r\n                  </InputAdornment>\r\n                ),\r\n              }}\r\n            />\r\n\r\n            <RHFTextField\r\n              name=\"confirmPassword\"\r\n              label=\"Confirm New Password\"\r\n              type={password.value ? 'text' : 'password'}\r\n              InputProps={{\r\n                endAdornment: (\r\n                  <InputAdornment position=\"end\">\r\n                    <IconButton onClick={password.onToggle} edge=\"end\">\r\n                      <Iconify icon={password.value ? 'solar:eye-bold' : 'solar:eye-closed-bold'} />\r\n                    </IconButton>\r\n                  </InputAdornment>\r\n                ),\r\n              }}\r\n            />\r\n\r\n            <LoadingButton\r\n              fullWidth\r\n              size=\"large\"\r\n              type=\"submit\"\r\n              variant=\"contained\"\r\n              loading={isSubmitting}\r\n            >\r\n              Reset Password\r\n            </LoadingButton>\r\n          </Stack>\r\n        </FormProvider>\r\n      </Box>\r\n    </Box>\r\n  );\r\n}","import { Helmet } from 'react-helmet-async';\r\n\r\nimport ResetPasswordView from 'src/sections/auth/reset-password/reset-password-view';\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function ResetPasswordPage() {\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title> Reset Password | Revenue Dashboard</title>\r\n      </Helmet>\r\n\r\n      <ResetPasswordView />\r\n    </>\r\n  );\r\n}"],"names":["forgotPassword","async","result","axios","post","endpoints","auth","email","then","catch","err","_err$response","_err$response$data","response","data","message","Error","error","console","verifyResetToken","type","get","concat","verifyToken","token","res","_err$response2","_err$response2$data","msg","resetPassword","password","_err$response3","_err$response3$data","ResetPasswordView","router","useRouter","useParams","isValidToken","setIsValidToken","useState","isTokenVerifying","setIsTokenVerifying","tokenError","setTokenError","successMsg","setSuccessMsg","errorMsg","setErrorMsg","useBoolean","useEffect","ResetPasswordSchema","Yup","shape","required","min","confirmPassword","oneOf","methods","useForm","resolver","yupResolver","defaultValues","reset","handleSubmit","formState","isSubmitting","onSubmit","setTimeout","push","paths","jwt","login","_jsx","Stack","spacing","sx","mb","alignItems","children","Typography","variant","Box","display","justifyContent","height","width","_jsxs","FormProvider","color","Alert","severity","RHFTextField","name","label","value","InputProps","endAdornment","InputAdornment","position","IconButton","onClick","onToggle","edge","Iconify","icon","LoadingButton","fullWidth","size","loading","ResetPasswordPage","_Fragment","Helmet"],"sourceRoot":""}