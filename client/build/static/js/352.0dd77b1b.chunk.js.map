{"version":3,"file":"static/js/352.0dd77b1b.chunk.js","mappings":"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","sources":["api/auth.js","sections/auth/forgot-password/forgot-password-view.js","pages/auth/forgot-password.js"],"sourcesContent":["import axios, { endpoints } from 'src/utils/axios';\r\n\r\nexport const forgotPassword = async (email) => {\r\n  try {\r\n    let result = '';\r\n    await axios.post(endpoints.auth.forgotPassword, { email })\r\n      .then(() => {\r\n        result = 'success';\r\n      })\r\n      .catch((err) => {\r\n        result = err?.response?.data?.message || 'Failed to send reset email';\r\n      });\r\n    if (result !== 'success') throw new Error(result);\r\n    return { message: 'Password reset link sent successfully' };\r\n  } catch (error) {\r\n    console.error('Error in forgotPassword:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const verifyResetToken = async (token) => {\r\n  try {\r\n    let result = { type: '', data: {} };\r\n    await axios.get(`${endpoints.auth.verifyToken}/${token}`)\r\n      .then((res) => {\r\n        result = { type: 'success', data: res.data };\r\n      })\r\n      .catch((err) => {\r\n        const msg = err?.response?.data?.message || 'Invalid or expired token';\r\n        result = { type: 'error', data: msg };\r\n      });\r\n    if (result.type === 'error') throw new Error(result.data);\r\n    return result.data;\r\n  } catch (error) {\r\n    console.error('Error in verifyResetToken:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const resetPassword = async (token, password) => {\r\n  try {\r\n    let result = '';\r\n    await axios.post(`${endpoints.auth.resetPassword}`, {password, token })\r\n      .then(() => {\r\n        result = 'success';\r\n      })\r\n      .catch((err) => {\r\n        result = err?.response?.data?.message || 'Failed to reset password';\r\n      });\r\n    if (result !== 'success') throw new Error(result);\r\n    return { message: 'Password has been reset successfully' };\r\n  } catch (error) {\r\n    console.error('Error in resetPassword:', error);\r\n    throw error;\r\n  }\r\n};\r\n","import * as Yup from \"yup\";\r\nimport { useState } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\n// @mui\r\nimport { LoadingButton } from \"@mui/lab\";\r\nimport Link from \"@mui/material/Link\";\r\nimport Alert from \"@mui/material/Alert\";\r\nimport Stack from \"@mui/material/Stack\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Box from \"@mui/material/Box\";\r\n// routes\r\nimport { paths } from \"src/routes/paths\";\r\nimport { RouterLink } from \"src/routes/components\";\r\n// components\r\nimport FormProvider, { RHFTextField } from \"src/components/hook-form\";\r\n// api\r\nimport { forgotPassword } from \"src/api/auth\";\r\n\r\nexport default function ForgotPasswordView() {\r\n  const [successMsg, setSuccessMsg] = useState(\"\");\r\n  const [errorMsg, setErrorMsg] = useState(\"\");\r\n\r\n  const ForgotPasswordSchema = Yup.object().shape({\r\n    email: Yup.string()\r\n      .required(\"Email is required\")\r\n      .email(\"Email must be a valid email address\"),\r\n  });\r\n\r\n  const methods = useForm({\r\n    resolver: yupResolver(ForgotPasswordSchema),\r\n    defaultValues: { email: \"\" },\r\n  });\r\n\r\n  const {\r\n    reset,\r\n    handleSubmit,\r\n    formState: { isSubmitting },\r\n  } = methods;\r\n\r\n  const onSubmit = handleSubmit(async (data) => {\r\n    try {\r\n      await forgotPassword(data.email);\r\n      reset();\r\n      setSuccessMsg(\"Password reset link sent to your email!\");\r\n      setErrorMsg(\"\");\r\n    } catch (error) {\r\n      console.error(error);\r\n      setErrorMsg(typeof error === \"string\" ? error : error.message);\r\n      setSuccessMsg(\"\");\r\n    }\r\n  });\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        height: \"100vh\",\r\n      }}\r\n    >\r\n      <Box sx={{width:500}}>\r\n        <FormProvider methods={methods} onSubmit={onSubmit}>\r\n          <Stack spacing={3} sx={{ mb: 5 }}>\r\n            <Typography variant=\"h4\">Forgot your password?</Typography>\r\n\r\n            <Typography variant=\"body2\" sx={{ color: \"text.secondary\" }}>\r\n              Please enter the email address associated with your account and we\r\n              will send you a link to reset your password.\r\n            </Typography>\r\n          </Stack>\r\n\r\n          {!!successMsg && <Alert severity=\"success\">{successMsg}</Alert>}\r\n          {!!errorMsg && <Alert severity=\"error\">{errorMsg}</Alert>}\r\n\r\n          <Stack spacing={2}>\r\n            <RHFTextField name=\"email\" label=\"Email address\" />\r\n\r\n            <LoadingButton\r\n              fullWidth\r\n              size=\"large\"\r\n              type=\"submit\"\r\n              variant=\"contained\"\r\n              loading={isSubmitting}\r\n            >\r\n              Send Reset Link\r\n            </LoadingButton>\r\n\r\n            <Link\r\n              component={RouterLink}\r\n              href={paths.auth.jwt.login}\r\n              variant=\"body2\"\r\n              color=\"inherit\"\r\n              sx={{ alignSelf: \"center\" }}\r\n            >\r\n              Return to sign in\r\n            </Link>\r\n          </Stack>\r\n        </FormProvider>\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n","import { Helmet } from 'react-helmet-async';\r\nimport ForgotPasswordView from 'src/sections/auth/forgot-password/forgot-password-view';\r\n\r\nexport default function ForgotPasswordPage() {\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title> Forgot Password | Revenue Dashboard</title>\r\n      </Helmet>\r\n\r\n      <ForgotPasswordView />\r\n    </>\r\n  );\r\n}"],"names":["forgotPassword","async","result","axios","post","endpoints","auth","email","then","catch","err","_err$response","_err$response$data","response","data","message","Error","error","console","verifyResetToken","type","get","concat","verifyToken","token","res","_err$response2","_err$response2$data","msg","resetPassword","password","_err$response3","_err$response3$data","ForgotPasswordView","successMsg","setSuccessMsg","useState","errorMsg","setErrorMsg","ForgotPasswordSchema","Yup","shape","required","methods","useForm","resolver","yupResolver","defaultValues","reset","handleSubmit","formState","isSubmitting","onSubmit","_jsx","Box","sx","display","justifyContent","alignItems","height","children","width","_jsxs","FormProvider","Stack","spacing","mb","Typography","variant","color","Alert","severity","RHFTextField","name","label","LoadingButton","fullWidth","size","loading","Link","component","RouterLink","href","paths","jwt","login","alignSelf","ForgotPasswordPage","_Fragment","Helmet"],"sourceRoot":""}