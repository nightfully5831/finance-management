{"version":3,"file":"static/js/649.121bdc9a.chunk.js","mappings":"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","sources":["pages/auth/jwt/login.js","sections/auth/jwt/jwt-login-view.js","sections/auth/jwt/jwt-register-view.js"],"sourcesContent":["import { Helmet } from 'react-helmet-async';\r\n// sections\r\nimport { JwtLoginView } from 'src/sections/auth/jwt';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function LoginPage() {\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title> Jwt: Login</title>\r\n      </Helmet>\r\n\r\n      <JwtLoginView />\r\n    </>\r\n  );\r\n}\r\n","import * as Yup from 'yup';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useState } from 'react';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\n// @mui\r\nimport {LoadingButton} from '@mui/lab';\r\nimport Link from '@mui/material/Link';\r\nimport Alert from '@mui/material/Alert';\r\nimport Stack from '@mui/material/Stack';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport InputAdornment from '@mui/material/InputAdornment';\r\n// routes\r\nimport { paths } from 'src/routes/paths';\r\nimport { RouterLink } from 'src/routes/components';\r\nimport { useSearchParams, useRouter } from 'src/routes/hooks';\r\n// config\r\nimport { PATH_AFTER_LOGIN } from 'src/config-global';\r\n// hooks\r\nimport { useBoolean } from 'src/hooks/use-boolean';\r\n// auth\r\nimport { useAuthContext } from 'src/auth/hooks';\r\n// components\r\nimport Iconify from 'src/components/iconify';\r\nimport FormProvider, { RHFTextField } from 'src/components/hook-form';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function JwtLoginView() {\r\n  const { login } = useAuthContext();\r\n\r\n  const router = useRouter();\r\n\r\n  const [errorMsg, setErrorMsg] = useState('');\r\n\r\n  const searchParams = useSearchParams();\r\n\r\n  const returnTo = searchParams.get('returnTo');\r\n  const password = useBoolean();\r\n\r\n  const LoginSchema = Yup.object().shape({\r\n    email: Yup.string().required('Email is required').email('Email must be a valid email address'),\r\n    password: Yup.string().required('Password is required'),\r\n  });\r\n\r\n  const defaultValues = {\r\n    email: '',\r\n    password: '',\r\n  };\r\n\r\n  const methods = useForm({\r\n    resolver: yupResolver(LoginSchema),\r\n    defaultValues,\r\n  });\r\n\r\n  const {\r\n    reset,\r\n    handleSubmit,\r\n    formState: { isSubmitting },\r\n  } = methods;\r\n\r\n  const onSubmit = handleSubmit(async (data) => {\r\n    try {\r\n      await login?.(data.email, data.password);\r\n      router.push(returnTo || PATH_AFTER_LOGIN);\r\n    } catch (error) {\r\n      console.error(error);\r\n      reset();\r\n      setErrorMsg(typeof error === 'string' ? error : error.message);\r\n    }\r\n  });\r\n\r\n  const renderHead = (\r\n    <Stack spacing={2} sx={{ mb: 5 }}>\r\n      <Typography variant=\"h4\">Sign in to Revenue Dashboard</Typography>\r\n\r\n      <Stack direction=\"row\" spacing={0.5}>\r\n        <Typography variant=\"body2\">New user?</Typography>\r\n\r\n        <Link component={RouterLink} href={paths.auth.jwt.register} variant=\"subtitle2\">\r\n          Create an account\r\n        </Link>\r\n      </Stack>\r\n    </Stack>\r\n  );\r\n\r\n  const renderForm = (\r\n    <Stack spacing={2.5}>\r\n      {!!errorMsg && <Alert severity=\"error\">{errorMsg}</Alert>}\r\n\r\n      <RHFTextField name=\"email\" label=\"Email address\" />\r\n\r\n      <RHFTextField\r\n        name=\"password\"\r\n        label=\"Password\"\r\n        type={password.value ? 'text' : 'password'}\r\n        InputProps={{\r\n          endAdornment: (\r\n            <InputAdornment position=\"end\">\r\n              <IconButton onClick={password.onToggle} edge=\"end\">\r\n                <Iconify icon={password.value ? 'solar:eye-bold' : 'solar:eye-closed-bold'} />\r\n              </IconButton>\r\n            </InputAdornment>\r\n          ),\r\n        }}\r\n      />\r\n\r\n      {/* <Link variant=\"body2\" color=\"inherit\" underline=\"always\" sx={{ alignSelf: 'flex-end' }}>\r\n        Forgot password?\r\n      </Link> */}\r\n\r\n      <LoadingButton\r\n        fullWidth\r\n        color=\"primary\"\r\n        size=\"large\"\r\n        type=\"submit\"\r\n        variant='contained'\r\n        loading={isSubmitting}\r\n      >\r\n        Login\r\n      </LoadingButton>\r\n    </Stack>\r\n  );\r\n\r\n  return (\r\n    <FormProvider methods={methods} onSubmit={onSubmit}>\r\n      {renderHead}\r\n\r\n      {renderForm}\r\n    </FormProvider>\r\n  );\r\n}\r\n","import * as Yup from 'yup';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useState } from 'react';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\n// @mui\r\nimport {LoadingButton} from '@mui/lab';\r\nimport Link from '@mui/material/Link';\r\nimport Alert from '@mui/material/Alert';\r\nimport Stack from '@mui/material/Stack';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport InputAdornment from '@mui/material/InputAdornment';\r\n// hooks\r\nimport { useBoolean } from 'src/hooks/use-boolean';\r\n// routes\r\nimport { paths } from 'src/routes/paths';\r\nimport { RouterLink } from 'src/routes/components';\r\nimport { useRouter } from 'src/routes/hooks';\r\nimport { useAuthContext } from 'src/auth/hooks';\r\n// components\r\nimport Iconify from 'src/components/iconify';\r\nimport FormProvider, { RHFTextField } from 'src/components/hook-form';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function JwtRegisterView() {\r\n  const { register } = useAuthContext();\r\n  const router = useRouter();\r\n  const [errorMsg, setErrorMsg] = useState('');\r\n  const password = useBoolean();\r\n\r\n  const RegisterSchema = Yup.object().shape({\r\n    name: Yup.string().required('Name is required'),\r\n    email: Yup.string().required('Email is required').email('Email must be a valid email address'),\r\n    password: Yup.string().required('Password is required'),\r\n  });\r\n\r\n  const defaultValues = {\r\n    name: '',\r\n    email: '',\r\n    password: '',\r\n    role : 1\r\n  };\r\n\r\n  const methods = useForm({\r\n    resolver: yupResolver(RegisterSchema),\r\n    defaultValues,\r\n  });\r\n\r\n  const {\r\n    reset,\r\n    handleSubmit,\r\n    formState: { isSubmitting },\r\n  } = methods;\r\n\r\n  const onSubmit = handleSubmit(async (data) => {\r\n    try {\r\n      await register?.(data.email, data.password, data.name, data.role);\r\n      router.push(paths.dashboard.root);\r\n    } catch (error) {\r\n      console.error(error);\r\n      reset();\r\n      setErrorMsg(typeof error === 'string' ? error : error.message);\r\n    }\r\n  });\r\n\r\n  const renderHead = (\r\n    <Stack spacing={2} sx={{ mb: 5, position: 'relative' }}>\r\n      <Typography variant=\"h4\">Get started absolutely free</Typography>\r\n\r\n      <Stack direction=\"row\" spacing={0.5}>\r\n        <Typography variant=\"body2\"> Already have an account? </Typography>\r\n\r\n        <Link href={paths.auth.jwt.login} component={RouterLink} variant=\"subtitle2\">\r\n          Sign in\r\n        </Link>\r\n      </Stack>\r\n    </Stack>\r\n  );\r\n\r\n  const renderTerms = (\r\n    <Typography\r\n      component=\"div\"\r\n      sx={{\r\n        color: 'text.secondary',\r\n        mt: 2.5,\r\n        typography: 'caption',\r\n        textAlign: 'center',\r\n      }}\r\n    >\r\n      {'By signing up, I agree to '}\r\n      <Link underline=\"always\" color=\"text.primary\">\r\n        Terms of Service\r\n      </Link>\r\n      {' and '}\r\n      <Link underline=\"always\" color=\"text.primary\">\r\n        Privacy Policy\r\n      </Link>\r\n      .\r\n    </Typography>\r\n  );\r\n\r\n  const renderForm = (\r\n    <FormProvider methods={methods} onSubmit={onSubmit}>\r\n      <Stack spacing={2.5}>\r\n        {!!errorMsg && <Alert severity=\"error\">{errorMsg}</Alert>}\r\n        \r\n        <RHFTextField name=\"name\" label=\"Company Name\" />\r\n        <RHFTextField name=\"email\" label=\"Email address\" />\r\n\r\n        <RHFTextField\r\n          name=\"password\"\r\n          label=\"Password\"\r\n          type={password.value ? 'text' : 'password'}\r\n          InputProps={{\r\n            endAdornment: (\r\n              <InputAdornment position=\"end\">\r\n                <IconButton onClick={password.onToggle} edge=\"end\">\r\n                  <Iconify icon={password.value ? 'solar:eye-bold' : 'solar:eye-closed-bold'} />\r\n                </IconButton>\r\n              </InputAdornment>\r\n            ),\r\n          }}\r\n        />\r\n\r\n        <LoadingButton\r\n          fullWidth\r\n          color=\"primary\"\r\n          variant='contained'\r\n          size=\"large\"\r\n          type=\"submit\"\r\n          loading={isSubmitting}\r\n        >\r\n          Create account\r\n        </LoadingButton>\r\n      </Stack>\r\n    </FormProvider>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      {renderHead}\r\n\r\n      {renderForm}\r\n\r\n      {renderTerms}\r\n    </>\r\n  );\r\n}\r\n"],"names":["LoginPage","_jsxs","_Fragment","children","_jsx","Helmet","JwtLoginView","login","useAuthContext","router","useRouter","errorMsg","setErrorMsg","useState","returnTo","useSearchParams","get","password","useBoolean","LoginSchema","Yup","shape","email","required","methods","useForm","resolver","yupResolver","defaultValues","reset","handleSubmit","formState","isSubmitting","onSubmit","async","data","push","PATH_AFTER_LOGIN","error","console","message","renderHead","Stack","spacing","sx","mb","Typography","variant","direction","Link","component","RouterLink","href","paths","auth","jwt","register","renderForm","Alert","severity","RHFTextField","name","label","type","value","InputProps","endAdornment","InputAdornment","position","IconButton","onClick","onToggle","edge","Iconify","icon","LoadingButton","fullWidth","color","size","loading","FormProvider","JwtRegisterView","RegisterSchema","role","dashboard","root","renderTerms","mt","typography","textAlign","underline"],"sourceRoot":""}