openapi: 3.0.0
info:
  title: Swagger Biddi Cars
  description: Biddi Cars Backend API - Node.js + Express
  version: 1.0.0
  contact:
    - email: riskdynamix@bimass.com
basePath: '/api'
produces:
  - application/json
servers:
  - url: http://localhost:5000
    description: Local development server
  - url: https://riskdynamix-dev.bimass.com
    description: AWS EC2 Development server
  - url: https://riskdynamix.bimass.com
    description: AWS EC2 Production server
tags:
  - name: User
    description: Operations of users and subscriptions
paths:
  #---------------------------USER-------------------------------

  # Biddi Cars API Documentation
  /api/login:
    post:
      tags:
        - 'User'
      summary: Login into dashboard
      description: 'S'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: 'john@example.com'
                password:
                  type: string
                  example: 'MyPassword'
                required:
                  - email
                    password
      responses:
        201:
          description: Created

  # CGA
  /api/admin/users?page={page}&search={search}:
    parameters:
      - in: path
        name: page
        description: Page number
        required: true
        example: 1
        schema:
          type: string
      - in: path
        name: search
        description: Search text query
        example: john
        schema:
          type: string
    get:
      tags:
        - 'User'
      summary: Get list of system admin access users
      access: CGA
      description: description
      responses:
        200:
          description: Returns response with paginated data and other properties
  /api/admin/user:
    post:
      tags:
        - 'User'
      summary: Create system admin access user
      description: Create other CGA admin users by a CGA with permission to create users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  example: 'john'
                lastName:
                  type: string
                  example: 'doe'
                email:
                  type: string
                  example: 'john@example.com'
                phoneNumber:
                  type: string
                  example: '+921230000000'
                permissions:
                  type: array
                  example: ['C_U', 'E_U']
                role:
                  type: string
                  example: 'System Admin'
                subscriptionId:
                  type: string
                picture:
                  type: string
                  example: 'https://s3.aws.amazon.com/example/xxxx'
              required:
                - firstName
                  lastName
                  email
                  phoneNumber
                  role
                  subscriptionId
      responses:
        201:
          description: Created

  ## SA
  /api/sa/users?page={page}&search={search}:
    parameters:
      - in: path
        name: page
        description: Page number
        required: true
        example: 1
        schema:
          type: string
      - in: path
        name: search
        description: Search text query
        example: john
        schema:
          type: string
    get:
      tags:
        - 'User'
      summary: Get SA organization users
      description: Returns list of users in SA organization
      responses:
        200:
          description: Returns response with paginated data and other properties
  /api/sa/user:
    post:
      tags:
        - 'User'
      summary: Create a user in SA organization
      access: SA
      description: Create any role user in SA organization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  example: 'john'
                lastName:
                  type: string
                  example: 'doe'
                email:
                  type: string
                  example: 'john@example.com'
                phoneNumber:
                  type: string
                  example: '+921230000000'
                role:
                  type: string
                  example: 'Refer to USER_ROLE'
                subscriptionId:
                  type: string
                picture:
                  type: string
                  example: 'https://s3.aws.amazon.com/example/xxxx'
              required:
                - firstName
                  lastName
                  email
                  phoneNumber
                  role
                  subscriptionId
      responses:
        201:
          description: Created

  ## RAA
  /api/raa/users?page={page}&search={search}:
    parameters:
      - in: path
        name: page
        description: Page number
        required: true
        example: 1
        schema:
          type: string
      - in: path
        name: search
        description: Search text query
        example: john
        schema:
          type: string
    get:
      tags:
        - 'User'
      summary: Get RAA and assigned users list
      description: Get users (raa,ravo,ra) assigned to admin's assessments  (RAA, RAVO)
      responses:
        200:
          description: Returns response with paginated data and other properties
  /api/raa/user:
    post:
      tags:
        - 'User'
      summary: Create a user by RAA
      description: Creates any RAA and below role user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  example: 'john'
                lastName:
                  type: string
                  example: 'doe'
                email:
                  type: string
                  example: 'john@example.com'
                phoneNumber:
                  type: string
                  example: '+921230000000'
                role:
                  type: string
                  example: 'Refer to USER_ROLE'
                subscriptionId:
                  type: string
                picture:
                  type: string
                  example: 'https://s3.aws.amazon.com/example/xxxx'
              required:
                - firstName
                  lastName
                  email
                  phoneNumber
                  role
                  subscriptionId
      responses:
        201:
          description: Created

  ## Multiple access
  /api/user/select/subscription:
    get:
      tags:
        - 'User'
      summary: User select subscription and token
      description: Selects the user last subscription used and returns data with server decoded role token
      security:
        - bearerAuth: []
      responses:
        200:
          description: description
          headers:
            Set-Cookie:
              description: '`roleToken`'
              schema:
                type: string
                example: roleToken=51872eca5efedcf424db4cf5afd16a9d00ad25b743a034c9c221afc85d18dcd5e4ad6e3f08607550; Path=/; Expires=True, 16 Jun 2020 09:14:17 GMT; HttpOnly
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: '5eb12e197e06a76ccdefc121'
                  name:
                    type: string
                    example: 'John'
                  email:
                    type: string
                    example: 'john@example.com'
                  role:
                    type: string
                    example: 'admin'
                  phoneNumber:
                    type: string
                    example: +1 2121221221
                  address:
                    type: string
                    example: Abc street
                  about:
                    type: string
                    example: I am a  software developer.
                  created:
                    type: string
                    example: '2020-05-05T09:12:57.848Z'
                  jwtToken:
                    type: string
                    example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWIxMmUxOTdlMDZhNzZjY2RlZmMxMjEiLCJpZCI6IjVlYjEyZTE5N2UwNmE3NmNjZGVmYzEyMSIsImlhdCI6MTU4ODc1ODE1N30.xR9H0STbFOpSkuGA9jHNZOJ6eS7umHHqKRhI807YT1Y'
  /api/user/{id}/change-status:
    parameters:
      - in: path
        name: id
        description: User object id
        required: true
        example: 6232eba58af4fb8e4c863eb2
        schema:
          type: string
    put:
      tags:
        - 'User'
      summary: Change status (active/inactive) of user
      description: Change user status in an organization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: number
                  example: 1
              required:
                - status
      responses:
        200:
          description: OK

  # /accounts/authenticate:
  #   post:
  #     tags:
  #       - 'Account'
  #     summary: Authenticate account credentials and return a JWT token and a cookie with a refresh token
  #     description: Accounts must be verified before authenticating.
  #     operationId: authenticate
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               email:
  #                 type: string
  #                 example: 'admin@zogros.com'
  #               password:
  #                 type: string
  #                 example: 'Zogros2022.'
  #             required:
  #               - email
  #               - password
  #     responses:
  #       '200':
  #         description: Account details, a JWT access token and a refresh token cookie
  #         headers:
  #           Set-Cookie:
  #             description: '`refreshToken`'
  #             schema:
  #               type: string
  #               example: refreshToken=51872eca5efedcf424db4cf5afd16a9d00ad25b743a034c9c221afc85d18dcd5e4ad6e3f08607550; Path=/; Expires=Tue, 16 Jun 2020 09:14:17 GMT; HttpOnly
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               properties:
  #                 id:
  #                   type: string
  #                   example: '5eb12e197e06a76ccdefc121'
  #                 name:
  #                   type: string
  #                   example: 'John'
  #                 email:
  #                   type: string
  #                   example: 'john@example.com'
  #                 role:
  #                   type: string
  #                   example: 'admin'
  #                 phoneNumber:
  #                   type: string
  #                   example: +1 2121221221
  #                 address:
  #                   type: string
  #                   example: Abc street
  #                 about:
  #                   type: string
  #                   example: I am a  software developer.
  #                 created:
  #                   type: string
  #                   example: '2020-05-05T09:12:57.848Z'
  #                 jwtToken:
  #                   type: string
  #                   example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWIxMmUxOTdlMDZhNzZjY2RlZmMxMjEiLCJpZCI6IjVlYjEyZTE5N2UwNmE3NmNjZGVmYzEyMSIsImlhdCI6MTU4ODc1ODE1N30.xR9H0STbFOpSkuGA9jHNZOJ6eS7umHHqKRhI807YT1Y'
  #       '400':
  #         description: The email or password is incorrect
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               properties:
  #                 message:
  #                   type: string
  #                   example: 'Email or password is incorrect'
  # /accounts/token-signin:
  #   get:
  #     tags:
  #       - 'Account'
  #     summary: Authenticate token and return a new JWT token and a cookie with a refresh token
  #     description: Accounts must be verified before authenticating.
  #     operationId: tokenSignin
  #     security:
  #       - bearerAuth: []
  #     responses:
  #       '200':
  #         description: Account details, a JWT access token and a refresh token cookie
  #         headers:
  #           Set-Cookie:
  #             description: '`refreshToken`'
  #             schema:
  #               type: string
  #               example: refreshToken=51872eca5efedcf424db4cf5afd16a9d00ad25b743a034c9c221afc85d18dcd5e4ad6e3f08607550; Path=/; Expires=Tue, 16 Jun 2020 09:14:17 GMT; HttpOnly
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               properties:
  #                 id:
  #                   type: string
  #                   example: '5eb12e197e06a76ccdefc121'
  #                 name:
  #                   type: string
  #                   example: 'John'
  #                 email:
  #                   type: string
  #                   example: 'john@example.com'
  #                 role:
  #                   type: string
  #                   example: 'admin'
  #                 phoneNumber:
  #                   type: string
  #                   example: +1 2121221221
  #                 address:
  #                   type: string
  #                   example: Abc street
  #                 about:
  #                   type: string
  #                   example: I am a  software developer.
  #                 created:
  #                   type: string
  #                   example: '2020-05-05T09:12:57.848Z'
  #                 jwtToken:
  #                   type: string
  #                   example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWIxMmUxOTdlMDZhNzZjY2RlZmMxMjEiLCJpZCI6IjVlYjEyZTE5N2UwNmE3NmNjZGVmYzEyMSIsImlhdCI6MTU4ODc1ODE1N30.xR9H0STbFOpSkuGA9jHNZOJ6eS7umHHqKRhI807YT1Y'
  #       '400':
  #         description: The email or password is incorrect
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               properties:
  #                 message:
  #                   type: string
  #                   example: 'Email or password is incorrect'
  # /accounts/refresh-token:
  #   post:
  #     tags:
  #       - 'Account'
  #     summary: Use a refresh token to generate a new JWT token and a new refresh token
  #     description: The refresh token is sent and returned via cookies.
  #     operationId: refreshToken
  #     parameters:
  #       - in: cookie
  #         name: refreshToken
  #         description: The `refreshToken` cookie
  #         schema:
  #           type: string
  #           example: 51872eca5efedcf424db4cf5afd16a9d00ad25b743a034c9c221afc85d18dcd5e4ad6e3f08607550
  #     responses:
  #       '200':
  #         description: Account details, a JWT access token and a new refresh token cookie
  #         headers:
  #           Set-Cookie:
  #             description: '`refreshToken`'
  #             schema:
  #               type: string
  #               example: refreshToken=51872eca5efedcf424db4cf5afd16a9d00ad25b743a034c9c221afc85d18dcd5e4ad6e3f08607550; Path=/; Expires=Tue, 16 Jun 2020 09:14:17 GMT; HttpOnly
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               properties:
  #                 id:
  #                   type: string
  #                   example: '5eb12e197e06a76ccdefc121'
  #                 name:
  #                   type: string
  #                   example: 'John'
  #                 email:
  #                   type: string
  #                   example: 'john@example.com'
  #                 role:
  #                   type: string
  #                   example: 'admin'
  #                 phoneNumber:
  #                   type: string
  #                   example: +1 2121221221
  #                 address:
  #                   type: string
  #                   example: Abc street
  #                 about:
  #                   type: string
  #                   example: I am a  software developer.
  #                 created:
  #                   type: string
  #                   example: '2020-05-05T09:12:57.848Z'
  #                 jwtToken:
  #                   type: string
  #                   example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWIxMmUxOTdlMDZhNzZjY2RlZmMxMjEiLCJpZCI6IjVlYjEyZTE5N2UwNmE3NmNjZGVmYzEyMSIsImlhdCI6MTU4ODc1ODE1N30.xR9H0STbFOpSkuGA9jHNZOJ6eS7umHHqKRhI807YT1Y'
  #       '400':
  #         description: The refresh token is invalid, revoked or expired
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               properties:
  #                 message:
  #                   type: string
  #                   example: 'Invalid token'
  # /accounts/revoke-token:
  #   post:
  #     tags:
  #       - 'Account'
  #     summary: Revoke a refresh token
  #     description: admin users can revoke the tokens of any account, regular users can only revoke their own tokens.
  #     operationId: revokeToken
  #     security:
  #       - bearerAuth: []
  #     parameters:
  #       - in: cookie
  #         name: refreshToken
  #         description: The refresh token can be sent in a cookie or the post body, if both are sent the token in the body is used.
  #         schema:
  #           type: string
  #           example: 51872eca5efedcf424db4cf5afd16a9d00ad25b743a034c9c221afc85d18dcd5e4ad6e3f08607550
  #     requestBody:
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               token:
  #                 type: string
  #                 example: '51872eca5efedcf424db4cf5afd16a9d00ad25b743a034c9c221afc85d18dcd5e4ad6e3f08607550'
  #     responses:
  #       '200':
  #         description: The refresh token was successfully revoked
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               properties:
  #                 message:
  #                   type: string
  #                   example: 'Token revoked'
  #       '400':
  #         description: The refresh token is invalid
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               properties:
  #                 message:
  #                   type: string
  #                   example: 'Invalid token'
  #       '401':
  #         $ref: '#/components/responses/UnauthorizedError'
  # /accounts/forgot-password:
  #   post:
  #     tags:
  #       - 'Account'
  #     summary: Submit email address to reset the password on an account
  #     operationId: forgotPassword
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               email:
  #                 type: string
  #                 example: 'john@example.com'
  #             required:
  #               - email
  #     responses:
  #       '200':
  #         description: The request was received and an email has been sent to the specified address with password reset instructions (if the email address is associated with an account)
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               properties:
  #                 message:
  #                   type: string
  #                   example: 'Please check your email for password reset instructions'
  # /accounts/validate-reset-token:
  #   post:
  #     tags:
  #       - 'Account'
  #     summary: Validate the reset password token received by email after submitting to the /accounts/forgot-password route
  #     operationId: validateResetToken
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               token:
  #                 type: string
  #                 example: '3c7f8d9c4cb348ff95a0b74a1452aa24fc9611bb76768bb9eafeeb826ddae2935f1880bc7713318f'
  #             required:
  #               - token
  #     responses:
  #       '200':
  #         description: Token is valid
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               properties:
  #                 message:
  #                   type: string
  #                   example: 'Token is valid'
  #       '400':
  #         description: Token is invalid
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               properties:
  #                 message:
  #                   type: string
  #                   example: 'Invalid token'
  # /accounts/reset-password:
  #   post:
  #     tags:
  #       - 'Account'
  #     summary: Reset the password for an account
  #     operationId: resetPassword
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               token:
  #                 type: string
  #                 example: '3c7f8d9c4cb348ff95a0b74a1452aa24fc9611bb76768bb9eafeeb826ddae2935f1880bc7713318f'
  #               password:
  #                 type: string
  #                 example: 'newPass123'
  #               confirmPassword:
  #                 type: string
  #                 example: 'newPass123'
  #             required:
  #               - token
  #               - password
  #               - confirmPassword
  #     responses:
  #       '200':
  #         description: Password reset was successful so you can now login to the account with the new password
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               properties:
  #                 message:
  #                   type: string
  #                   example: 'Password reset successful, you can now login'
  #       '400':
  #         description: Password reset failed due to an invalid token
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               properties:
  #                 message:
  #                   type: string
  #                   example: 'Invalid token'
  # /accounts:
  #   get:
  #     tags:
  #       - 'Account'
  #     summary: Get a list of all accounts
  #     description: Restricted to admin users.
  #     operationId: getAllAccounts
  #     security:
  #       - bearerAuth: []
  #     responses:
  #       '200':
  #         description: An array of all accounts
  #         content:
  #           application/json:
  #             schema:
  #               type: array
  #               items:
  #                 type: object
  #                 properties:
  #                   id:
  #                     type: string
  #                     example: '5eb12e197e06a76ccdefc121'
  #                   name:
  #                     type: string
  #                     example: 'John'
  #                   email:
  #                     type: string
  #                     example: 'john@example.com'
  #                   role:
  #                     type: string
  #                     example: 'admin'
  #                   phoneNumber:
  #                     type: string
  #                     example: +1 2121221221
  #                   address:
  #                     type: string
  #                     example: Abc street
  #                   about:
  #                     type: string
  #                     example: I am a  software developer.
  #                   created:
  #                     type: string
  #                     example: '2020-05-05T09:12:57.848Z'
  #                   updated:
  #                     type: string
  #                     example: '2020-05-08T03:11:21.553Z'
  #       '401':
  #         $ref: '#/components/responses/UnauthorizedError'
  #   post:
  #     tags:
  #       - 'Account'
  #     summary: Create a new account
  #     description: Restricted to admin users.
  #     operationId: createAccount
  #     security:
  #       - bearerAuth: []
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               name:
  #                 type: string
  #                 example: 'John'
  #               email:
  #                 type: string
  #                 example: 'john@example.com'
  #               role:
  #                 type: string
  #                 enum: [admin, user]
  #               phoneNumber:
  #                 type: string
  #                 example: +1 2121221221
  #               address:
  #                 type: string
  #                 example: Abc street
  #               about:
  #                 type: string
  #                 example: I am a  software developer.
  #             required:
  #               - name
  #               - email
  #               - role
  #     responses:
  #       '200':
  #         description: Account created successfully, verification is not required for accounts created with this endpoint. The details of the new account are returned.
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               properties:
  #                 id:
  #                   type: string
  #                   example: '5eb12e197e06a76ccdefc121'
  #                 name:
  #                   type: string
  #                   example: 'John'
  #                 email:
  #                   type: string
  #                   example: 'john@example.com'
  #                 role:
  #                   type: string
  #                   example: 'admin'
  #                 phoneNumber:
  #                   type: string
  #                   example: +1 2121221221
  #                 address:
  #                   type: string
  #                   example: Abc street
  #                 about:
  #                   type: string
  #                   example: I am a  software developer.
  #                 created:
  #                   type: string
  #                   example: '2020-05-05T09:12:57.848Z'
  #       '400':
  #         description: Email is already registered
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               properties:
  #                 message:
  #                   type: string
  #                   example: "Email 'john@example.com' is already registered"
  #       '401':
  #         $ref: '#/components/responses/UnauthorizedError'
  # /accounts/{id}:
  #   parameters:
  #     - in: path
  #       name: id
  #       description: Account id
  #       required: true
  #       example: '5eb12e197e06a76ccdefc121'
  #       schema:
  #         type: string
  #   get:
  #     tags:
  #       - 'Account'
  #     summary: Get a single account by id
  #     description: admin users can access any account, regular users are restricted to their own account.
  #     operationId: getAccountById
  #     security:
  #       - bearerAuth: []
  #     responses:
  #       '200':
  #         description: Details of the specified account
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               properties:
  #                 id:
  #                   type: string
  #                   example: '5eb12e197e06a76ccdefc121'
  #                 name:
  #                   type: string
  #                   example: 'John'
  #                 email:
  #                   type: string
  #                   example: 'john@example.com'
  #                 role:
  #                   type: string
  #                   example: 'admin'
  #                 phoneNumber:
  #                   type: string
  #                   example: +1 2121221221
  #                 address:
  #                   type: string
  #                   example: Abc street
  #                 about:
  #                   type: string
  #                   example: I am a  software developer.
  #                 created:
  #                   type: string
  #                   example: '2020-05-05T09:12:57.848Z'
  #                 updated:
  #                   type: string
  #                   example: '2020-05-08T03:11:21.553Z'
  #       '404':
  #         $ref: '#/components/responses/NotFoundError'
  #       '401':
  #         $ref: '#/components/responses/UnauthorizedError'
  #   put:
  #     tags:
  #       - 'Account'
  #     summary: Update an account
  #     description: admin users can update any account including role, regular users are restricted to their own account and cannot update role.
  #     operationId: updateAccount
  #     security:
  #       - bearerAuth: []
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               name:
  #                 type: string
  #                 example: 'John'
  #               email:
  #                 type: string
  #                 example: 'john@example.com'
  #               role:
  #                 type: string
  #                 enum: [admin, user]
  #               phoneNumber:
  #                 type: string
  #                 example: +1 2121221221
  #               address:
  #                 type: string
  #                 example: Abc street
  #               about:
  #                 type: string
  #                 example: I am a  software developer.
  #     responses:
  #       '200':
  #         description: Account updated successfully. The details of the updated account are returned.
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               properties:
  #                 id:
  #                   type: string
  #                   example: '5eb12e197e06a76ccdefc121'
  #                 name:
  #                   type: string
  #                   example: 'John'
  #                 email:
  #                   type: string
  #                   example: 'john@example.com'
  #                 role:
  #                   type: string
  #                   example: 'admin'
  #                 phoneNumber:
  #                   type: string
  #                   example: +1 2121221221
  #                 address:
  #                   type: string
  #                   example: Abc street
  #                 about:
  #                   type: string
  #                   example: I am a  software developer.
  #                 created:
  #                   type: string
  #                   example: '2020-05-05T09:12:57.848Z'
  #                 updated:
  #                   type: string
  #                   example: '2020-05-08T03:11:21.553Z'
  #       '404':
  #         $ref: '#/components/responses/NotFoundError'
  #       '401':
  #         $ref: '#/components/responses/UnauthorizedError'
  #   delete:
  #     tags:
  #       - 'Account'
  #     summary: Delete an account
  #     description: admin users can delete any account, regular users are restricted to their own account.
  #     operationId: deleteAccount
  #     security:
  #       - bearerAuth: []
  #     responses:
  #       '200':
  #         description: Account deleted successfully
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               properties:
  #                 message:
  #                   type: string
  #                   example: 'Account deleted successfully'
  #       '404':
  #         $ref: '#/components/responses/NotFoundError'
  #       '401':
  #         $ref: '#/components/responses/UnauthorizedError'
  # /contents/files:
  #   post:
  #     tags:
  #       - 'Content'
  #     summary: Upload content - Files
  #     description: Restricted to admin users, upload max 5 files at a time.
  #     operationId: uploadContentFolder
  #     security:
  #       - bearerAuth: []
  #     requestBody:
  #       content:
  #         multipart/form-data:
  #           schema:
  #             type: object
  #             properties:
  #               files:
  #                 type: array
  #                 items:
  #                   type: string
  #                   format: binary
  #               folderId:
  #                 type: string
  #                 example: 232131sadasdsad8sad
  #     responses:
  #       '200':
  #         description: Files uploaded successfully
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               properties:
  #                 message:
  #                   type: string
  #                   example: 'Files uploaded successfully'
  #       '400':
  #         description: Something went wrong
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               properties:
  #                 message:
  #                   type: string
  #                   example: 'Something went wrong'
  #       '401':
  #         $ref: '#/components/responses/UnauthorizedError'
  # /contents/folder:
  #   post:
  #     tags:
  #       - 'Content'
  #     summary: Upload content - Folder
  #     description: Restricted to admin users.
  #     operationId: uploadContentFiles
  #     security:
  #       - bearerAuth: []
  #     requestBody:
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               folderId:
  #                 type: string
  #                 example: 231313sdasd2312a
  #               name:
  #                 type: string
  #                 example: 'My folder'
  #               description:
  #                 type: string
  #                 example: 'My folder description'
  #             required:
  #               - name
  #     responses:
  #       '200':
  #         description: Folder uploaded successfully
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               properties:
  #                 message:
  #                   type: string
  #                   example: 'Folder uploaded successfully'
  #       '400':
  #         description: Something went wrong
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               properties:
  #                 message:
  #                   type: string
  #                   example: 'Something went wrong'
  #       '401':
  #         $ref: '#/components/responses/UnauthorizedError'
  # /contents/{id}:
  #   parameters:
  #     - in: path
  #       name: id
  #       description: Folder / File id
  #       required: true
  #       example: 'root'
  #       schema:
  #         type: string
  #   get:
  #     tags:
  #       - 'Content'
  #     summary: Get a list of all content
  #     description: Get a list of all content on root or inside a folder. Pass folder id if it's inside folder, otherwise pass 'root'.
  #     operationId: getAllContent
  #     security:
  #       - bearerAuth: []
  #     responses:
  #       '200':
  #         description: An array of all content
  #         content:
  #           application/json:
  #             schema:
  #               type: array
  #               items:
  #                 type: object
  #                 properties:
  #                   id:
  #                     type: string
  #                     example: '5eb12e197e06a76ccdefc121'
  #                   folderId:
  #                     type: string
  #                     example: '5eb12e197e06a76ccdefc121'
  #                   name:
  #                     type: string
  #                     example: 'John'
  #                   size:
  #                     type: string
  #                     example: '1 MB'
  #                   type:
  #                     type: string
  #                     example: 'folder'
  #                   contents:
  #                     type: string
  #                     example: '2 files'
  #                   description:
  #                     type: string
  #                     example: 'Personal documents such as insurance policies, tax papers and etc.'
  #                   createdBy:
  #                     type: string
  #                     example: 'Zogros'
  #                   createdAt:
  #                     type: string
  #                     example: '2020-05-05T09:12:57.848Z'
  #                   modifiedAt:
  #                     type: string
  #                     example: '2020-05-08T03:11:21.553Z'
  #       '401':
  #         $ref: '#/components/responses/UnauthorizedError'
  #   delete:
  #     tags:
  #       - 'Content'
  #     summary: Delete content
  #     description: admin users can delete any Content, regular users are restricted.
  #     operationId: deleteContent
  #     security:
  #       - bearerAuth: []
  #     responses:
  #       '200':
  #         description: Content deleted successfully
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               properties:
  #                 message:
  #                   type: string
  #                   example: 'Content deleted successfully'
  #       '404':
  #         $ref: '#/components/responses/NotFoundError'
  #       '401':
  #         $ref: '#/components/responses/UnauthorizedError'
components:
  schemas:
    User:
      type: object
      properties:
        id:
          - type: ObjectId
            description:
            example: asdli213l12io31oihoaisdoi
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  permissions:
    C_U:
      description: Create User Permission
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid, or the user does not have access to perform the action
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: 'Unauthorized'
    NotFoundError:
      description: Not Found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: 'Not Found'
